{
  "version": 3,
  "sources": ["../../node_modules/@keg-hub/jsutils/src/validation/validate.js", "../../node_modules/@keg-hub/jsutils/src/array/isArr.js", "../../node_modules/@keg-hub/jsutils/src/array/areFrequencyEqual.js", "../../node_modules/@keg-hub/jsutils/src/object/isObj.js", "../../node_modules/@keg-hub/jsutils/src/array/ensureArr.js", "../../node_modules/@keg-hub/jsutils/src/method/isFunc.js", "../../node_modules/@keg-hub/jsutils/src/object/deepFreeze.js", "../../node_modules/@keg-hub/jsutils/src/method/noOp.js", "../../node_modules/@keg-hub/jsutils/src/ext/exists.js", "../../node_modules/@keg-hub/jsutils/src/array/flatArr.js", "../../node_modules/@keg-hub/jsutils/src/method/applyToFunc.js", "../../node_modules/@keg-hub/jsutils/src/method/pipeline.js", "../../node_modules/@keg-hub/jsutils/src/string/isStr.js", "../../node_modules/@keg-hub/jsutils/src/string/mapString.js", "../../node_modules/@keg-hub/jsutils/src/string/isLowerCase.js", "../../node_modules/@keg-hub/jsutils/src/string/isUpperCase.js", "../../node_modules/@keg-hub/jsutils/src/string/delimitString.js", "../../node_modules/@keg-hub/jsutils/src/string/capitalize.js", "../../node_modules/@keg-hub/jsutils/src/string/removeDot.js", "../../node_modules/@keg-hub/jsutils/src/string/cleanStr.js", "../../node_modules/@keg-hub/jsutils/src/string/camelCase.js", "../../node_modules/@keg-hub/jsutils/src/string/toStr.js", "../../node_modules/@keg-hub/jsutils/src/string/hyphenator.js", "../../node_modules/@keg-hub/jsutils/src/number/equalsNaN.js", "../../node_modules/@keg-hub/jsutils/src/number/isNum.js", "../../node_modules/@keg-hub/jsutils/src/number/isNonNegative.js", "../../node_modules/@keg-hub/jsutils/src/string/sanitize.js", "../../node_modules/@keg-hub/jsutils/src/collection/isColl.js", "../../node_modules/@keg-hub/jsutils/src/collection/updateColl.js", "../../node_modules/@keg-hub/jsutils/src/collection/get.js", "../../node_modules/@keg-hub/jsutils/src/string/template.js", "../../node_modules/@keg-hub/jsutils/src/string/isQuoted.js", "../../node_modules/@keg-hub/jsutils/src/string/reverseStr.js", "../../node_modules/@keg-hub/jsutils/src/string/getWordStartingAt.js", "../../node_modules/@keg-hub/jsutils/src/boolean/isBool.js", "../../node_modules/@keg-hub/jsutils/src/boolean/isStrBool.js", "../../node_modules/@keg-hub/jsutils/src/boolean/convertToStrBool.js", "../../node_modules/@keg-hub/jsutils/src/boolean/softFalsy.js", "../../node_modules/@keg-hub/jsutils/src/boolean/toBool.js", "../../node_modules/@keg-hub/jsutils/src/number/getNums.js", "../../node_modules/@keg-hub/jsutils/src/number/toNum.js", "../../node_modules/@keg-hub/jsutils/src/method/isOrderable.js", "../../node_modules/@keg-hub/jsutils/src/method/compareTo.js", "../../node_modules/@keg-hub/jsutils/src/method/identity.js", "../../node_modules/@keg-hub/jsutils/src/object/hasOwn.js", "../../node_modules/@keg-hub/jsutils/src/method/cloneFunc.js", "../../node_modules/@keg-hub/jsutils/src/collection/deepClone.js", "../../node_modules/@keg-hub/jsutils/src/method/uuid.js", "../../node_modules/@keg-hub/jsutils/src/ext/typeOf.js", "../../node_modules/@keg-hub/jsutils/src/method/match.js", "../../node_modules/@keg-hub/jsutils/src/ext/isEmpty.js", "../../node_modules/@keg-hub/jsutils/src/array/findExtrema.js", "../../node_modules/@keg-hub/jsutils/src/array/uniqArr.js", "../../node_modules/@keg-hub/jsutils/src/collection/cleanColl.js", "../../node_modules/@keg-hub/jsutils/src/collection/set.js", "../../node_modules/@keg-hub/jsutils/src/collection/deepEqual.js", "../../node_modules/@keg-hub/jsutils/src/ext/strToType.js", "../../node_modules/@keg-hub/jsutils/src/log/log.js", "../../node_modules/@keg-hub/jsutils/src/object/clearObj.js", "../../node_modules/@keg-hub/jsutils/src/object/deepMerge.js", "../../node_modules/@keg-hub/jsutils/src/object/isEntry.js", "../../node_modules/@keg-hub/jsutils/src/object/mapEntries.js", "../../node_modules/@keg-hub/jsutils/src/object/reduceObj.js", "../../node_modules/@keg-hub/jsutils/src/promise/promisify.js", "../../node_modules/@keg-hub/jsutils/src/promise/promisifyAll.js", "../../node_modules/@keg-hub/jsutils/src/regex/isRegex.js", "../../node_modules/@keg-hub/jsutils/src/regex/getRegexSource.js", "../../node_modules/@keg-hub/jsutils/src/url/queryToObj.js", "../../node_modules/@keg-hub/jsutils/src/object/applyToCloneOf.js", "../../node_modules/@keg-hub/jsutils/src/array/areSetEqual.js", "../../node_modules/@keg-hub/jsutils/src/string/buildPath.js", "../../node_modules/@keg-hub/jsutils/src/string/camelCasePath.js", "../../node_modules/@keg-hub/jsutils/src/method/checkCall.js", "../../node_modules/@keg-hub/jsutils/src/array/cloneArr.js", "../../node_modules/@keg-hub/jsutils/src/object/cloneJson.js", "../../node_modules/@keg-hub/jsutils/src/method/complement.js", "../../node_modules/@keg-hub/jsutils/src/string/containsStr.js", "../../node_modules/@keg-hub/jsutils/src/method/debounce.js", "../../node_modules/@keg-hub/jsutils/src/method/doIt.js", "../../node_modules/@keg-hub/jsutils/src/ext/either.js", "../../node_modules/@keg-hub/jsutils/src/array/eitherArr.js", "../../node_modules/@keg-hub/jsutils/src/method/eitherFunc.js", "../../node_modules/@keg-hub/jsutils/src/object/eitherObj.js", "../../node_modules/@keg-hub/jsutils/src/string/eitherStr.js", "../../node_modules/@keg-hub/jsutils/src/object/everyEntry.js", "../../node_modules/@keg-hub/jsutils/src/object/filterObj.js", "../../node_modules/@keg-hub/jsutils/src/array/findMax.js", "../../node_modules/@keg-hub/jsutils/src/array/findMin.js", "../../node_modules/@keg-hub/jsutils/src/array/flatMap.js", "../../node_modules/@keg-hub/jsutils/src/array/flatUnion.js", "../../node_modules/@keg-hub/jsutils/src/url/getURLParam.js", "../../node_modules/@keg-hub/jsutils/src/string/getWordEndingAt.js", "../../node_modules/@keg-hub/jsutils/src/method/hasDomAccess.js", "../../node_modules/@keg-hub/jsutils/src/string/hashString.js", "../../node_modules/@keg-hub/jsutils/src/object/isArrMap.js", "../../node_modules/@keg-hub/jsutils/src/string/isEmail.js", "../../node_modules/@keg-hub/jsutils/src/collection/isEmptyColl.js", "../../node_modules/@keg-hub/jsutils/src/number/isFloat.js", "../../node_modules/@keg-hub/jsutils/src/number/isInt.js", "../../node_modules/@keg-hub/jsutils/src/number/isNegative.js", "../../node_modules/@keg-hub/jsutils/src/string/isPhone.js", "../../node_modules/@keg-hub/jsutils/src/number/isPositive.js", "../../node_modules/@keg-hub/jsutils/src/ext/isSame.js", "../../node_modules/@keg-hub/jsutils/src/string/isUrl.js", "../../node_modules/@keg-hub/jsutils/src/string/isUuid.js", "../../node_modules/@keg-hub/jsutils/src/ext/isValidDate.js", "../../node_modules/@keg-hub/jsutils/src/url/isValidUrl.js", "../../node_modules/@keg-hub/jsutils/src/regex/joinRegex.js", "../../node_modules/@keg-hub/jsutils/src/object/jsonEqual.js", "../../node_modules/@keg-hub/jsutils/src/object/keyMap.js", "../../node_modules/@keg-hub/jsutils/src/method/limbo.js", "../../node_modules/@keg-hub/jsutils/src/collection/mapColl.js", "../../node_modules/@keg-hub/jsutils/src/collection/mapFind.js", "../../node_modules/@keg-hub/jsutils/src/object/mapKeys.js", "../../node_modules/@keg-hub/jsutils/src/object/mapObj.js", "../../node_modules/@keg-hub/jsutils/src/method/memorize.js", "../../node_modules/@keg-hub/jsutils/src/number/mod.js", "../../node_modules/@keg-hub/jsutils/src/number/nth.js", "../../node_modules/@keg-hub/jsutils/src/url/objToQuery.js", "../../node_modules/@keg-hub/jsutils/src/object/omitKeys.js", "../../node_modules/@keg-hub/jsutils/src/array/omitRange.js", "../../node_modules/@keg-hub/jsutils/src/method/parseErrorMessage.js", "../../node_modules/@keg-hub/jsutils/src/string/parseJSON.js", "../../node_modules/@keg-hub/jsutils/src/object/pickKeys.js", "../../node_modules/@keg-hub/jsutils/src/string/plural.js", "../../node_modules/@keg-hub/jsutils/src/array/randomArr.js", "../../node_modules/@keg-hub/jsutils/src/array/randomizeArr.js", "../../node_modules/@keg-hub/jsutils/src/collection/reduceColl.js", "../../node_modules/@keg-hub/jsutils/src/collection/repeat.js", "../../node_modules/@keg-hub/jsutils/src/method/runSeq.js", "../../node_modules/@keg-hub/jsutils/src/object/sanitizeCopy.js", "../../node_modules/@keg-hub/jsutils/src/collection/shallowEqual.js", "../../node_modules/@keg-hub/jsutils/src/string/singular.js", "../../node_modules/@keg-hub/jsutils/src/string/snakeCase.js", "../../node_modules/@keg-hub/jsutils/src/object/someEntry.js", "../../node_modules/@keg-hub/jsutils/src/string/spaceJoin.js", "../../node_modules/@keg-hub/jsutils/src/object/splitByKeys.js", "../../node_modules/@keg-hub/jsutils/src/string/styleCase.js", "../../node_modules/@keg-hub/jsutils/src/method/throttle.js", "../../node_modules/@keg-hub/jsutils/src/method/throttleLast.js", "../../node_modules/@keg-hub/jsutils/src/method/timedRun.js", "../../node_modules/@keg-hub/jsutils/src/number/toFloat.js", "../../node_modules/@keg-hub/jsutils/src/number/toInt.js", "../../node_modules/@keg-hub/jsutils/src/object/toObj.js", "../../node_modules/@keg-hub/jsutils/src/string/trainCase.js", "../../node_modules/@keg-hub/jsutils/src/object/trimStringFields.js", "../../node_modules/@keg-hub/jsutils/src/collection/unset.js", "../../node_modules/@keg-hub/jsutils/src/string/validFilename.js", "../../node_modules/@keg-hub/jsutils/src/promise/wait.js", "../../node_modules/@keg-hub/jsutils/src/string/wordCaps.js", "../../src/index.js", "../../src/constants.js", "../../src/matcher/tokens.ts", "../../src/matcher/regex.js", "../../src/utils/helpers.js", "../../src/matcher/paramTypes.js", "../../src/matcher/patterns.ts", "../../src/utils/errors.js", "../../src/matcher/matcher.ts", "../../src/utils/globalScope.js", "../../src/matcher/expression.js", "../../src/steps.js", "../../src/hooks.js", "../../src/parse/parseStep.js", "../../src/parse/parseFeature.js", "../../src/utils/worldReplace.js", "../../src/parse/parseDefinition.js", "../../src/utils/testMethods.js", "../../src/runner.js", "../../src/assemble/feature.js", "../../src/assemble/assemble.js", "../../src/parkin.js"],
  "sourcesContent": ["/** @module validation */\n\nconst OPTIONS = {\n  SHOULD_LOG: true,\n  SHOULD_THROW: false,\n  LOG_PREFIX: null\n}\n\n// if no default or custom validator set for an arg, just assert it is valid\nconst defaultValidator = () => true\n\n/** \n *  Validates each key-value entry in argObj using the validator functions in validators with matching keys. \n *  For any failures, validate will console.error the reason.\n *  @param { Object } argObj - object, where keys are the name of the argument to validate, and value is its value\n *  @param { Object } validators - object, where keys match the argument and values are predicate functions (return true/false and are passed the arg with the same key). \n *     - Use the `$default` key to define a default validator, which will validate any argument that doesn't have a custom validator defined.\n *  @param { Object } options - contains `logs`, `throws`, and `prefix` props. When a validation fails, it will throw an error if `throws` is true. Else it logs error if `logs` is true. `prefix` prepends a string to the error messages.\n *  @returns { Array } - an entry with two values [ success, results ]. \n *     - success: { Boolean } that is true if all arguments passed their validators, false otherwise\n *     - results: { Object } that holds the validation results for each argument, keyed by the same keys as in argObj. For each\n *                result object, the properties are: { success, key, value, validator, reason }.\n *  @function\n *  @example \n *    const elements = {}\n *    const name = 'michael'\n *    const address = '12345 E. Street'\n *    const [ isValid, results ] = validate(\n *      { elements, name, address },\n *      { elements: isArr, $default: isStr }\n *    )\n *    console.log(isValid) // false\n *    console.log(results.elements.success) // false\n */\nexport const validate = (argObj, validators={}, options={}) => {\n  const { \n    logs=OPTIONS.SHOULD_LOG, \n    throws=OPTIONS.SHOULD_THROW, \n    prefix=OPTIONS.LOG_PREFIX,\n  } = options\n\n  const validationCaseEntries = Object.entries(argObj)\n\n  // validate each argument\n  const validationResults = validationCaseEntries.map(\n    ([argName, argValue]) => validateArgument(\n      argName,\n      argValue,\n      validators[argName] || validators.$default || defaultValidator\n    )\n  )\n\n  // reduce the argument validation results into a single object of form { success, cases }.\n  // success is true if all arguments passed their validators. Cases holds each argument's validation results.\n  const reduceCases = (total, next) => validationReducer(total, next, { logs, throws, prefix })\n  const { success, cases } = validationResults.reduce(reduceCases, { success: true, cases: {} })\n\n  return [ success, cases ]\n}\n\n/**\n * If you need to configure validation properties globally, you can do so here. These are overridden by the validate options arguments,\n * if one is defined in validate().\n * @function\n * @param {Object} options \n * @param {Boolean} options.logs - indicates you want validate() to log errors when a case fails\n * @param {Boolean} options.throws - indicates validate() should throw an error when a case fails\n * @param {String} options.prefix - a prefix to any console error logs or to messages of errors thrown\n */\nvalidate.setOptions = ({ logs, throws, prefix }) => {\n  if (logs !== undefined) {\n    OPTIONS.SHOULD_LOG = logs\n  }\n  if (throws !== undefined) {\n    OPTIONS.SHOULD_THROW = throws\n  }\n  if (prefix !== undefined) {\n    OPTIONS.LOG_PREFIX = prefix\n  }\n}\n\n/**\n * Resets the global validation options to their defaults\n * @function\n */\nvalidate.resetOptions = () => {\n  OPTIONS.SHOULD_LOG = true\n  OPTIONS.SHOULD_THROW = false\n  OPTIONS.LOG_PREFIX = null\n}\n\n/**\n * Helper for `validate`. Validates a single value given a validator\n * @param {*} key \n * @param {*} value \n * @param {Function} validator \n * @returns {Object} of form { success, reason }\n * @ignore\n */\nconst validateArgument = (key, value, validator) => {\n  const success = validator(value)\n\n  // if validator is a named function, use its name. If it is an inline anonymous arrow function, its name\n  // matches the argument key and it has no useful/descriptive name, so just stringify it\n  const shouldStringifyValidator = !validator.name || (validator.name === key) || (validator.name === '$default')\n  const validatorString = shouldStringifyValidator ? validator.toString() : validator.name\n\n  const reason = success\n    ? null\n    : [\n      `Argument \"${key}\" with value `, \n      value, \n      ` failed validator: ${validatorString}.`\n    ] \n   \n  return { success, key, value, validator, reason }\n}\n\n/**\n * Helper for `validate`. Reduces validations into a single object of form { success, cases }\n * @param {*} finalResult\n * @param {*} nextValidation\n * @ignore\n */\nconst validationReducer = (finalResult, nextValidation, { logs, throws, prefix }) => {\n  // handle the failure\n  !nextValidation.success && handleFailure(nextValidation, logs, throws, prefix)\n\n  return {\n    success: finalResult.success && nextValidation.success,\n    cases: {\n      ...finalResult.cases,\n      [nextValidation.key]: nextValidation\n    }\n  }\n}\n\n/**\n * Handles a validation failure given validation options\n * @param {Object} validation \n * @param {Boolean} shouldLog \n * @param {Boolean} shouldThrow \n * @param {String} prefix - optional prefix to any error or console log \n * @ignore\n */\nconst handleFailure = (validation, shouldLog, shouldThrow, prefix) => {\n  // prepend the prefix if one is defined\n  const reason = prefix\n    ? [ prefix, ...validation.reason ]\n    : validation.reason\n\n  if (shouldThrow)\n    throw new Error(reason.join())\n  \n  if (shouldLog)\n    console.error(...reason)\n}\n", "/** @module array */\n\n/**\n * Checks if passed in value is an array.\n * @function\n * @example\n * isArr([1,2,3])\n * // Returns true\n * @param {any} value - value to be check if is an array\n * @return {boolean} - T/F value is an array\n */\nexport const isArr = value => (\n  Array.isArray(value)\n)", "/** @module array */\n\nimport { validate } from '../validation'\nimport { isArr } from './isArr'\n\n/**\n * Builds a map of elements mapped to their frequency counts\n * @param {Array<*>} arr \n * @return {Map<*, number>}\n */\nexport const buildElementCountMap = arr => {\n  const counts = new Map()\n  for (let i = 0; i < arr.length; i++) {\n    const element = arr[i]\n    const count = counts.get(element) ?? 0\n    counts.set(element, count + 1)\n  }\n  return counts\n}\n\n/**\n * Returns true if the maps \n * @param {Map<*, number>} mapA \n * @param {Map<*, number>} mapB \n */\nexport const areCountMapsEqual = (mapA, mapB) => {\n  if (mapA.size !== mapB.size) return false\n\n  for (let [ key, count ] of mapA) {\n    const otherCount = mapB.get(key)\n    if (otherCount !== count) return false\n  }\n\n  return true\n}\n\n/**\n * Checks if arrays are frequency equal. Does this \n * by making only one pass over each array and using an\n * auxilliary map.\n * @function\n * @param {Array<*>} arr \n * @param {Array<*>} otherArr \n * @returns {boolean} true if otherArr contains exactly the same elements as arr, \n * where order does not matter, but frequency does\n */\nexport const areFrequencyEqual = (arr, otherArr) => {\n  const [ valid ] = validate({ arr, otherArr }, { $default: isArr })\n  if (!valid) return null\n\n  if (arr === otherArr) return true\n  if (arr.length !== otherArr.length) return false\n\n  const arrCounts = buildElementCountMap(arr)\n  const otherCounts = buildElementCountMap(otherArr)\n\n  return areCountMapsEqual(arrCounts, otherCounts)\n}\n", "/** @module object */\n\n/**\n * Checks if data is an object and not an array.\n * @function\n * @param {Object} obj - data to check\n * @returns {boolean}\n */\nexport const isObj = obj => typeof obj === 'object' && !Array.isArray(obj) && obj !== null\n", "/** @module array */\n\nimport { isArr } from './isArr'\n\n/**\n * Ensures the passed in value is an array, else it returns it in an array\n * @function\n * @param {Array|*} val - Value to check if its an array\n *\n * @example\n * const foo = eitherArr('hi') // returns ['hi']\n * const bar = eitherArr([ 2 ]) // returns [ 2 ]\n *\n * @returns {Array} val if it's an array, or val in an array\n */\nexport const ensureArr = val => isArr(val) ? val : [val]", "/** @module functions */\n\n/**\n * Check if the passed in item is a function.\n * @example\n * isFunc(() => {})\n * // Returns true\n * @example\n * isFunc('bar')\n * // Returns false\n * @function\n * @param {*} test\n * @return {boolean} is a function\n */\nexport const isFunc = func => typeof func === 'function'\n", "/** @module object */\n\nimport { isFunc } from '../method/isFunc'\n\n/**\n * Recursively freezes and object.\n * @function\n * @param {Object} obj\n * @return {Object} - frozen Object\n */\nexport const deepFreeze = obj => {\n  Object.freeze(obj)\n  Object\n    .getOwnPropertyNames(obj)\n    .map(prop => {\n      obj.hasOwnProperty(prop)\n        && obj[prop] !== null\n        && (typeof obj[prop] === 'object' || isFunc(obj[prop]))\n        && !Object.isFrozen(obj[prop])\n        && deepFreeze(obj[prop])\n    })\n\n  return obj\n}\n", "/** @module functions */\n\nimport { deepFreeze } from '../object/deepFreeze'\n\n/**\n * Reusable empty function that is a no-op\n * @function\n * @returns {void}\n */\nexport const noOp = () => {}\n\n/**\n * Reuseable empty, frozen object\n * @type {Object}\n */\nexport const noOpObj = Object.freeze({})\n\n/**\n * Resuable frozen object that contains a `content` object. Useful\n * for themes that rely on the content key.\n * @type {Object}\n */\nexport const noPropObj = deepFreeze({ content: {} })\n\n/**\n * Reusable, empty frozen array\n * @type {Array}\n */\nexport const noPropArr = deepFreeze([])", "/** @module Helpers */\n\n/**\n * Checks if a value exists. NOT undefined || null\n * @function\n * @example\n * exists(0)\n * // Returns true\n * @example\n * exists(null)\n * // Returns false\n * exists('')\n * // Returns true\n * exists(NaN)\n * // Returns false\n * @param {*} value - Item to check if exists\n *\n * @returns {boolean} - If the item exists or not\n */\nexport const exists = value => value === value && value !== undefined && value !== null\n", "import { isArr } from './isArr'\nimport { isObj } from '../object/isObj'\nimport { noOpObj } from '../method/noOp'\nimport { exists } from '../ext/exists'\n\n/**\n * Helper method to flatten and mutate the passed in array based on options\n * @function\n * @private\n * @param {Array|*} arr - Array to be flattened\n * @param {Array} result - Flattened array values \n * @param {Array} opts - Options to modify how the array is flattened\n *\n * @return {Array} - Mutated arr or result, but flattened based on options\n */\nconst flatten = (arr, result, opts) => {\n  for (let i = 0; i < arr.length; i++) {\n    const value = arr[i]\n\n    isArr(value)\n      ? flatten(value, result, opts)\n      : ((opts.exists && !exists(value)) || (opts.truthy && !value))\n        ? result\n        : result.push(value)\n  }\n\n  if(!opts.mutate) return result\n\n  Object.assign(arr, result).splice(result.length)\n\n  return arr\n}\n\n/**\n * Flattens an array to a single level\n * @function\n * @param {Array|*} arr - Array to be flattened\n * @param {Array} opts - Options to modify how the array is flattened\n * @param {Array} opts.truthy - Only include truthy values when flattening\n * @param {Array} opts.exists - Only include values that exist when flattening\n * @param {Array} opts.mutate - Mutates the original array\n *\n * @example\n * const arr = flatArr([[ 'flat', '' ], [ 'array' ]]) // returns ['flat', '', 'array']\n * const arrTruthy = flatArr([ 0, 2, [ false ] ], { truthy: true }) // returns [ 2 ]\n * const arrExist = flatArr([ 0, 2, [ false ] ], { exists: true }) // returns [ 0, 2, false ]\n * const mutateArr = [ [1], [2] ]\n * flatArr(mutateArr, { mutate: true }) === mutateArr\n * // Evaluates to true, but mutateArr value is [ 1, 2 ]\n *\n * @return {Array} - Mutated original array now flattened, or a new flattened array based on options\n */\nexport const flatArr = (arr, opts) => flatten(arr, [], isObj(opts) ? opts : noOpObj)\n", "/** @module functions */\n\nimport { isArr } from '../array/isArr'\nimport { isFunc } from './isFunc'\n\n/**\n * Helper for pipeline. Passes 'item' into 'expression' as its first argument.\n * <br> Expression may be a function or an array of form: [function, ...remainingArguments].\n * @function\n * @param {*} item \n * @param {*} expression \n */\nexport const applyToFunc = (item, expression) => {\n  if (isArr(expression)) {\n    const [func, ...args] = expression\n    return func(item, ...args)\n  }\n  else if (isFunc(expression)) {\n    return expression(item) \n  }\n  else {\n    console.error(`Pipeline expected either a function or an array (for function expressions). Found ${typeof expression}`)\n    return item\n  }\n}\n", "/** @module functions */\n\nimport { applyToFunc } from './applyToFunc'\n\n/**\n * Function for making repeated nested function calls (the 'pipeline') succinct. Passes \"item\" into\n * <br> the first function (as its first argument), takes its result and passes that into the next function, and repeats.\n * <br> Continues until no functions remain, at which point it returns the value returned by the last function.\n * <br>  - you can also pass in an array in place of a function to specify a function to be called with some arguments. E.g.: [foo, 2, 3] would return foo(item, 2, 3)\n * @example: pipeline(1, addFour, subtract3, (x) => x * x) // would return 4\n * @function\n * @param {* | Function} item - the starting input. If it is a function, it will be executed immediately and the result will be piped into the remaining functions.\n * @param {...Function} functions \n * @returns the final result of calling the pipeline of functions , starting with item as input\n */\nexport const pipeline = (item, ...functions) => {\n  return functions.reduce(\n    (result, fn) => applyToFunc(result, fn),\n    item\n  )\n}\n", "/** @module string */\n\n/**\n * Check if passed in value is a string.\n * @function\n * @param { all } str - param to check if type is a string \n * @return {boolean} - if it's a string\n */\nexport const isStr = str => typeof str === 'string'\n", "/** @module string */\n\nimport { isFunc } from '../method/isFunc'\nimport { isStr } from './isStr'\n\n/**\n * Maps a string by applying function `charMapper` to each character.\n * @function\n * @param {string} str to be mapped\n * @param {Function} charMapper - function of form (character) => <some character or string>\n * @returns a new string, with each character mapped by charMap. If str is not a string or charMapper not a function, just returns str\n * @example\n *  mapString(\"hello\", c => c === 'h' ? 'x' : c) // returns 'xello'\n */\nexport const mapString = (str, charMapper) => {\n  if (!isStr(str)) return str\n  if (!isFunc(charMapper)) return str\n  let result = \"\"\n  for (const char of str) {\n    result += charMapper(char)\n  }\n  return result\n}", "/** @module string */\n\n/**\n * @function\n * @returns true if str is upper case\n * @param {String} str \n */\nexport const isLowerCase = str => (str === str.toLowerCase())\n\n", "/** @module string */\n\n/**\n * @function\n * @returns true if str is upper case\n * @param {String} str \n */\nexport const isUpperCase = str => (str === str.toUpperCase())\n", "/** @module string */\n\nimport { isStr } from './isStr'\nimport { mapString } from './mapString'\nimport { isLowerCase } from './isLowerCase'\nimport { isUpperCase } from './isUpperCase'\n\n/**\n * @function\n * @returns a new string with the specified delimiter delimiting each word\n * @param {String} str - string of any casing\n * @param {String} delimiter - e.g. '_'\n * @param {Array} delimiters - optional. An array of delimiter characters on which this function searches and breaks. Defaults to checking -, _, and space\n * @example delimitString('fooBar', '_') // 'foo_Bar'\n */\nexport const delimitString = (str, delimiter, delimiters=['-', '_', ' ']) => {\n  if (!isStr(str)) return str\n  const isDelimiter = c => delimiters.some(del => del === c)\n  let prevChar = '_'\n  return mapString(str, char => {\n    if (isDelimiter(char)) {\n      prevChar = delimiter \n      return delimiter \n    }\n\n    if (isUpperCase(char) && isLowerCase(prevChar) && !isDelimiter(prevChar)) {\n      prevChar = char\n      return delimiter + char\n    }\n\n    prevChar = char\n    return char\n  })\n}\n", "/** @module string */\n\nimport { isStr } from './isStr'\n\n/**\n * Converts first letter of a string to be capitalized.\n * @function\n * @param {string} string\n * @param {boolean} lowercaseTail - if true, will also lowercase the all characters except the first\n * @return {string} - Passed in string, but capitalized\n */\nexport const capitalize = (str, lowercaseTail=true) => {\n  if (!isStr(str) || !str[0]) return str\n  const tail = lowercaseTail\n    ? str.slice(1).toLowerCase()\n    : str.slice(1)\n  return `${str[0].toUpperCase()}${tail}`\n}\n", "/** @module string */\n\n/**\n * Removes a `.` from the start and end of a string.\n * @function\n * @param {string} str - string to convert\n * @return {string} - string without the `.`\n */\nexport const removeDot = string => {\n  const noDot = string.indexOf('.') === 0 ? string.slice(1) : string\n  return noDot.indexOf('.') === noDot.length - 1 ? noDot.slice(0, -1) : noDot\n}\n", "/** @module string */\n\nimport { removeDot } from './removeDot'\n\n\n/**\n * Converts `-` and `_` to white space and calls remove removeDot, to remove a period.\n * @function\n * @param {string} string to be converted\n * @return {string} - cleaned string\n */\nexport const cleanStr = str => {\n  return str && removeDot(str)\n    .replace(/[-_]/gm, ' ') || str\n}\n", "/** @module string */\n\nimport { capitalize } from './capitalize'\nimport { cleanStr } from './cleanStr'\n\n/**\n * Converts a string to camel case.\n * @function\n * @param {string} string to be converted\n * @return {string} - string in camel case format\n */\nexport const camelCase = (str, compCase) => {\n  return (\n    (str &&\n      cleanStr(str)\n        .split(/[\\s_-]/gm)\n        .reduce((cased, word, index) => {\n          if(!word) return cased\n          cased += ((index > 0 || compCase) && capitalize(word)) || word.toLowerCase()\n          return cased\n        }, '')\n      ) || str\n  )\n}\n", "/** @module string */\n\nimport { isStr } from './isStr'\n\n/**\n * Converts a passed in value to a string.\n * @function\n * @param {*} val - value to be converted\n * @return {string} - value converted into a string\n */\nexport const toStr = val => (\n  val === null || val === undefined\n    ? ''\n    : isStr(val)\n      ? val\n      : JSON.stringify(val)\n)\n", "/** @module string */\n\nconst uppercasePattern = /[A-Z]/g\nconst msPattern = /^ms-/\n\n/**\n * Hyphenator cache, that stores already hyphenated text to be reused\n * @private\n * @Object\n */\nconst hyphenCache = {}\n\n/**\n * Converts a matching style rule to lowercase with hyphen\n * External hyphenator helpers, created outside the method to improve performance\n * @function\n * @private\n * @param {string} str - camelCase style rule rule\n * \n * @returns {string} - Lowercase style rule with hyphen at the start\n */\nconst toHyphenLower = match => ('-' + match.toLowerCase())\n\n/**\n * Converts a camelCase style rule into a hyphenated style rule\n * <br/>Caches the response to make future conversions faster\n * @function\n * @param {string} str - camelCase style rule rule\n *\n * @returns {string} - Hyphenated style rule\n */\nexport const hyphenator = rule => {\n  if (hyphenCache.hasOwnProperty(rule)) return hyphenCache[rule]\n\n  const hRule = rule.replace(uppercasePattern, toHyphenLower)\n  return (hyphenCache[rule] = msPattern.test(hRule) ? '-' + hRule : hRule)\n}", "/** @module number */\n\n/**\n * Checks if a value is NaN.\n * @example\n * equalsNaN(NaN)\n * // Returns true\n * @example\n * equalsNaN(1)\n * // Returns false\n * @example\n * equalsNaN('')\n * // Returns false\n * @function\n * @param {number} val - value to check if is NaN\n * @return {boolean} T/F - if value is a number\n */\nexport const equalsNaN = val => (\n  typeof val === 'number' && val != val\n)\n", "/** @module number */\n\nimport { equalsNaN } from './equalsNaN'\n\n/**\n * Checks is value is a number.\n * @example\n * isInt(1)\n * // Returns true\n * @example\n * isInt(NaN)\n * // Returns false\n * @example\n * isInt('1')\n * // Returns false ( because it's a string )\n * @function\n * @param {number} val - value to check if is a number\n * @return {boolean} T/F - if value is a number\n */\nexport const isNum = val => (\n  typeof val === 'number' && !equalsNaN(val)\n)\n", "/** @module number */\n\nimport { isNum } from './isNum'\n\n/**\n * Checks if val is a non-negative number\n * @param {*} val \n * @example\n *  isNonNegative(0) // true\n *  isNonNegative(1) // true\n *  isNonNegative(-1) // false\n * @function\n * @returns T/F - if value is non negative number\n */\nexport const isNonNegative = val => isNum(val) && (val >= 0)\n", "/** @module string */\n\nimport { isStr } from './isStr'\n\n/**\n * Sanitize a string of HTML content.\n * @function\n * @param {string} string\n * @return {string} - cleaned string\n */\nexport const sanitize = str => (\n  isStr(str) && str\n    .replace(/&/g,'&amp;')\n    .replace(/</g,'&lt;')\n    .replace(/>/g,'&gt;') || str\n)\n", "/** @module collection */\n\n/**\n * Checks if the value is a collection ( object || array ).\n * @example\n * isColl([1,2,3])\n * // Returns true\n * @example\n * isColl({ foo: 'bar' })\n * // Returns true\n * @example\n * isColl(null)\n * // Returns false\n * @function\n * @param {*} val - value to check\n * @return {boolean} T/F if the value is a collection\n */\nexport const isColl = val => (\n  typeof val === 'object' && val !== null\n)\n", "/** @module collection */\n\nimport { isFunc } from '../method/isFunc'\nimport { isArr } from '../array/isArr'\nimport { isColl } from './isColl'\n\n/**\n * Updates a collection by removing, getting, adding to it.\n * @memberof collection\n * @param {Object} obj - object to update\n * @param {string|array} path - path to the property to update\n * @param {*} type - value to update || type\n * @return {*} based on update method\n */\nexport const updateColl = (obj, path, type, val) => {\n  const org = obj\n  if (!isColl(obj) || !obj || !path)\n    return type !== 'set' && val || undefined\n  \n  // cloneDeep so we don't modify the reference\n  const parts = isArr(path) ? Array.from(path) : path.split('.')\n  const key = parts.pop()\n  let prop\n  let breakPath\n\n  while (prop = parts.shift()) {\n    const next = obj[prop]\n\n    isColl(next) || isFunc(next)\n      ? ( obj = next )\n      : (() => {\n          if(type === 'set') obj[prop] = {}\n          else breakPath = true\n          obj = obj[prop]\n        })()\n\n    if (breakPath) return val\n  }\n\n  return type === 'get'\n    // Get return the value\n    ? key in obj\n      ? obj[key]\n      : val\n    : type === 'unset'\n      // Unset, return if the key was removed\n      ? ( delete obj[key] )\n      // Set, updated object\n      : ( obj[key] = val ) && org || org\n}\n", "/** @module collection */\n\nimport { updateColl } from './updateColl'\n\n/**\n * Searches an object based on the path param\n * <br> I.E. path = 'data.foo.bar' => will return obj.data.foo.bar.\n * <br> If bar does not exist, then will return obj.data.foo\n * @example\n * get(obj, 'data.foo.bar')\n * // Returns the value of bar\n * @example\n * get(obj, ['data', 'foo', 'bar'])\n * // Returns the value of bar\n * @function\n * @param {Object} obj - will search the object based on the path\n * @param {string|array} path - . separated string to search the object\n * @return the final value found from the path\n */\nexport const get = (obj, path, fallback) => (\n  updateColl(obj, path, 'get', fallback)\n)\n", "/** @module string */\n\nimport { isFunc } from '../method/isFunc'\nimport { isColl } from '../collection/isColl'\nimport { get } from '../collection/get'\nimport { isStr } from './isStr'\n/**\n * Simple template replace for ES6 template strings\n * @function\n * @example\n * template('${ who } in ${ where }!', { who: 'goats', where: 'boats' })\n * // Returns \"goats in boats\"\n * @param {string} template - String with ES6 syntax items to be replaced\n * @param {Object|Array} data - Data used to replace the ES6 placeholders\n * @param {any} fallback - Used it data does not contain key to be replaced\n *\n * @returns {string} - template with placeholder values filled\n */\nexport const template = (tempStr, data, fallback='') => {\n  data = isColl(data) && data || {}\n  const regex = template.regex || /\\${(.*?)\\}/g\n\n  return isStr(tempStr)\n    ? tempStr.replace(regex, (match, exact) => {\n      const path = (exact || match.substr(2, match.length - 3)).trim()\n      const replaceWith = get(data, path, fallback)\n      return isFunc(replaceWith)\n        ? replaceWith(data, path, fallback)\n        : replaceWith\n\n    })\n    : console.error(`template requires a string as the first argument`) || tempStr\n}", "/** @module string */\nimport { isStr } from './isStr'\n\nconst quoteSymbols = [\n  '\\\"',\n  '\\'',\n]\n\n/**\n * Checks if the string contains quoted text\n * @function\n * @param {string} str - string to check\n * @param {Array<string>?} quotes - optional array of valid quote strings to check with. Defaults to single and double quote characters.\n * @return {boolean} true if `str` is a quoted string\n * @example\n * isQuoted('foo') // false\n * @example\n * isQuoted('\"foo\"') // true\n */\nexport const isQuoted = (str, quotes=quoteSymbols) => {\n  return isStr(str) && \n    quotes.some(\n      quote => str.startsWith(quote) && str.endsWith(quote)\n    )\n}", "/** @module string */\nimport { isStr } from './isStr'\n\n/**\n * Reverses string\n * @function\n * @param {string} str - string to reverse\n * @return {string} reversed str\n * @example\n * reverseStr('foo') // 'oof'\n */\nexport const reverseStr = str => {\n  if (!isStr(str)) return undefined\n  let reversed = ''\n  for (let char of str) {\n    reversed = char + reversed\n  }\n  return reversed\n}\n\n", "/** @module string */\n\n/**\n * Helper for `getWordStartingAt` that finds the \n * index of the exclusive end of the word, given the available\n * ending delimiters\n * @param {string} text \n * @param {number} index \n * @param {Array<string>} delimiters\n */\nexport const getNearestDelimiterIndex = (text, index, delimiters) => {\n  const indices = delimiters.map(str => text.indexOf(str, index)).sort()\n  return indices.find(idx => idx >= 0)\n}\n\n/**\n * Gets the word in text starting at index\n * @function\n * @param {string} text \n * @param {number} index - the inclusive starting index of the word to get \n * @param {Array<string>?} delimiters - optional array of strings that delimit words. Defaults to the space character.\n * @example\n * const text = 'foo bar bin'\n * const word = getWordStartingAt(text, 4)\n * word === 'bar' \n */\nexport const getWordStartingAt = (text, index, delimiters=[' ']) => {\n  const endingSpaceIdx = getNearestDelimiterIndex(text, index, delimiters)\n  return text.substring(\n    index,\n    endingSpaceIdx === -1 \n      ? text.length\n      : endingSpaceIdx\n  )\n}", "/** @module boolean */\n\n/**\n * Checks is value is a boolean.\n * @function\n * @example\n * isBool([1,2,3])\n * // Returns false\n * @example\n * isBool(true)\n * // Returns true\n * @param {*} val - value to check if is a number\n * @return {boolean} T/F - if value is a boolean\n */\nexport const isBool = val => (\n  typeof val === 'boolean'\n)\n", "/** @module boolean */\n\n/**\n * Checks is value is a boolean as a string.\n * @function\n * @example\n * isStrBool(\"true\")\n * // Returns true\n * @example\n * isStrBool(true)\n * // Returns false\n * @param {*} val - value to check if boolean as a string\n * @return {boolean} T/F - if value is a boolean\n */\nexport const isStrBool = val => (\n  val === 'false' || val === 'true'\n)\n\n", "/** @module boolean */\n\nimport { toStr } from '../string/toStr'\nimport { isBool } from './isBool'\n\n/**\n * Converts a value to a boolean as a string.\n * @function\n * @example\n * convertToStrBool(true)\n * // Returns 'true'\n * @param {*} val - value to convert\n * @return {string} 'true' || 'false' based on passed in value\n */\nexport const convertToStrBool = val => (\n  isBool(val)\n    ? toStr(val)\n    : !val || val === 'false' || val === '0'\n      ? 'false'\n      : 'true'\n)\n", "/** @module boolean */\n\n/**\n * Checks if a value is falsy, excluding empty string and 0.\n * @function\n * @example\n * softFalsy('')\n * // Returns true\n * @example\n * softFalsy(0)\n * // Returns true\n * @example\n * softFalsy(null)\n * // Returns false\n * @param {*} val - value to check\n * @return {boolean} T/F based on passed in value\n */\nexport const softFalsy = val => (\n  Boolean(val || val === '' || val === 0)\n)\n", "/** @module boolean */\n\nimport { isStrBool } from './isStrBool'\nimport { convertToStrBool } from './convertToStrBool'\n\n/**\n * Converts a value to a boolean.\n * @function\n * @example\n * toBool(null)\n * // Returns false\n * @example\n * toBool('false')\n * // Returns false\n * @example\n * toBool('true')\n * // Returns true\n * @param {*} val - value to convert\n * @return {boolean} true or false based on passed in value.\n */\nexport const toBool = val => (\n  isStrBool(val)\n    ? val === 'true'\n    : convertToStrBool(val) === 'true'\n)", "/** @module number */\n\nimport { toStr } from '../string/toStr'\n\n/**\n * Gets numbers and floats (.) from a string.\n * @example\n * getNums('$1.23')\n * // Returns '1.23'\n * @function\n * @param {*} val - value to pull numbers from\n * @return {string} Numbers found in value\n */\nexport const getNums = val => (\n  toStr(val).replace(/([^.\\d])/gm,'')\n)\n", "/** @module number */\n\nimport { equalsNaN } from './equalsNaN'\nimport { getNums } from './getNums'\nimport { isNum } from './isNum'\n\n/**\n * Converts passed in value to a number.\n * @example\n * toNum(\"23\")\n * // Returns 23\n * @example\n * toNum(NaN)\n * // Returns 0\n * @function\n * @param {*} val - value to convert\n * @return {number} value converted to a float\n */\nexport const toNum = val => (\n  isNum(val)\n    ? val\n    : val &&\n      !equalsNaN(val) && \n      Number(getNums(val)) ||\n      0\n)\n", "/** @module functions */\n\nimport { isStr } from '../string'\nimport { isBool } from '../boolean'\nimport { isNum } from '../number'\n\n/**\n * Checks if param is an orderable primitive\n * @function\n * @param {*} x \n * @returns {bool} - true if x is a comparable primitive\n */\nexport const isOrderable = x => isStr(x) || isNum(x) || isBool(x)", "/** @module method */\n\nimport { isStr } from '../string'\nimport { isOrderable } from './isOrderable'\nimport { validate } from '../validation'\n\n/**\n * @function\n * Generic compare to method that works for strings, numbers, and booleans\n * @param {string | number | boolean} x \n * @param {string | number | boolean} y \n * @return { number | null } - returns a value < 0 if x is less than y, 0 if they are equal, and a value greater than 0 if x is greater than y. Returns null if the args are not comparable.\n */\nexport const compareTo = (x, y) => {\n  const [ valid ] = validate({ x, y }, { $default: isOrderable }) \n  if (!valid) return null\n  return isStr(x)\n    ? (x.localeCompare(y))\n    : (x - y)\n}", "/** @module functions */\n\n/**\n * A function that simply returns its input\n * @function\n * @param {*} x \n * @returns {*} the input\n */\nexport const identity = x => x", "/** @module object */\n\n/**\n * Checks if prop exists on the object.\n * @function\n * @param {Object} obj - data to check\n * @param {string} prop - prop to check for\n * @returns {boolean} T/F if the prop exists\n */\nexport const hasOwn = (obj, prop) => (\n  Object.prototype.hasOwnProperty.call(obj, prop)\n)\n", "/** @module functions */\n\nimport { get } from '../collection/get'\n\n/**\n * Clones a function using the Function constructor and calling toString on the passed in function\n * @example\n * const func = () => { console.log('test') }\n * const clone = cloneFunc(func)\n * // clone !== func\n * @function\n * @param {function} func - function to clone\n *\n * @returns {Object} cloned function\n */\nexport const cloneFunc = func => {\n\n  const funcClone = function(...args){\n    return func instanceof funcClone\n      ? (() => { return new func(...args) })()\n      : get(func.prototype, 'constructor.name')\n        ? new func(...args)\n        : func.apply(func, args)\n  }\n\n  for(let key in func )\n    func.hasOwnProperty(key) && (funcClone[key] = func[key])\n  \n  Object.defineProperty(funcClone, 'name', { value: func.name, configurable: true })\n  funcClone.toString = () => func.toString()\n\n  return funcClone\n}\n", "/** @module collection */\n\nimport { isFunc } from '../method/isFunc'\nimport { cloneFunc } from '../method/cloneFunc'\nimport { isArr } from '../array/isArr'\n\n/**\n * Recursively clones an object or array.\n  * @example\n * const test = { foo: [ { bar: 'baz' } ] }\n * const clone = deepClone(test)\n * console.log(test === clone)) // prints false\n * console.log(test.foo === clone.foo) // prints false\n * @example\n * // Works with array too\n * deepClone([ [ [ 0 ] ] ])\n * // Returns copy of the passed in collection item\n * @function\n * @param {Object} obj - object to clone\n * @return {Object} - cloned Object\n */\nexport const deepClone = (obj, hash = new WeakMap()) => {\n  if (Object(obj) !== obj) return obj\n  if (obj instanceof Set) return new Set(obj)\n  if (hash.has(obj)) return hash.get(obj)\n  if (isArr(obj)) return obj.map(x => deepClone(x))\n  if (isFunc(obj)) return cloneFunc(obj)\n\n  const result = obj instanceof Date \n    ? new Date(obj)\n    : obj instanceof RegExp \n      ? new RegExp(obj.source, obj.flags)\n      : (!obj.constructor)\n        ? Object.create(null)\n        : null\n  \n  // if result is null, object has a constructor and wasn't an instance of Date nor RegExp\n  if (result === null) return cloneObjWithPrototypeAndProperties(obj)\n\n  hash.set(obj, result)\n\n  if (obj instanceof Map)\n    return Array.from(obj, ([key, val]) => result.set(key, deepClone(val, hash)) )\n\n  return Object\n    .assign(\n      result,\n      ...Object.keys(obj)\n        .map(key => ({ [key]: deepClone(obj[key], hash) }))\n    )\n}\n\n/**\n * Helper for deepClone. Deeply clones the object, including its properties, and preserves the prototype and isFrozen and isSealed state\n * @function\n * @ignore\n * @param {Object} objectWithPrototype - any object that has a prototype\n * @returns {Object} the cloned object \n */\nexport const cloneObjWithPrototypeAndProperties = (objectWithPrototype) => {\n\n  if (!objectWithPrototype) return objectWithPrototype\n\n  const prototype = Object.getPrototypeOf(objectWithPrototype)\n  const sourceDescriptors = Object.getOwnPropertyDescriptors(objectWithPrototype)\n\n  for (const [key, descriptor] of Object.entries(sourceDescriptors)) {\n    descriptor.value &&\n      ( sourceDescriptors[key].value = deepClone(descriptor.value) )\n  }\n\n  const clone = Object.create(prototype, sourceDescriptors)\n\n  if (Object.isFrozen(objectWithPrototype)) Object.freeze(clone)\n  if (Object.isSealed(objectWithPrototype)) Object.seal(clone)\n\n  return clone \n}\n", "/** @module functions */\n\n/**\n * Creates a uuid, unique up to around 20 million iterations.\n * @example\n * uuid()\n * // New uuid as a string\n * @function\n * @param {number} start of the uuid\n * @return {string} - build uuid\n */\nexport const uuid = a => a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([ 1e7 ] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g,uuid)\n", "/** @module Helpers */\n\n/**\n * Gets the type of the passed in val.\n * @example\n * typeOf(1)\n * // Returns Number\n * @example\n * typeOf('')\n * // Returns String\n * @function\n * @param {*} val - value to get type for\n * @return {string} type of the value\n */\nexport const typeOf = val => (\n  Object.prototype.toString.call(val).slice(8, -1)\n)\n", "/** @module functions */\n\nimport { isArr } from '../array/isArr'\nimport { typeOf } from '../ext/typeOf'\nimport { isFunc } from './isFunc'\n\n/**\n* Pattern matching function. Iterates through the entries,\n* which have the form [ check value or predicate, return value ], and\n* when it encounters an entry whose check value matches the matchArg\n* (or the predicate returns true when passed the matchArg), it returns\n* the return value of that entry.\n*\n* For the default case: use [ match.default, <your default value> ]\n* @function\n*\n* @param {*} matchArg - the argument to match against the cases\n* @param {Array} entries - the cases\n* @returns the return value of the first entry with a matching check value, else null\n*\n* @example \n* const value = 1\n* match(value,\n*  [ 1, \"hello\" ],\n*  [ x => x > 2, \"greater\" ] \n*  [ match.default, \"defaulted\"]\n* ) \n* => returns \"hello\"\n* \n* @example \n* const value = 3\n* match(value,\n*  [ 1, \"hello\" ],\n*  [ x => x > 2, \"greater\" ] \n* ) \n* => returns \"greater\"\n*\n* @example \n* // react reducer:\n*function todoReducer(state, action) {\n*   const reducer = match(action.type,\n*       [ 'ADD-TODO', addTodo ],\n*       [ 'REMOVE-TODO', removeTodo ],\n*       [ 'UPDATE-TODO', updateTodo ],\n*       [ match.default, state ]\n*   )\n*\n*   return reducer(state, action)\n*}\n*/\nexport const match = (matchArg, ...args) => {\n  if (!args.length) return null\n\n  // check all cases and return a value if a match is found\n  for (let entry of args) {\n    if (!isArr(entry)) {\n      console.error(`Matching case must be an entry (a 2-element array). Found: ${typeOf(entry)}`, entry)\n      break\n    }\n    const [ caseValueOrPredicate, valueOnMatch ] = entry\n    if (isFunc(caseValueOrPredicate) && caseValueOrPredicate(matchArg)) return valueOnMatch\n    if (caseValueOrPredicate === matchArg) return valueOnMatch\n  }\n\n  return null\n}\n\n/**\n * The default case function you can use with match. Just returns true so the case value can be used.\n * @function\n * @example\n * match(foo\n *    [ 100, 'a' ],\n *    [ 200, 'b' ],\n *    [ match.default, 'default value' ]\n * )\n */\nmatch.default = () => true\n\n", "/** @module Helpers */\n\nimport { isObj } from '../object/isObj'\nimport { isArr } from '../array/isArr'\nimport { isStr } from '../string/isStr'\nimport { isNum } from '../number/isNum'\n\n/**\n * Checks if the value is empty.\n * @example\n * isEmpty('')\n * // Returns true\n * @example\n * isEmpty({})\n * // Returns true\n * @example\n * isEmpty([ 1 ])\n * // Returns false\n * @function\n * @param { object | array | number | string } val - value to check\n * @return {boolean} if the value is empty\n */\nexport const isEmpty = val => (\n  isObj(val)\n    ? Object.keys(val).length === 0\n    : isArr(val)\n      ? val.length === 0\n      : isStr(val)\n        ? val.trim().length === 0\n        : isNum(val)\n          ? val < 1\n          : false\n)\n", "/** @module array */\n\nimport { isArr } from './isArr'\nimport { isFunc } from '../method'\nimport { validate } from '../validation'\n\n/**\n * Finds the extremum (e.g. max, min) element within array `arr` as defined by the `comparator` function\n * @function\n * @param {Array<*>} arr \n * @param {Function} comparator - comparison function like the compareFunction in sort: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n * @returns {*} the element in `arr` that is the extremum as defined by `comparator`. If arr is empty, this function returns null.\n * @example\n * const max = findExtrema([ { a: 1 }, { a: 2} ], (x, y) => x.a - y.a)\n * // max === { a: 2 } \n */\nexport const findExtrema = (arr, comparator) => {\n  const [ valid ] = validate({ arr, comparator }, { arr: isArr, $default: isFunc })\n  if (!valid) return null\n\n  return arr.length\n    ? arr.reduce(\n        (extremaSoFar, next) => (comparator(extremaSoFar, next) > 0 ? extremaSoFar : next)\n      )\n    : null\n}\n", "/** @module array */\n\nimport { isArr } from './isArr'\n\n/**\n * Removes duplicates from an array, checking by reference-equality\n * @function\n * @example\n * uniqArr([1,1,2,3,3])\n * // Returns array with only unique values [ 1, 2, 3 ]\n * @param {array} arr - array to remove duplicates from\n * @return {array} copy of passed in array, with duplicates removed\n */\nexport const uniqArrByReference = (arr) => {\n  return !isArr(arr)\n    ? arr\n    : arr.filter((e, i, arr) => arr.indexOf(e) == i\n  )\n}\n\n/**\n * \n * @param {*} arr \n * @param {*} selector \n */\n/**\n * Removes duplicates from an array.\n * @function\n * @example\n * uniqArr([1,1,2,3,3])\n * // Returns array with only unique values [ 1, 2, 3 ]\n * @example\n * uniqArr([ {a: 1} , { a: 1 }], element => element.a)\n * // Returns array [ { a: 1 } ]\n * @param {array} arr - array to remove duplicates from\n * @param {Function?} selector - optional function to specify the property uniqArr should use to check if another element exists\n * @return {array} copy of passed in array, with duplicates removed\n */\nexport const uniqArr = (arr, selector) => {\n  if (!selector) return uniqArrByReference(arr)\n\n  // loop over each element in one pass, \n  // only including in the unique array elements\n  // we haven't encountered before \n  // by checking with `selector` and the set\n  const { unique } = arr.reduce(\n    (data, element) => {\n      const id = selector(element)\n      !data.set.has(id) && data.unique.push(element)\n      data.set.add(id)\n      return data\n    },\n    { \n      unique: [], \n      set: new Set()\n    }\n  )\n\n  return unique\n}", "/** @module collection */\n\nimport { isObj } from '../object/isObj'\nimport { isColl } from './isColl'\n\n/**\n * Cleans a collection by creating a new collection\n * With the null and undefined values removed\n * @function\n * @param {Object|Array} coll - Collection to remove empty values from\n * @param {boolean} [recursive=true] - Should recursively clean child values\n *\n * @returns {Object|Array} - Cleaned collection\n */\nexport const cleanColl = (coll, recursive=true) => {\n  return isColl(coll)\n    ? Object.keys(coll)\n      .reduce((cleaned, key) => {\n        const value = coll[key]\n        if(value === null || value === undefined) return cleaned\n\n        cleaned[key] = recursive && isColl(value)\n          ? cleanColl(value)\n          : value\n\n        return cleaned\n      }, isObj(coll) && {} || [])\n    : console.error(`cleanColl requires a collection as the first argument`) || coll\n}", "/** @module collection */\n\nimport { updateColl } from './updateColl'\n\n/**\n * Adds a path to an object.\n * <br> If the path already exists, but not in the correct format it will be replaced.\n * <br> The path is built from a `.` separated string.\n * <br> I.E. path = 'data.foo.bar' => obj.data.foo.bar will be created on the object.\n * @example\n * set(obj, [ 'foo', 'bar' ], 'baz')\n * // Returns the passed in obj, with the value of bar set to baz\n * @example\n * set(obj, 'foo.bar', 'baz')\n * // Returns the passed in obj, with the value of bar set to baz\n * @function\n * @param {Object} obj - object to have the path added to it\n * @param {string|array} path - path that should be created on the object, separated by .\n * @param {*} finalValue - when ever the final value of the path should be\n * @return {Object} the obj param\n */\nexport const set = (obj, path, val) => (\n  updateColl(obj, path, 'set', val)\n)\n", "/** @module collection */\n\n// Cache the prototype methods for faster access\nconst isArray = Array.isArray\nconst keyList = Object.keys\nconst hasProp = Object.prototype.hasOwnProperty\n\n/**\n * Recursively checks if two collections are equal\n * <br/>Faster the JSON.stringify checks\n * <br/>See https://jsperf.com/fast-deep-equal-vs-json-stringify\n * @example\n * const test = { foo: [ { bar: 'baz' } ] }\n * const test2 = { foo: [ { bar: 'baz' } ] }\n * console.log(test === test2)) // prints false\n * deepEqual(test, test2) // returns true\n * @example\n * // Works with arrays too\n * deepClone([ [ [ 0 ] ] ], [ [ [ 0 ] ] ]) // returns true\n * @function\n * @param {Object|Array} a - object to check\n * @param {Object|Array} b - object to check against\n */\nexport const deepEqual = (a, b) => {\n  if (a === b) return true\n\n  if(!a || !b || typeof a != 'object' || typeof b != 'object')\n    return a !== a && b !== b\n\n  const arrA = isArray(a)\n  const arrB = isArray(b)\n  let i\n  let length\n  let key\n\n  // If both are arrays\n  if (arrA && arrB) {\n    length = a.length\n    // If unequal length, then not equal\n    if (length != b.length) return false\n    // Loop the arrays and check the contents of both\n    for (i = length; i-- !== 0;)\n      if (!deepEqual(a[i], b[i])) return false\n\n    return true\n  }\n\n  // If on is an array and the other is not, then return false\n  if (arrA != arrB) return false\n\n  // Validate date objects\n  const dateA = a instanceof Date\n  const dateB = b instanceof Date\n  if (dateA != dateB) return false\n  if (dateA && dateB) return a.getTime() == b.getTime()\n\n  // Validate RegExp objects\n  const regexpA = a instanceof RegExp\n  const regexpB = b instanceof RegExp\n  if (regexpA != regexpB) return false\n  if (regexpA && regexpB) return a.toString() == b.toString()\n\n  // Cache the keys and length for faster iteration\n  const keys = keyList(a)\n  length = keys.length\n\n  // If unequal key length then return false\n  if (length !== keyList(b).length) return false\n\n  // Ensure both objects have the same keys\n  for (i = length; i-- !== 0;)\n    if (!hasProp.call(b, keys[i])) return false\n\n  // Check the value of the object keys\n  for (i = length; i-- !== 0;) {\n    key = keys[i]\n    if (!deepEqual(a[key], b[key])) return false\n  }\n\n  return true\n\n}", "/** @module Helpers */\n\nimport { isStr } from '../string/isStr'\nimport { isNum } from '../number/isNum'\nimport { toNum } from '../number/toNum'\nimport { isStrBool } from '../boolean/isStrBool'\nimport { toBool } from '../boolean/toBool'\n\n/**\n * Converts a string to its own type if possible.\n * @example\n * strToType('12345678')\n * // Returns 12345678\n * @example\n * strToType('{}')\n * // Returns {}\n * @example\n * strToType('[]')\n * // Returns []\n * @function\n * @param {*} val - value to convert\n * @return { any | string } converted value || string if can't convert\n */\nexport const strToType = val => {\n  return !val || !isStr(val)\n    ? val\n    : isStrBool(val)\n      ? toBool(val)\n      : isNum(val)\n        ? toNum(val)\n        : (() => {\n            try { return JSON.parse(val) }\n            catch(e){ return val }\n          })()\n}", "/** @module log */\n\n'use strict'\n\nlet SHOW_LOGS\nlet METH_DEF = 'dir'\nlet PREFIX = 'type'\nconst LOG_TYPES = [\n  'error',\n  'info',\n  'log',\n  'dir',\n  'warn',\n]\nconst isTest = process.env.NODE_ENV === 'test'\n\n/**\n * Turns logs on || off.\n * <br> Set the default log method.\n * <br> Add a prefix to all log message\n * @example\n * setLogs(true, 'dir', '[ DEV MODE ]')\n * @function\n * @param {boolean} log - log values\n * @param {string} methDef - default log method\n * @param {string} prefix - string to add to all logs\n * @return { void }\n */\nexport const setLogs = (log, methDef, prefix) => {\n  SHOW_LOGS = log\n  METH_DEF = methDef || METH_DEF || 'log'\n  PREFIX = prefix || PREFIX || 'type'\n}\n\n/**\n * Resets log settings to default\n * @example\n * resetLogs()\n * // Resets settings set from the `setLogs method`\n * @function\n * @return { void }\n */\nexport const resetLogs = () => {\n  SHOW_LOGS = undefined\n  METH_DEF = 'log'\n  PREFIX = 'type'\n}\n\n/**\n * Logs a string to the inspector, uses the last argument to determine the log type\n * @example\n * logData('data to log', 'error')\n * // Will call console.error('data to log')\n * @function\n * @param {Array} args - to be passed to the log call\n * @return { void }\n */\nexport const logData = (...args) => {\n  if(!args.length) return\n  \n  let type = args.length === 1 ? METH_DEF : args.pop()\n  if(!SHOW_LOGS && type !== 'error') return\n\n  else if(typeof args[0] === 'string'){\n    if(PREFIX === 'type')\n      args[0] = `[ ${type.toUpperCase()} ] ${args[0]}`\n    else if(PREFIX)\n      args[0] = `${PREFIX} ${args[0]}`\n  }\n\n  LOG_TYPES.indexOf(type) !== -1\n    ? console[type](...args)\n    : console[METH_DEF](...args, type)\n}\n\nisTest && (module.exports.getShowLogs = () => SHOW_LOGS)\n", "/** @module object */\n\n/**\n * Removes all properties from an object.\n * @function\n * @param {Object} obj - object to remove properties from\n * @param {Array} filter - list of keys to not remove\n * @returns { null }\n */\nexport const clearObj = (obj, filter) => {\n  obj && Object\n    .entries(obj)\n    .map(([key, value]) => {\n      if(filter && filter.indexOf(key) !== -1) return\n      if(typeof value === 'object') clearObj(value)\n      obj[key] = undefined\n      delete obj[key]\n    })\n}\n", "/** @module object */\n\nimport { isFunc } from '../method/isFunc'\nimport { cloneFunc } from '../method/cloneFunc'\nimport { isArr } from '../array/isArr'\nimport { isObj } from './isObj'\nimport { deepClone } from '../collection/deepClone'\nimport { isColl } from '../collection/isColl'\n\n/**\n * Deep merges an array of objects together.\n * @function\n * @param {Array} sources - array of objects to join\n * @returns {Object|Array} - merged object or array\n */\nexport const deepMerge = (...sources) => {\n  return sources.reduce((merged, source) => {\n      const srcCopy = deepClone(source)\n      return isArr(srcCopy)\n        // Check if it's array, and join the arrays\n        ? [ ...((isArr(merged) && merged) || []), ...srcCopy ]\n          // Check if it's an object, and loop the properties\n        : isObj(srcCopy)\n          // Loop the entries of the object, and add them to the merged object\n          ? Object.entries(srcCopy)\n            .reduce((joined, [ key, value ]) => ({\n              ...joined,\n              // Check it's a function, and if so, clone it\n              [key]: isFunc(value)\n                ? cloneFunc(value)\n                // Check if the value is an object of if key is in the object\n                : isColl(value) && key in joined\n                  // Set to value or deepMerge the object with the current merged object\n                  ? deepMerge(joined[key], value)\n                  // Otherwise just clone and set the value\n                  : deepClone(value)\n            // Pass in merged at the joined object\n            }), merged)\n          // If it's not an array or object, just return the merge object\n          : merged\n  // Check the first source to decide what to merged value should start as\n  }, (isArr(sources[0]) && [] || {}))\n}\n", "/** @module object */\n\nimport { isStr } from '../string/isStr'\nimport { isNum } from '../number/isNum'\nimport { isArr } from '../array/isArr'\n\n/**\n * Checks if the input is a valid entry - a 2-element array, like what Object.entries produces.\n * Expects the first element in the entry to be either a string or a number.\n * @function\n * @example isEntry([1, 2]) // true\n * @example isEntry([\"id\", 87]) // true\n * @example isEntry([new Date(), 2]) // false, first element not string or number\n * @example isEntry([1, 2, 3]) // false, too many elements\n * @param {any} maybeEntry - Item to check if it's an entry\n *\n * @returns true if it is an entry, false otherwise\n */\nexport const isEntry = (maybeEntry) => isArr(maybeEntry) \n  && (maybeEntry.length === 2)\n  && (isNum(maybeEntry[0]) || isStr(maybeEntry[0]))\n", "/** @module object */\n\nimport { isFunc } from '../method/isFunc'\nimport { set } from '../collection/set'\nimport { isArr } from '../array/isArr'\nimport { isObj } from './isObj'\nimport { isEntry } from './isEntry'\n\n/**\n * Returns a new object, each entry of which is the result of applying the cb function to input's corresponding entry \n * @param {Object | Array} obj - regular object or array\n * @param {Function} cb  - function of form: (key, value) => [nextKey, nextValue]\n *  - the return type here is an array of two elements, key and value, where `key` must be either a string or a number\n *  - if a cb does not return an entry, then the original [key, value] pair that was passed into cb will be used instead\n * @example mapObj({a: 2, b: 3}, (k, v) => [k, v * v]) returns: {a: 4, b: 9}\n * @example mapObj({a: 1}, (k, v) => ['b', v]) returns: {b: 1}\n * @function\n *\n * @returns new object with mapping applied, or the original obj if input was invalid\n */\nexport const mapEntries = (obj, cb) => {\n  if (!isArr(obj) && !isObj(obj)) {\n    console.error(obj, `Expected array or object for obj. Found ${typeof obj}`)\n    return obj\n  }\n\n  if (!isFunc(cb)) {\n    console.error(`Expected function for cb. Found ${typeof cb}`)\n    return obj\n  }\n\n  const entries = Object.entries(obj)\n\n  const initialValue = isArr(obj) ? [] : {}\n\n  return entries.reduce(\n    (obj, [key, value]) => {\n      const result = cb(key, value)\n      if (!isEntry(result)) {\n        console.error(`Callback function must return entry. Found: ${result}. Using current entry instead.`)\n        return set(obj, key, value)\n      } \n      return set(obj, result[0], result[1])\n    },\n    initialValue\n  )\n}", "/** @module object */\n\nimport { isFunc } from '../method/isFunc'\nimport { isObj } from './isObj'\n\n/**\n * Loop over and objects props and values and reduce to new object.\n * @function\n * @param {Object} obj\n * @return {Object} - updated object\n */\nexport const reduceObj = (obj, cb, start={}) => (\n  (isObj(obj) && isFunc(cb) &&\n  Object\n    .entries(obj)\n    .reduce((data, [ key, value ]) => cb(key, value, data), start)\n  ) || start\n)\n", "/** @module promise */\n\nimport { isObj } from '../object/isObj'\nimport { isFunc } from '../method/isFunc'\n\n/**\n * Converts a standard callback method into Promise\n * @param {function} method - method to turn into a promise\n * @function\n *\n * @return method as a promise\n */\nexport const promisify = method => {\n  if(!isFunc(method)) throw `Argument must be a function`\n\n  return (...args) => {\n    return new Promise((res, rej) => {\n      // If the last arg is not a function, just return the resolved method\n      if(!isFunc(args[args.length -1]))\n        return res(method(...args))\n\n      // Remove the callback method\n      args.pop()\n      // Replace it with the promise resolve / reject\n      args.push((...cbData) => {\n        // If the cbData first arg is not falsy, then reject the promise\n        // Otherwise resolve it\n        return cbData && cbData[0]\n          ? rej(...cbData)\n          : res(...cbData)\n      })\n\n      // Call the method, and return it\n      return method(...args)\n    })\n  }\n}\n", "/** @module promise */\n\nimport { isObj } from '../object/isObj'\nimport { isFunc } from '../method/isFunc'\nimport { promisify } from './promisify'\n\n/**\n * Creates an array of Object default properties not to convert into promises\n * @ignore\n */\nconst defObjProps = Array\n  .from([\n    'caller',\n    'callee',\n    'arguments',\n    'apply',\n    'bind',\n    'call',\n    'toString',\n    '__proto__',\n    '__defineGetter__',\n    '__defineSetter__',\n    'hasOwnProperty',\n    '__lookupGetter__',\n    '__lookupSetter__',\n    'isPrototypeOf',\n    'propertyIsEnumerable',\n    'valueOf',\n    'toLocaleString'\n  ])\n  .concat(Object.getOwnPropertyNames(Object.prototype))\n  .reduce((map, functionName) => {\n    map[functionName] = true\n    return map\n  }, {})\n\n/**\n * Loops an object and looks for any methods that belong to the object, then add an Async version\n * @memberof promise\n * @param {Object} object\n * @return {Object} - object with Async methods added\n */\nconst addAsync = object => {\n  if (!object.__IS_PROMISIFIED__) {\n    for (const prop of Object.getOwnPropertyNames(object)) {\n      const isAsync = prop.indexOf('Async') !== -1 || object[`${prop}Async`]\n      if (isAsync || defObjProps[prop]) continue\n\n      if(isFunc(object[prop]))\n        object[`${prop}Async`] = promisify(object[prop])\n      else {\n        const getValue = Object.getOwnPropertyDescriptor(object, prop).get\n        if(isFunc(getValue)) object[`${prop}Async`] = promisify(getValue)\n      }\n    }\n    object.__IS_PROMISIFIED__ = true\n  }\n\n  return object\n}\n\n/**\n * Converts Objects method properties into promiseAsync. allow using promisifyAll\n * @function\n * @param {Object} object\n * @return {Object} - promisified object\n */\nexport const promisifyAll = object => {\n  if(!isObj(object)) return object\n\n  addAsync(object)\n  const proto = Object.getPrototypeOf(object)\n\n  proto &&\n    Object.getPrototypeOf(proto) !== null &&\n    addAsync(proto)\n\n  return object\n}\n", "/** @module regex */\n\n/**\n * Checks if value is an instance of regex\n * @function\n * @param {*} val \n * @return {boolean} true if val is an instance of RegExp\n * @example\n * isRegex(new RegExp('a')) // true\n * isRegex(/a/) // true\n * isRegex('a') // false\n */\nexport const isRegex = val => Boolean(\n  val && (val instanceof RegExp)\n)", "/** @module regex */\n\nimport { isRegex } from './isRegex'\nimport { isStr } from '../string'\n\n/**\n * Attempts to return a regex string from maybeRx.\n * @function\n * @param {*} maybeRx - any time\n * @return {string?} If maybeRx is a RegExp instance, returns its .source\n * property. If it is a string, returns it unchanged.\n * Otherwise, returns null.\n * \n * @example\n * getRegexSource(/[A-z]+/) // '[A-z]+'\n * getRegexSource('test') // 'test'\n * getRegexSource(34) // null\n */\nexport const getRegexSource = maybeRx =>\n  isRegex(maybeRx)\n    ? maybeRx.source \n    : isStr(maybeRx)\n      ? maybeRx\n      : null", "/** @module url */\n\nimport { isArr } from '../array/isArr'\n\n/**\n * takes a raw querystring input and converts it to an object\n * @param {String} string - querystring to parse into an object\n * @function\n * @returns {Object}\n */\nexport const queryToObj = string => {\n\n  const currentQueryItems = {}\n  const stringSplit = string.split('?')\n  const querystring = stringSplit[ stringSplit.length -1 ]\n  \n  if(!querystring) return currentQueryItems\n\n  const split = querystring.split('&')\n\n  split.length &&\n    split.map(item => {\n\n      const components = item.split('=')\n      if (components.length <= 1) return currentQueryItems\n\n      // split on the first instance of '=', so we join the rest if any\n      const itemSplit = [components.shift(), components.join('=')]\n\n      if (itemSplit.length === 2) {\n        \n        // if the value contains special char ',' then make it into an array\n        const array = decodeURIComponent(itemSplit[1]).split(',')\n        if (array && array.length > 1)\n          currentQueryItems[itemSplit[0]] = array\n        \n        // check if key already exists\n        else if (itemSplit[0] in currentQueryItems) {\n           // convert to array or append to it\n           const val = currentQueryItems[itemSplit[0]]\n           currentQueryItems[itemSplit[0]] = isArr(val) \n             ? val.push(decodeURIComponent(itemSplit[1])) \n             : [val, decodeURIComponent(itemSplit[1])]        \n        }\n        else\n          currentQueryItems[itemSplit[0]] = decodeURIComponent(itemSplit[1])\n      }\n    })\n\n  return currentQueryItems\n}\n", "/** @module object */\n\nimport { isFunc } from '../method/isFunc'\nimport { deepClone } from '../collection/deepClone'\nimport { isObj } from './isObj'\n\n/**\n * Deep clones Object obj, then returns the result of calling function mutatorCb with the clone as its argument\n * @example\n * const obj = {}\n * const clone = applyToCloneOf(obj, (clone) => { clone.test = 'foo'; return clone })\n * console.log(obj === clone) // prints false\n * console.log(clone.test === 'foo') // prints true\n * @function\n * @param {Object} obj - object\n * @param {Function} mutatorCb - a callback that accepts one argument, the cloned obj, and mutates it in some way\n * @returns the mutated clone\n */\nexport const applyToCloneOf = (obj, mutatorCb) => {\n  let error\n  if (!obj) error = 'object (Argument 1) in applyToCloneOf, must be defined!'\n\n  if (!isObj(obj)) error = 'object (Argument 1) in applyToCloneOf, must be an object!'\n\n  if (!mutatorCb) error = 'mutator (Argument 2) in applyToCloneOf, must be defined!'\n\n  if (!isFunc(mutatorCb)) error = 'mutator (Argument 2) arg in applyToCloneOf, must be a function!'\n  \n  if(error) return console.warn(error) || obj\n\n  const clone = deepClone(obj)\n  mutatorCb(clone)\n\n  return clone\n}\n", "/** @module array */\n\nimport { validate } from '../validation'\nimport { isArr } from './isArr'\n\n/**\n * Checks if arrays are set-equal: they contain the same elements,\n * but element frequencies don't matter.\n * Does this with one pass over each array and an auxilliary set.\n * @function\n * @param {Array<*>} arr \n * @param {Array<*>} otherArr \n */\nexport const areSetEqual = (arr, otherArr) => {\n  const [ valid ] = validate({ arr, otherArr }, { $default: isArr })\n  if (!valid) return null\n\n  if (arr === otherArr) return true\n\n  const [ longest, shortest ] = arr.length > otherArr.length\n    ? [ arr, otherArr ]\n    : [ otherArr, arr ]\n\n  const arrSet = new Set(shortest)\n\n  for (let i = 0; i < longest.length; i++) {\n    const element = longest[i]\n    if (!arrSet.has(element)) return false\n  }\n\n  return true\n}", "/** @module string */\n\n/**\n * Builds a string path from passed in args ( i.e. path/to/thing ).\n * @function\n * @return {string} - built path from arguments\n */\nexport const buildPath = (...args) => {\n  const built = args.reduce((path, arg) => {\n    let str = toStr(arg)\n\n    return `${path}${ str && '/' + str || '' }`\n  }, '')\n  \n  return built.replace(/([^:\\/]|^)\\/{2,}/g, '$1/')\n}\n", "import { capitalize } from './capitalize'\n\n/**\n * Turns a path string into a camel-cased string, if there is more than one\n * step in the path. If there isn't, just returns path.\n * @param {string} path \n * @return {string} camel-cased string\n * @example\n * camelCasePath('settings.agendaMap.Count') -> 'settingsAgendaMapCount'\n * camelCasePath('settings') -> 'settings'\n */\nexport const camelCasePath = (path) => {\n  const split = path.split('.')\n  const camelCasedSplit = split.map(\n    (str, idx) => idx > 0\n      ? capitalize(str, false)\n      : str\n  )\n\n  return camelCasedSplit.length > 1 \n    ? camelCasedSplit.join('')\n    : path\n}\n", "/** @module functions */\n\nimport { isFunc } from './isFunc'\n\n/**\n * Check if the passed in method is a function, and calls it\n * @example\n * checkCall((param1) => { return param1 }, 'foo')\n * // Returns 'foo'\n * @function\n * @param {function} method - function to call\n * @param {Object} params - params to pass to the method on call\n * @return {*} - whatever the passed in method returns\n */\nexport const checkCall = (method, ...params) => {\n  return isFunc(method)\n    ? method(...params)\n    : undefined\n}\n", "/** @module array */\n\nimport { isArr } from './isArr'\nimport { isObj } from '../object/isObj'\n\n/**\n * Creates a copy of the passed in array.\n * <br> Returns empty array, if param is not an array.\n * @function\n * @example\n * cloneArr([1,2,3])\n * // Returns copy of the passed on array\n * @param {array} arr - array to be copied\n * @return {array} - copy of passed in array\n */\nexport const cloneArr = arr => (\n  Array.from([\n    // If arr is not an array or object, just use empty array, so we don't throw!\n    ...(isArr(arr) && arr || isObj(arr) && Object.entries(arr) || [])\n  ])\n)\n", "/** @module object */\n\nimport { logData } from '../log'\n\n/**\n * Clones an object by converting to JSON string and back.\n * @function\n * @param {Object} obj - object to clone\n * @returns {Object} copy of original object\n */\nexport const cloneJson = obj => {\n  try {\n    return JSON.parse(JSON.stringify(obj))\n  }\n  catch(e){\n    logData(e.message, 'error')\n    return null\n  }\n}\n", "/** @module functions */\n\nimport { validate } from '../validation'\nimport { isFunc } from '../method/isFunc'\n\n/**\n * Returns a new function that is the complement of predicate function `predicate`\n * @function\n * @param {Function} predicate \n * @returns {Function?} the complement of `predicate`, if it's a function, otherwise null\n * @example\n * const isNegative = x => (x < 0)\n * const isNonNegative = complement(isNegative)\n * isNonNegative(1) // true\n */\nexport const complement = predicate => {\n  const [ valid ] = validate({ predicate }, { predicate: isFunc })\n  return valid\n    ? (...args) => !predicate(...args)\n    : null\n}", "/** @module string */\n\nimport { isStr } from './isStr'\nimport { toStr } from './toStr'\n\n\n/**\n * Checks if a string contains another string.\n * @function\n * @param {string} string - value to be checked\n * @param {string} substring - value to search for\n * @return {boolean} - if the substring exists string\n */\nexport const containsStr = (str, substring, fromIndex) => {\n  str = !isStr(str) && toStr(str) || str\n  substring = !isStr(substring) && toStr(substring) || substring\n\n  return str.indexOf(substring, fromIndex) !== -1;\n}\n", "/** @module functions */\n\nimport { isFunc } from './isFunc'\n\n/**\n * Limits the amount of calls to a function over time\n * @example\n * debounce(myFunction)\n * // Calls myFunction after the default 250 ms\n * @example\n * debounce(myFunction, 500)\n * // Calls myFunction after 500 ms\n * @example\n * debounce(myFunction, 500, true)\n * // Calls myFunction immediately\n * @function\n * @param {function} func - function to call\n * @param {number} wait - how long to wait between function calls\n * @param {boolean} immediate - should call immediately\n * @return { void }\n */\nexport const debounce = (func, wait = 250, immediate = false) => {\n  let timeout\n  function wrapFunc(...args){\n    if (!isFunc(func)) return null\n\n    const context = this\n    const later = () => {\n      timeout = null\n      !immediate && func.apply(context, args)\n    }\n    const callNow = immediate && !timeout\n    clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n    if (callNow)\n      return isFunc(func) && func.apply(context, args)\n  }\n  return wrapFunc\n}\n", "/** @module functions */\n\nimport { isNum } from '../number/isNum'\nimport { isFunc } from './isFunc'\n\n/**\n * Execute a method n times.\n * <br> Callback params - does not include number || callback method\n * @function\n  * @example\n * doIt(10, window, [], (index, arr) => { arr.push(index) }) === [ 0,1,2 ... 8,9 ]\n * @param {number} args.0 - number of times to call the callback\n * @param {parent} args.1 - value to bind the method call to ( this )\n * @param {function} last arg of args array - method to call\n * @return { void }\n */\nexport const doIt = (...args) => {\n  const params = args.slice()\n  const num = params.shift()\n  const bindTo = params.shift()\n  const cb = params.pop()\n  if(!isNum(num) || !isFunc(cb)) return []\n  \n  const doItAmount = new Array(num)\n  const responses = []\n  for(let i = 0; i < doItAmount.length; i++){\n    const data = cb.call(bindTo, i, ...params)\n    if (data === false) break\n    responses.push(data)\n  }\n\n  return responses\n}\n", "/** @module Helpers */\n\nimport { softFalsy } from '../boolean/softFalsy'\nimport { isFunc } from '../method/isFunc'\n\n\n/**\n * Determines the correct value to return, by calling the passed in check function.\n * <br> If no check function, then it uses the softFalsy method.\n * @example\n * either(0, 2)\n * // Returns 0\n * @example\n * either(null, 2)\n * // Returns 2\n * @example\n * either(1, 2, (val1, val2) => { return true })\n * // Returns 1\n * @function\n * @param {*} val1 - return if passes in check method return true\n * @param {*} val2 - return if passed in check method returns false\n * @param {function} function - called to determine which value to return\n * @returns {*}\n */\nexport const either = (val1, val2, check) => (\n  !isFunc(check)\n    ? softFalsy(val1) && val1 || val2\n    : check(val1, val2) && val1 || val2\n)\n", "/** @module array */\n\nimport { isArr } from './isArr'\n\n/**\n * Returns a if it is an Array, else returns b\n * @function\n * @param {*} a\n * @param {*} b\n * @returns {*} either a, if it's an array, or b\n * \n * @example\n * const foo = eitherArr('hi', 1) // returns 1\n * const bar = eitherArr([ 2 ], 1) // returns [ 2 ]\n */\nexport const eitherArr = (a, b) => isArr(a) ? a : b", "/** @module functions */\n\nimport { isFunc } from './isFunc'\n\n/**\n * Returns the first param if it's a function.\n * <br> If first param is not a function, returns second param.\n * @example\n * eitherFunc(() => {}, 'bar')\n * // Returns first param because it's a function.\n * @example\n * eitherFunc('foo', 'bar')\n * // Returns 'bar'\n * @function\n * @param {function} func1 - return if is func\n * @param {function} func2 - use if first is not an object\n * @returns {function}\n */\nexport const eitherFunc = (func1, func2) => (\n  isFunc(func1) && func1 || func2\n)\n", "/** @module object */\n\nimport { isObj } from './isObj'\n\n/**\n * Returns the first param if correct type of second param.\n * @function\n * @param {Object} obj1 - return if is object\n * @param {Object} obj2 - use if first is not an object\n * @returns {Object}\n */\nexport const eitherObj = (obj1, obj2) => (\n  isObj(obj1) && obj1 || obj2\n)\n", "/** @module string */\n\nimport { isStr } from './isStr'\n\n/**\n * Checks if the first param is a string, and returns it.\n * <br> If it's not a string, the second param is returned\n * @function\n * @param {string} str1 - return if is string\n * @param {string} str2 - use if first is not a string\n * @returns {string}\n */\nexport const eitherStr = (str1, str2) => (\n  isStr(str1) && str1 || str2\n)\n", "/** @module object */\n\nimport { isFunc } from '../method/isFunc'\nimport { pipeline } from '../method/pipeline'\nimport { isObj } from './isObj'\n\n/**\n * Like \"every\" for arrays, but operates across each entry in obj\n * @function\n * @param {Object} obj \n * @param {Function} predicate of form (key, value) => boolean. Returns true or false for the entry\n * @returns boolean indicating that every entry satisfied the predicate or not\n */\nexport const everyEntry = (obj, predicate) => {\n  if (!obj) {\n    console.error(`everyEntry expects argument obj [${obj}] to be defined.`)\n    return false\n  }\n\n  if (!isObj(obj)) {\n    console.error(`Argument obj ${obj} must be an object.`)\n    return false\n  }\n\n  if (!isFunc(predicate)) {\n    console.error(`Argument 'predicate' passed into everyEntry must a function. Found: ${predicate}`)\n    return false\n  }\n\n  return pipeline(\n    obj,\n    Object.entries,\n    entries => entries.every(([key, value]) => predicate(key, value))\n  )\n}\n", "/** @module object */\n\nimport { isFunc } from '../method/isFunc'\nimport { isObj } from './isObj'\nimport { reduceObj } from './reduceObj'\n\n/**\n * Returns a new object, consisting of every key-value pair from obj that, when passed into the predicate, returned true\n * @function\n * @param {*} obj - regular object\n * @param {*} predicate  - function of form: (key, value) => Boolean\n * @returns object consisting of a subset of the entries from obj\n * @example: filterObj({a: 2, b: 3}, (k, v) => (v > 2)) returns: {b: 3}\n */\nexport const filterObj = (obj, predicate) => {\n  if (!obj) return obj\n\n  if (!isObj(obj)) {\n    console.error(`Object ${obj} was not an object. It must be for filterObject`)\n    return obj\n  }\n\n  if (!isFunc(predicate)) {\n    console.error(`Argument 'predicate' passed into filterObject must a function. Found: ${predicate}`)\n    return obj\n  } \n\n  return reduceObj(\n    obj,\n    (key, value, data) => {\n      if (predicate(key, value))\n        data[key] = value\n      return data\n    },\n    {}\n  )\n}\n", "/** @module array */\nimport { identity, compareTo } from '../method'\nimport { findExtrema } from './findExtrema'\n\n/**\n * Returns the maximum element in arr\n * @function\n * @param {Array<Object>} arr\n * @param {Function?} propSelector - optional property selector for choosing the property to compare with\n * @example\n * const items = [ { num: 1 }, { num: 3 } ]\n * findMax(items, item => item.num) // returns { num: 3 }\n */\nexport const findMax = (arr = [], propSelector=identity) => findExtrema(\n  arr, \n  (x, y) => compareTo(propSelector(x), propSelector(y))\n)\n", "/** @module array */\nimport { identity, compareTo } from '../method'\nimport { findExtrema } from './findExtrema'\n\n/**\n * Returns the minimum element in arr\n * @function\n * @param {Array<Object>} arr\n * @param {Function?} propSelector - optional property selector for choosing the property to compare with\n * @example\n * const items = [ { num: 1 }, { num: 3 } ]\n * findMax(items, item => item.num) // returns { num: 1 }\n */\nexport const findMin = (arr = [], propSelector=identity) => findExtrema(\n  arr, \n  (x, y) => compareTo(propSelector(y), propSelector(x))\n)\n", "/** @module array */\n\nimport { isArr } from './isArr'\nimport { isFunc } from '../method/isFunc'\nimport { validate } from '../validation'\n\n/**\n * Maps each element using mapping function `mapFn`, but returns the result as a flattened array.\n * It is equivalent to map() followed by flattening to depth 1, but flatMap is a useful shortcut,\n * and merging both steps into one method (with one pass over the array) is slightly more efficient. \n * @function\n * @example\n * [1, 2].map(x => [x * 2]) // returns [[2], [4]]\n * flatMap([1, 2], x => [x * 2]) // returns [2, 4]\n * @param {Array} arr - array to map across\n * @param {Function} mapFn - function for mapping\n */\nexport const flatMap = (arr, mapFn) => {\n  const [ inputIsValid ] = validate(\n    { arr, mapFn },\n    { arr: isArr, mapFn: isFunc }\n  )\n  if (!inputIsValid) return arr;\n\n  // iterate across the array, calling mapFn on each element, then flattening into final array\n  return arr.reduce(\n    (finalArr, current) => {\n      const result = mapFn(current)\n      isArr(result)\n        ? result.map(el => finalArr.push(el))\n        : finalArr.push(result)\n      return finalArr\n    },\n    []\n  )\n}\n\n", "import { isArr } from './isArr'\nimport { uniqArr } from './uniqArr'\nimport { flatArr } from './flatArr'\nimport { isFunc } from '../method/isFunc'\n\n/**\n * Flattens the passed in array arguments and removes duplicates\n * Also removes non-existing values such as undefined and null\n * If the last argument is a function, it will be used as the comparison when checking for duplicates\n * @function\n * @example\n * flatUnion([1,1,2], [1,2,3])\n * // Returns array with only unique values [ 1, 2, 3 ]\n * @example\n *  flatUnion([{a: 1}, { a: 3 }], [{a: 4}, { a: 1 }], item => item.a)\n * // Returns array with only unique values [ { a: 1 }, { a: 3 }, { a: 4 } ]\n * @param {array} arr - array to remove duplicates from\n * @param {Function?} selector - optional function to specify the property to check if another element exists\n *\n * @return {array} - Flattened copy of passed in array arguments, with duplicates removed\n */\nexport const flatUnion = (...args) => {\n  const last = args.pop()\n  const opts = { exists: true }\n  const compare = isFunc(last) ? last : args.push(last) && undefined\n\n  return args.reduce((merged, arr) => {\n    if(!isArr(arr)) return merged\n\n    return uniqArr(flatArr([...merged, ...arr], opts), compare)\n  }, [])\n}", "/** @module url */\n\nimport { queryToObj } from './queryToObj'\nimport { validate } from '../validation/validate'\nimport { isStr } from '../string/isStr'\n\n/**\n * Gets the value for the URL parameter, if it's available.\n * Can be safely called on platforms without a global document object,\n * in which case this always returns null.\n * @function\n * @param {string} paramKey - a url param key \n * @return {string?} - value for the url parameter\n * @example\n * for www.test.com/?x=1&y=2\n * getURLParam('x') // 1\n * getURLParam('y') // 2\n */\nexport const getURLParam = paramKey => {\n  const [ valid ] = validate({ paramKey }, { paramKey: isStr })\n  if (!valid) return null\n\n  const doc = typeof document !== 'undefined' \n    ? document \n    : null\n  \n  const search = doc?.location?.search\n\n  return isStr(search)\n    ? queryToObj(search)?.[paramKey] ?? null\n    : null \n}", "/** @module string */\n\nimport { reverseStr } from './reverseStr'\nimport { getWordStartingAt } from './getWordStartingAt'\n\n/**\n * Gets the word in text ending at index (exclusive)\n * @function\n * @param {string} text \n * @param {number} index - the exclusive ending index of the word to get \n * @param {Array<string>?} delimiters - optional array of strings that delimit the start of words. Defaults to the space character.\n * @example\n * const text = 'foo bar bin'\n * const word = getWordEndingAt(text, 3)\n * word === 'foo' \n */\nexport const getWordEndingAt = (text, index, delimiters=[' ']) => {\n  const reversed = reverseStr(text)\n  const reversedIndex = text.length - index\n  return reverseStr(\n    getWordStartingAt(reversed, reversedIndex, delimiters)\n  )\n}", "/** @module functions */\n\n/**\n * Checks if there is access to the dom\n * @function\n * @example\n * // In Browser \n * hasDomAccess() === true\n * // In Node\n * hasDomAccess() === false\n * @return {Boolean} True if executed in a browser\n */\nexport const hasDomAccess = () => {\n  try {\n    return !!(\n      typeof window !== 'undefined' &&\n      window.document &&\n      window.document.createElement\n    )\n  }\n  catch (error) {\n    return false\n  }\n}", "/** @module string */\n\nimport { isStr } from './isStr'\nimport { isNonNegative } from '../number/isNonNegative'\n/**\n * Creates a hash from a passed in string consistently\n * <br/> Not intended to be secure\n * <br/> Value comes from being a pure function\n * <br/> Given the same input, it will always return the same output\n * <br/> There is no expectation to convert back from the hash to the original string\n * @function\n * @param {string} str - String to be hashed\n * @param {number=} maxLength - Max length of the returned hash\n *\n * @returns {string} - Hashed version of the string\n */\nexport const hashString = (str, maxLength) => {\n  if (!isStr(str) || str.length == 0) return 0\n\n  str = str.split('').reverse().join('')\n\n  let hash = 0\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i)\n    hash = ((hash<<5) - hash) + char\n    // Convert to positive 32bit integer\n    hash = `${ Math.abs(hash & hash) }`\n  }\n\n  return isNonNegative(maxLength) ? hash.slice(0, maxLength) : hash\n}", "import { isObj } from './isObj'\nimport { isArr } from '../array/isArr'\nimport { toBool } from '../boolean/toBool'\n\n/**\n * Returns true if the input is an object and every\n * value is an array\n * @param {*} obj - data to check\n * @return {boolean} true if input is an array map\n */\nexport const isArrMap = obj => {\n  if (!isObj(obj)) return false\n  const values = Object.values(obj)\n  return toBool(\n    values.length && values.every(isArr)\n  )\n}", "/** @module string */\n\nimport { isStr } from './isStr'\n\n/**\n * Check if string is a email.\n * @function\n * @param {string} string to check\n * @return {boolean} - if it's a email\n */\nexport const isEmail = str => {\n  if (!str || !isStr(str)) return false\n  const regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/\n  return Boolean(regex.test(str))\n}\n", "/** @module collection */\n\nimport { isColl } from './isColl'\nimport { isArr } from '../array/isArr'\n\n/**\n * Checks if passed in obj || array is empty.\n * @example\n * isEmptyColl({})\n * // Returns true\n * @example\n * isEmptyColl({ foo: 'bar' })\n * // Returns false\n * @example\n * isEmptyColl([])\n * // Returns true\n * @function\n * @param {Object} obj - object to check if empty\n * @return {boolean}  true || false\n */\nexport const isEmptyColl = obj => (\n  isArr(obj)\n    ? obj.length === 0\n    : isColl(obj) && Object.getOwnPropertyNames(obj).length === 0\n)\n", "/** @module number */\n\nimport { isNum } from './isNum'\n\n/**\n * Checks if a number is a Float.\n * @example\n * isFloat(1.23)\n * // Returns true\n * @example\n * isFloat('1.2')\n * // Returns false ( because it's a string )\n * @function\n * @param {number} num - value to check\n * @return {boolean} true or false - value is an Float\n */\nexport const isFloat = val => (\n  isNum(val) && val % 1 !== 0\n)\n", "/** @module number */\n\nimport { isNum } from './isNum'\n\n/**\n * Checks if a number is an integer.\n * @example\n * isInt(1)\n * // Returns true\n * @example\n * isInt('1')\n * // Returns false ( because it's a string )\n * @function\n * @param {number} num - value to check\n * @return {boolean} true or false - value is an Int\n */\nexport const isInt = val => (\n  isNum(val) && (val % 1 === 0)\n)\n", "/** @module number */\n\nimport { isNum  } from \"./isNum\"\n\n/**\n * @function\n * @param {*} x \n * @returns { boolean } true if x is a negative number\n * @example isNegative(-1) // true\n * @example isNegative(0) // false\n */\nexport const isNegative = x => isNum(x) && (x < 0)", "/** @module string */\n\nimport { isStr } from './isStr'\n\n/**\n * Check if string is a phone number.\n * @function\n * @param {string} string to check\n * @return {boolean} - if it's a phone number\n */\nexport const isPhone = str => {\n  if (!str || !isStr(str)) return false\n  const regex = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/im\n  return Boolean(regex.test(str)) && str.replace(/\\D/g, '').length < 11\n}\n", "/** @module number */\n\nimport { isNum } from './isNum'\n\n/**\n * @function\n * @param {*} x \n * @returns { boolean } true if x is a positive number\n * @example isPositive(0) // false\n * @example isPositive(1) // true\n */\nexport const isPositive = x => isNum(x) && (x > 0)", "/** @module Helpers */\n\n/**\n * Checks if the passed in values are exactly the same.\n * @example\n * isSame(1, 1)\n * // Returns true\n * @function\n * @param {*} val1 - value to compare\n * @param {*} val2 - value to compare\n * @return {boolean} is the values are the same\n */\nexport const isSame = (val1, val2) => (\n  val1 === val2\n    ? val1 !== 0 || 1 / val1 === 1 / val2\n    : val1 !== val1 && val2 !== val2\n)\n", "/** @module string */\n\n/**\n * Check if string is a url.\n * @function\n * @param {string} string to check\n * @return {boolean} - if it's a url\n */\nexport const isUrl = str => {\n  const regex = /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/\n  return Boolean(regex.test(str))\n}\n", "/** @module string */\n\nimport { isStr } from './isStr'\n\n/**\n * Check if string is a uuid.\n * @function\n * @param {string} string to check\n * @return {boolean} - if it's a uuid\n */\nexport const isUuid = str => {\n  if (!str || !isStr(str)) return false\n  const regex = /^[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i\n  return Boolean(regex.test(str))\n}\n", "/** @module Helpers */\n\n/**\n * Checks is passed in date is a valid date.\n * @example\n * isValidDate(new Date())\n * // Returns true\n * @example\n * isValidDate(new Date().toString())\n * // Returns true\n * @example\n * isValidDate('12345678')\n * // Returns false\n * @function\n * @param { date | string } date - value to check\n * @return {boolean} T/F - if passed in date is a valid date\n */\nexport const isValidDate = date => (\n  !isNaN( (date instanceof Date && date || new Date(date)).getTime() )\n)\n", "/** @module url */\n\n/**\n * Checks if the given string is a valid URL\n * Must begin with ftp/http/https\n * @param {String} string - any string to check if it's a valid url\n * @function\n * @returns {Boolean}\n */\nexport const isValidUrl = string => {\n  var regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/\n\n  return regexp.test(string)\n}\n", "/** @module regex */\n\nimport { isStr } from '../string'\nimport { isArr } from '../array'\nimport { getRegexSource } from './getRegexSource'\n\n/**\n * Helper for `joinRegex` that parses the args\n * @param {...*} args \n * @return {Array} [\n *  expressions array,\n *  options string\n * ]\n */\nconst parseArgs = args => {\n  if (isArr(args[0])) return [ args[0], args[1] ]\n  const last = args[args.length - 1]\n  const options = isStr(last) ? last : undefined\n  const expressions = options\n    ? args.splice(0, args.length - 1)\n    : args\n  return [ expressions, options ]\n}\n\n/**\n * Joins regex together in one expression\n * @function\n * @param {...RegExp} expressions array of regex instances. \n * You can technically use strings as well, but be careful that it's not the last element of a spread call, or that will be interpreted as the \"options\" string.\n * @param {string} options - options string (the second argument of RegExp constructor)\n * @example\n * // calling using spread args\n * const joined = joinRegex(/[A-z]+/, /[0-9]/, 'g')\n * joined === /([A-z]+|[0-9])/g\n * @example\n * // calling with an array\n * const joined = joinRegex([ ...allMyRegEx ], 'gi')\n */\nexport const joinRegex = (...args) => {\n  const [ expressions, options ] = parseArgs(args)\n\n  // join the regex together in a capture group with the | operator\n  const source = expressions.reduce(\n    (joined, next) => {\n      const nextSource = getRegexSource(next)\n      return !nextSource\n        ? joined\n        : joined === ''\n          ? nextSource\n          : `${joined}|${nextSource}`\n    },\n    ''\n  )\n\n  return new RegExp(`(${source})`, options)\n}\n", "/** @module object */\n\n/**\n * Compares two objects by converting to JSON, and checking string equality.\n * @function\n * @param { object | array } one - object to compare with param two\n * @param { object | array } two - object to compare with param one\n * @return {boolean} status of equality\n */\nexport const jsonEqual = (one, two) => {\n  try {\n    return JSON.stringify(one) === JSON.stringify(two)\n  }\n  catch(e){\n    return false\n  }\n}\n", "/** @module object */\n\nimport { isStr } from '../string/isStr'\nimport { isArr } from '../array/isArr'\n\n/**\n * Converts an array of strings to a matching key/value pair object.\n * @function\n * @param {Array} arr - to be converted to object\n * @param {string} toUpperCase - converts the key and value to uppercase\n * @return {Object} built object\n */\nexport const keyMap = (arr, toUpperCase) => (\n  isArr(arr) && arr.reduce((obj, key) => {\n    if(!isStr(key)) return obj\n    \n    const use = toUpperCase && key.toUpperCase() || key\n    obj[use] = use\n\n    return obj\n  }, {}) || {}\n)", "/** @module functions */\n\nimport { isFunc } from './isFunc'\n\n/**\n * Adds catch to a promise for better error handling of await functions\n * <br> Removes the need for wrapping await in a try / catch\n * @example\n * const [ err, data ] = await limbo(promiseFunction())\n * // returns an array\n * // * err will be undefined if no error was thrown\n * // * data will be the response from the promiseFunction\n * @function\n * @param {Promise} promise - Promise to be resolved\n * @return {Array} - Slot 1 => error, Slot 2 => response from promise\n */\nexport const limbo = promise => {\n  return !promise || !isFunc(promise.then)\n    ? [ new Error(`A promise or thenable is required as the first argument!`), null]\n    : promise\n      .then(data => [null, data])\n      .catch(err => [err, undefined])\n}\n", "/** @module collection */\n\nimport { isFunc } from '../method/isFunc'\nimport { isColl } from './isColl'\nimport { isArr } from '../array/isArr'\n\n/**\n * Loops over a collection and calls a passed in function for each one.\n * @example\n * mapColl([1, 2, 3], (key, val, coll) => { console.log(key) })\n * // Will log all keys of the collection\n * @function\n * @param {Array|Object} - collection to loop over\n * @return {Array|Object} returns the same type of collection passed in\n */\nexport const mapColl = (coll, cb) => (\n  isFunc(cb) && isColl(coll)\n    ? Object\n      .keys(coll)\n      .map(key => cb(key, coll[key], coll))\n    : isArr(coll)\n      ? []\n      : {}\n)\n", "/** @module collection */\n\nimport { isColl } from './isColl'\nimport { isObj } from '../object/isObj'\nimport { isFunc } from '../method/isFunc'\nimport { exists } from '../ext/exists'\nimport { validate } from '../validation'\n\n/**\n * Helper for mapFind, handling the array case\n * @param {Array} arr \n * @param {Function} mapper \n * @param {Function} test \n * @returns {*}\n */\nconst mapFindArr = (arr, mapper, test) => {\n  // iterate over each value in the array,\n  // returning when a mapped value is found that passes `test`\n  for (let i = 0; i < arr.length; i++) {\n    const mappedValue = mapper(arr[i], i, i)    \n    if (test(mappedValue, i, i))\n      return mappedValue\n  }\n\n  return null \n}\n\n/**\n * Helper for mapFind, handling the object case\n * @param {Object} obj \n * @param {Function} mapper \n * @param {Function} test \n * @returns {*}\n */\nconst mapFindObj = (obj, mapper, test) => {\n  let idx = 0\n\n  // iterate over each property in the object\n  // returning when a mapped value is found that passes `test`\n  for (let key in obj) {\n    if (!obj.hasOwnProperty(key)) continue\n\n    const value = obj[key]\n    const mappedValue = mapper(value, key, idx)\n    if (test(mappedValue, key, idx)) \n      return mappedValue\n\n    idx++\n  }\n\n  return null  \n}\n\n/**\n * Finds the first element in coll whose mapped value passes the test function, then returns\n * the **mapped** value.\n * It will not map the entire array or object; only the subset needed to find the first passing element.\n * @function\n * @param {Array|Object} coll - elements to map and find\n * @param {Function} mapper - mapping function of form: (value, key, idx) -> *. \"key\" is the index when coll is an array. \"idx\" is the index of the array value or object entry.\n * @param {Function?} test - predicate function of form: (mappedValue, key, idx) -> true/false. Defaults to checking if the mapped value is defined. \"key\" is the index when coll is an array.\n * @returns {*?} the first passing mapped value\n * \n * @example \n * // Find the first file path that can be required from disk\n * const filePaths = [...]\n * const loadedFile = mapFind(filePaths, tryRequireSync)\n * \n * @example \n * // Find the first file path whose required value is an object\n * const filePaths = [...]\n * const loadedFile = mapFind(filePaths, tryRequireSync, isObj)\n * \n * @example\n * // Find the first file path whose required value is an object\n * const filePaths = { document: \"foo/bar/doc.txt\", image: \"foo/bar/pic.img\"}\n * const loadedFile = mapFind(filePaths, (value, key) => tryRequireSync(value), isObj)\n */\nexport const mapFind = (coll, mapper, test=exists) => {\n  const [ valid ] = validate({ coll, mapper, test }, { coll: isColl, $default: isFunc })\n  if (!valid) return undefined\n\n  return isObj(coll)\n    ? mapFindObj(coll, mapper, test)\n    : mapFindArr(coll, mapper, test)\n}", "/** @module object */\n\n\nimport { isObj } from './isObj'\nimport { isFunc } from '../method/isFunc'\nimport { mapEntries } from './mapEntries'\n\n/**\n * Shortcut helper for mapping just the keys of an object.\n * @function\n * @param {Object} obj \n * @param {Function} keyMapper: (key) => nextKey\n * @returns the new object with each key mapped\n */\nexport const mapKeys = (obj, keyMapper) => {\n  if (!isObj(obj) || !isFunc(keyMapper)) \n    return obj\n\n  return mapEntries(\n    obj,\n    (key, value) => [keyMapper(key), value]\n  )\n}\n", "/** @module object */\n\nimport { isFunc } from '../method/isFunc'\nimport { isObj } from './isObj'\n\n/**\n * Map over and objects props and values.\n * @function\n * @param {Object} obj\n * @return {Array} -  returned values from callback\n */\nexport const mapObj = (obj, cb) => (\n  (isObj(obj) && isFunc(cb) &&\n  Object\n    .entries(obj)\n    .map(([ key, value ]) => cb(key, value))\n  ) || obj\n)\n", "/** @module functions */\n\nimport { isNum } from '../number/isNum'\nimport { hasOwn } from '../object/hasOwn'\nimport { isFunc } from './isFunc'\n\n/**\n * Creates a method to memorize passed in methods output\n * @example\n * memorize(myFunction, cacheKeyFunction)\n  * @example\n * memorize(myFunction, cacheKeyFunction, 100)\n * @function\n * @param {function} func - method to memorize output of\n * @param {function} getCacheKey - gets the key to save cached output\n *\n * @return {function} memorized function with cache\n */\nexport const memorize = (func, getCacheKey, limit=1) => {\n    if (!isFunc(func) || (getCacheKey && !isFunc(getCacheKey)))\n      return console.error('Error: Expected a function', func, getCacheKey)\n\n    let memorized = function(){\n      const cache = memorized.cache\n      const key = getCacheKey ? getCacheKey.apply(this,  arguments) : arguments[0]\n\n      if (hasOwn(cache, key)) return cache[key]\n\n      const result = func.apply(this, arguments)\n\n      isNum(limit) && Object.keys(cache).length < limit\n        ? (cache[key] = result)\n        : (memorized.cache = { [key]: result })\n\n      return result\n    }\n\n    memorized.cache = {}\n    memorized.destroy = () => {\n      getCacheKey = undefined\n      memorized.cache = undefined\n      memorized.destroy = undefined\n      memorized = undefined\n    }\n\n    return memorized\n}\n", "/** @module number */\n\n/**\n * Returns the result of evaluation `num` modulo `divisor`.\n * Javascript's built-in modulo (%) operator does not process values\n * correctly when they are negative. This works properly with \n * negatives numbers.\n * @function\n * @param {number} num \n * @param {number} divisor \n * @return {number?} the modulo result. Should be equivalent to\n * return values from the `%` operator, except with negative `num` values.\n * @example\n * -1 % 10      // -1\n * mod(-1, 10)  // 9\n */\nexport const mod = (num, divisor) => {\n  return ((num % divisor) + divisor) % divisor \n}", "/** @module number */\n\nimport { equalsNaN } from './equalsNaN'\nimport { isNum } from './isNum'\nimport { getNums } from './getNums'\nimport { toNum } from './toNum'\n\n/**\n * Finds the number ext base on the passed in number.\n * @example\n * nth(1)\n * // Returns 'st'\n * @example\n * nth(2)\n * // Returns 'nd'\n * @example\n * nth(5)\n * // Returns 'th'\n * @function\n * @param {number} num - value to check\n * @return {string} ext of the number\n */\nexport const nth = num => {\n\n  if(!isNum(num)){\n    num = getNums(num)\n    if(!num) return ''\n    num = toNum(num)\n    if(equalsNaN(num)) return ''\n  }\n\n  const mod = (num % 100)\n  if (mod >= 10 && mod <= 20)\n    return 'th'\n\n  switch(num % 10) {\n    case 1:\n      return 'st'\n    case 2:\n      return 'nd'\n    case 3:\n      return 'rd'\n    default:\n      return 'th'\n  }\n}\n", "/** @module url */\n\nimport { reduceObj } from '../object/reduceObj'\nimport { isStr } from '../string/isStr'\nimport { isNum } from '../number/isNum'\nimport { isBool } from '../boolean/isBool'\nimport { isColl } from '../collection/isColl'\nimport { isArr } from '../array/isArr'\n\n/**\n * Converts the input object to url querystring\n * @param {Object} obj - object with kvp to convert into a querystring\n * @function\n * @returns {String} querystring\n */\nexport const objToQuery = obj => {\n  let firstSet\n  return reduceObj(obj, (key, value, urlStr) => {\n    if(!value) return urlStr\n\n    const useVal = isStr(value) || isNum(value) || isBool(value)\n      ? value \n      : isColl(value)\n        ? isArr(value) \n          ? value.join(',') \n          : JSON.stringify(value)\n        : null\n    \n    if(!useVal) return urlStr\n\n    urlStr = !firstSet\n      ? `?${encodeURIComponent(key)}=${encodeURIComponent(useVal)}`\n      : `${urlStr}&${encodeURIComponent(key)}=${encodeURIComponent(useVal)}`\n    firstSet = true\n\n    return urlStr\n  }, '')\n}\n", "/** @module object */\n\nimport { isObj } from './isObj'\nimport { reduceObj } from './reduceObj'\n\n/**\n * Creates a new object from passed in object with keys not defined from array.\n * @function\n * @param {Object} target - object to pull keys from\n * @param {Array} keys - keys to not add to new object\n * @return {Object} new object with only keys not in array\n */\nexport const omitKeys = (obj = {}, keys = []) => (\n  isObj(obj) && reduceObj(obj, (key, _, updated) => {\n      keys.indexOf(key) === -1 && (updated[key] = obj[key])\n\n      return updated\n    }, {}) || {}\n)\n", "/** @module array */\n\nimport { isNonNegative } from '../number/isNonNegative'\nimport { validate } from '../validation'\nimport { isArr } from './isArr'\n\n/**\n * Returns a new array with the same elements as arr, excluding `count` elements beginning at index `startIndex`\n * @function\n * @param {Array} arr \n * @param {Number} startIndex \n * @param {Number} count \n */\nexport const omitRange = (arr, startIndex, count) => {\n  const [ inputIsValid ] = validate(\n    { arr, startIndex, count },\n    { arr: isArr, $default: isNonNegative }\n  )\n\n  if (!inputIsValid) return arr\n\n  const nextArr = [ ...arr ]\n\n  nextArr.splice(startIndex, count)\n\n  return nextArr\n}\n", "/** @module functions */\n\nimport { isStr } from '../string/isStr'\nimport { isObj } from '../object/isObj'\nimport { isEmpty } from '../ext/isEmpty'\n\n/**\n * @function\n * Extracts the message from the exception, whether string\n * or object\n * @param {*} exception \n * @return {string?} - the message or null if no message is present\n * @example \n * try {\n *   throwSomeException()\n * }\n * catch (err) {\n *   const message = parseErrorMessage(err) || 'Error'\n * }\n */\nexport const parseErrorMessage = exception => {\n  return isStr(exception) && !isEmpty(exception)\n    ? exception\n    : isObj(exception)\n      ? exception.message\n      : null\n}", "/** @module string */\n\n/**\n * Convert JSON string into object, wrapped in a try / catch.\n * @function\n * @param {string} string\n * @return {Object} - JSON object\n */\nexport const parseJSON = (str, logErr=true) => {\n  try {\n    return JSON.parse(str)\n  }\n  catch (e){\n    logErr && console.error(e.message)\n    return null\n  }\n}\n", "/** @module object */\n\nimport { isObj } from './isObj'\n\n/**\n * Creates a new object from passed in object with keys defined from array.\n * @function\n * @param {Object} target - object to pull keys from\n * @param {Array} keys - keys to add to new object\n * @return {Object} new object with only keys from passed in keys array\n */\nexport const pickKeys = (obj = {}, keys = []) => (\n  isObj(obj) && keys.reduce((updated, key) => {\n    key in obj && (updated[key] = obj[key])\n\n    return updated\n  }, {}) || {}\n)\n", "/** @module string */\n\n/**\n * Adds an `s` to the end of a string, if one does not exist.\n * @function\n * @param {string} str - string to convert\n * @return {string} string as a plural\n */\nexport const plural = str => {\n  if (!str || !str.length) return str\n  return str[str.length - 1] !== 's' ? str + 's' : str\n}\n", "/** @module array */\n\nimport { isArr } from './isArr'\n\n/**\n * Randomly selects values from a passed in array.\n * @function\n * @example\n * randomArr([1,2,3], 1)\n * // Returns an array with one of the values in the passed in array\n * @param {array} arr - array to select values from\n * @param {number} amount - number of values to select from the array\n * @return {array} - randomly sorted array\n */\nexport const randomArr = (arr, amount) => {\n  if(!isArr(arr)) return arr\n\n  const useAmount = amount || 1\n  const randoms = []\n  for (let i = 0; i < useAmount; i++) {\n    randoms.push(arr[Math.floor(Math.random() * arr.length)])\n  }\n\n  return !amount ? randoms[0] : randoms\n}\n", "/** @module array */\n\nimport { isArr } from './isArr'\n\n/**\n * Randomly sorts an arrays items.\n * @function\n * @example\n * randomizeArr([1,2,3])\n * // Returns an array randomly sorted\n * @param {array} arr - array to randomly sorted\n * @return {array} - randomly sorted array\n */\nexport const randomizeArr = arr => (\n  !isArr(arr) && arr || arr.sort(() => (0.5 - Math.random()))\n)", "/** @module collection */\n\nimport { isFunc } from '../method/isFunc'\nimport { isColl } from './isColl'\nimport { isArr } from '../array/isArr'\n\n/**\n * Loops over collection and calls reduce.\n * @example\n * reduceColl([1, 2, 3], (key, val, coll) => { console.log(key) }, {})\n * // Returns what ever is returned from the last iteration of the reduce loop\n * @function\n * @param {Object} obj - object loop over\n * @param {function} path - path that should be created on the object, separated by .\n * @param {*} reduce - starting data passed to reduce method\n * @return {Object} - last returned data from the loop\n */\nexport const reduceColl = (coll, cb, reduce) => (\n  isFunc(cb) && isColl(coll)\n    ? Object\n      .keys(coll)\n      .reduce((data, key) => cb(key, coll[key], coll, data), reduce)\n    : isArr(coll)\n      ? []\n      : {}\n)\n", "/** @module collection */\n\nimport { deepClone } from './deepClone'\nimport { isFunc } from '../method/isFunc'\nimport { isNum } from '../number/isNum'\n\n/**\n * Returns an array composed of element repeated \"times\" times. If element is a function, it will be called.\n * <br> Note: if you simply want to run a function some number of times, without returning an array of its results, @see Method.doIt\n * @param {*} element - a value or a function. If it is a function, repeat will call it each repeated time\n * @param {number} times - number of times that element should be included/called for the resulting array. Anything less than or equal to 0, or not a number, will return an empty array.\n * @function\n * @param {boolean} cloneDeep - if true, it will deeply clone the element for every instance in the resulting array \n * @returns an array of repeated elements or results from the function call\n * @example repeat(1, 3) // returns [1, 1, 1]\n * @example repeat(() => 2 * 2, 3) // returns [4, 4, 4]\n */\nexport const repeat = (element, times, cloneDeep=false) => {\n  if (!times || times <= 0) return []\n  if (!isNum(times)) {\n    console.error(\"Times argument must be a number\")\n    return []\n  }\n  const arr = []\n  for (let i = 0; i < times; i++) {\n    const value = isFunc(element)\n      ? element() \n      : cloneDeep\n        ? deepClone(element)\n        : element\n    arr.push(value)\n  }\n  return arr\n}\n", "/** @module functions */\n\nimport { validate } from '../validation/validate'\nimport { isArr } from '../array/isArr'\nimport { isFunc } from './isFunc'\nimport { deepClone } from '../collection/deepClone'\n\n/**\n* Calls each promise-returning function in array `asyncFns`,\n* but awaits each before calling the next. Will pass the\n* index and resolved values of complete functions to each subsequent\n* function, in case any need them.\n* @function\n* @param {Array<Function>} asyncFns - array of functions to call in sequence. \n* Each will be passed (currentIndex, resultsSoFar)\n* @param {boolean?} [options.cloneResults=false] - if true, each function will be\n* passed a deep clone of the results array, rather than the reference to it.\n* @param {boolean?} [options.returnOriginal=true] - if true, any member of asyncFns that \n* is not a function will have its corresponding value in the return array be itself. \n* If this is false, that value will be undefined.\n* @return {Promise<Array<*>>} - returns a promise that resolves to an array of all the \n* asyncFns' return values \n* @example\n* const results = await runSeq(asyncFunctions)\n* @example\n* const results = await runSeq(asyncFunctions, { cloneResults: true, returnOriginal: false })\n*/\nexport const runSeq = async (asyncFns=[], options={}) => {\n  const [ valid ] = validate({ asyncFns }, { asyncFns: isArr })\n  if (!valid) return []\n\n  const { \n    cloneResults=false, \n    returnOriginal=true\n  } = options\n\n  const results = []\n\n  for (const fn of asyncFns) {\n    const result = isFunc(fn) \n      ? await fn(results.length, cloneResults ? deepClone(results) : results)\n      : returnOriginal ? fn : undefined\n    results.push(result)\n  }\n\n  return results\n}\n", "/** @module object */\n\nimport { sanitize } from '../string/sanitize'\n\n/**\n * Sanitizes all html strings in an object's properties.\n * @function\n * @param {Object} obj to be sanitize\n * @return {Object} - obj with strings sanitized\n */\nexport const sanitizeCopy = obj => JSON.parse(sanitize(JSON.stringify(obj)))\n", "/** @module collection */\n\nimport { get } from './get'\nimport { isArr } from '../array/isArr'\nimport { isNum } from '../number/isNum'\nimport { isStr } from '../string/isStr'\nimport { isColl } from './isColl'\n\n/**\n * Compares a collection's keys / values with another collections keys / values\n * @example\n * shallowEqual({ foo: 'bar' }, { foo: 'bar' })\n * // Returns true\n * @example\n * shallowEqual({ foo: 'bar', baz: {} }, { foo: 'bar', baz: {} })\n * // Returns false, because the baz values are different objects\n * @example\n * // Works with array too\n * shallowEqual([ 1, 2 ], [ 1, 2 ])\n * // Returns true\n * @example\n * shallowEqual([{ foo: 'bar' }], [{ foo: 'bar' }])\n * // Returns false, because the objects in index 0 are different\n * @example\n * // Pass a path to compare instead of the root\n * shallowEqual({ foo: { bar: { baz: 'biz' }}}, { foo: { bar: { baz: 'biz' }}}, 'foo.bar')\n * // Returns true, because the bar object is compared\n * @function\n * @param {Object|Array} col1 - Collection to compare\n * @param {Object|Array} col2 - Collection to compare\n * @param {Array|string} path - path of object to compare. Uses the get method to find the path\n *\n * @returns {boolean} - true or false if the objects keys values are equal\n */\nexport const shallowEqual = (col1, col2, path) => {\n\n  // If a path is passed in, update the collections to be that path\n  if(path && (isArr(path) || isStr(path))){\n    col1 = get(col1, path)\n    col2 = get(col2, path)\n  }\n  \n  // If the objects are the same, so return true\n  if(col1 === col2) return true\n\n  // Ensure the objects exist, and they have keys we can compare\n  if (!col1 || !isColl(col1) || !col2 || !isColl(col2))\n    return false\n\n  // If they have different key lengths, then they are not equal\n  if (Object.keys(col1).length !== Object.keys(col2).length) return false\n  \n  // Loop the keys, and ensure the other collection has the key and it's value is the same\n  for (const key in col1)\n    if (col1[key] !== col2[key]) return false\n\n  // Keys and values are equal, so return true\n  return true\n}", "/** @module string */\n\n/**\n * Remove an `s` at the end of a string, if the last char is an `s`,\n * @function\n * @param {string} str - string to convert\n * @return {string} string as singular\n */\nexport const singular = str => {\n  if (!str || !str.length) return str\n  return str[str.length - 1] === 's'\n    ? str.slice(0, str.length - 1)\n    : str\n}\n\n", "/** @module string */\n\nimport { delimitString } from './delimitString'\n\n/**\n * Converts a string to snake_case.\n * @function\n * @param {string} str to be converted\n * @example\n *  snakeCase('fooBar') // returns 'foo_bar'\n * @returns the string in snake_case, or the input if it is not a string\n */\nexport const snakeCase = (str) => {\n  const underscored = delimitString(str, '_')\n  return underscored.toLowerCase()\n}\n", "/** @module object */\n\nimport { isFunc } from '../method/isFunc'\nimport { pipeline } from '../method/pipeline'\nimport { isObj } from './isObj'\n\n/**\n * Like \"some\" for arrays, but operates across each entry in obj\n * @function\n * @param {Object} obj \n * @param {Function} predicate of form (key, value) => boolean. Returns true or false for the entry\n * @returns boolean indicating that at least one entry satisfied the predicate or not\n */\nexport const someEntry = (obj, predicate) => {\n  if (!obj) {\n    console.error(`someEntry expects argument obj [${obj}] to be defined.`)\n    return false\n  }\n\n  if (!isObj(obj)) {\n    console.error(`Argument obj ${obj} must be an object.`)\n    return false\n  }\n\n  if (!isFunc(predicate)) {\n    console.error(`Argument 'predicate' passed into someEntry must a function. Found: ${predicate}`)\n    return false\n  }\n\n  return pipeline(\n    obj,\n    Object.entries,\n    entries => entries.some(([key, value]) => predicate(key, value))\n  )\n}", "/** @module string */\n\nimport { isStr } from './isStr'\nimport { isArr } from '../array/isArr'\n\n/**\n * Joins strings and array of string together with spaces\n * @param {string} original - The default string that other strings get added to\n * @param {string|Array} toAdd - String of Array of Strings to add to the original\n *\n * @returns {string} Joined strings seperated by space\n */\nexport const spaceJoin = (original, toAdd) => {\n  toAdd = isArr(toAdd) ? toAdd : [ toAdd ]\n  return toAdd.reduce((joined, item) => {\n    return isStr(item)\n      ? `${ joined ? joined + ' ' : '' }${ item }`.trim()\n      : joined\n  }, isStr(original) ? original : '')\n}", "/** @module object */\n\nimport { isObj } from './isObj'\nimport { exists } from '../ext/exists'\nimport { toStr } from '../string/toStr'\nimport { reduceObj } from './reduceObj'\nimport { ensureArr } from '../array/ensureArr'\n\n\n/**\n * Creates an intersection of the passed in object, based on the passed in keys\n * @function\n * @param {Object} target - object to pull keys from\n * @param {Array} keys - keys to not add to new object\n * @example\n * const [matching, nonMatching] = splitByKeys({ 1: 'match', 2: 'non-matching' }, [ 1 ])\n * matching === { 1: 'match' } === true\n * nonMatching === { 2: 'non-matching' }  === true\n *\n * @return {Array<Object>} - First object contains keys matching keys of the keys argument\n*                          - Second object contains keys not matching keys of the keys argument\n */\nexport const splitByKeys = (obj = {}, keys) => {\n  if(!keys) return [{}, {...obj}]\n\n  const intersect = [{}, {}]\n  const compareKeys = ensureArr(keys)\n\n  return isObj(obj)\n    ? reduceObj(obj, (key, _, updated) => {\n        exists(compareKeys.find(k => exists(k) && (toStr(k) === key)))\n          ? (updated[0][key] = obj[key])\n          : (updated[1][key] = obj[key])\n\n        return updated\n      }, intersect)\n    : intersect\n}\n", "/** @module string */\n\nimport { isStr } from './isStr'\nimport { camelCase } from './camelCase'\n\n/**\n * Converts a string to css in js format.\n * Useful for converting css rules into js format, I.E. margin-top => marginTop.\n * @function\n * @param {string} str - string to be converted\n * @return {string} - string in style case format\n */\nexport const styleCase = str => {\n  if(!isStr(str)) return str\n\n  const cased = camelCase(str)\n  return `${cased[0].toLowerCase()}${cased.slice(1)}`\n}\n", "/** @module functions */\n\n/**\n * Throttle function calls to only execute once over a wait period\n * @example\n * throttle(() => console.log('throttled'), 50)()\n * @function\n * @param {*} func - method to call after wait\n * @param {number} [wait=100] time to wait between calls\n * @return {function} throttled function\n */\nexport const throttle = (func, wait = 100) => {\n  let waiting = false\n  return function(...args){\n    if (waiting) return\n    waiting = true\n    func.apply(this, args)\n    return setTimeout(() => {\n      waiting = false\n    }, wait)\n  }\n}\n", "/** @module functions */\n\n/**\n * Ensures the last call to the throttled function get called.\n * <br> Will wait the allotted time, before calling the last call to it.\n * <br> The final call will not execute until no more calls are made,\n * <br> Accepts a callback to call each time the throttle called,\n * @example\n * throttleLast(() => {}, () => {})()\n * // throttle function\n * @function\n * @param {function} func - method to call after wait\n * @param {function} cb - method to call after throttle function is called\n * @param {number} [wait=100] time to wait until executing func param\n * @return {function} throttled function\n */\nexport const throttleLast = (func, cb, wait = 100) => {\n  let throttleTimeout\n  return function(...args) {\n    // If the throttle already exists clear it, and create it again\n    if (throttleTimeout) clearTimeout(throttleTimeout)\n    // Store a reference to the timeout\n    // Will wait the allotted time until calling the final call to it\n    throttleTimeout = setTimeout(() => {\n      func.apply(this, args)\n      clearTimeout(throttleTimeout)\n    }, wait)\n    typeof cb === 'function' && cb()\n  }\n}\n", "/** @module functions */\n\nimport { validate } from '../validation/validate'\nimport { isFunc } from './isFunc'\n\n/**\n * Executes and times the function `fn`.\n * @function\n * @param {Function} fn \n * @param {...*?} args - any number of arguments to pass to fn when it is called\n * @return {Promise<Array<*, number>>} [ fn output, execution time in ms ]\n * @example\n * const [ result, executionTime ] = timedRun(() => http.get(url)))\n * @example\n * const [ result, executionTime ] = timedRun(http.get, url)\n */\nexport const timedRun = async (fn, ...args) => {\n  const [ valid ] = validate({ fn }, { fn: isFunc })\n  if (!valid) return [ undefined, -1 ]\n\n  const startTime = new Date()\n  const result = await fn(...args)\n  return [\n    result,\n    new Date() - startTime\n  ]\n}\n", "/** @module number */\n\nimport { equalsNaN } from './equalsNaN'\nimport { isNum } from './isNum'\nimport { getNums } from './getNums'\n\n/**\n * Converts passed in value to a float.\n * @example\n * toFloat('1.34')\n * // Returns 1.34\n* @example\n * toFloat(NaN)\n * // Returns 0\n * @function\n * @param {*} val - value to convert\n * @return {number} value converted to an float\n */\nexport const toFloat = val => (\n  val &&\n    !equalsNaN(val) &&\n    parseFloat( isNum(val) && val || getNums(val) ) ||\n    0\n)\n", "/** @module number */\n\nimport { equalsNaN } from './equalsNaN'\nimport { isNum } from './isNum'\nimport { getNums } from './getNums'\n\n/**\n * Converts passed in value to an integer.\n * @example\n * toInt('1')\n * // Returns 1\n * @example\n * toInt(NaN)\n * // Returns 0\n * @function\n * @param {*} val - value to convert\n * @return {number} value converted to a integer\n */\nexport const toInt = val => (\n  val &&\n    !equalsNaN(val) && \n    parseInt( isNum(val) && val || getNums(val) ) ||\n    0\n)\n", "/** @module object */\n\nimport { isStr } from '../string/isStr'\nimport { isArr } from '../array/isArr'\nimport { strToType } from '../ext/strToType'\n\n/**\n * Converts an array or string into an object.\n * @function\n * @param { array | string } val - to be converted to object\n * @param {string} divider - if string, what divides key from value\n * @param {string} split - if string, what splits each key/value pair\n * @return {Object} - converted object \n */\nexport const toObj = (val, divider, split) => {\n  if(isArr(val))\n    return Object.keys(val)\n      .reduce((obj, key) => {\n        obj[key] = val[key]\n\n        return obj\n      }, {})\n\n  if(!isStr(str)) return {}\n\n  divider = divider || '='\n  split = split || '&'\n  return str\n    .split(split)\n    .reduce((obj, item) => {\n      const sep = item.split(divider)\n      obj[sep[0].trim()] = strToType(sep[1].trim())\n\n      return obj\n    }, {})\n}\n", "/** @module string */\n\nimport { isStr } from './isStr'\n\n/**\n * Converts a string to train case, I.E. marginTop => margin-top.\n * @function\n * @param {string} string to be converted\n * @return {string} - string in train case format\n */\nexport const trainCase = str => (\n  isStr(str) && str\n    .split(/(?=[A-Z])|[\\s_-]/gm)\n    .join('-')\n    .toLowerCase() || str\n)\n", "/** @module object */\n\nimport { isStr } from '../string/isStr'\n\n/**\n * Trims objects string fields.\n * @function\n * @param {Object} object\n * @return {Object} - object with string fields trimmed\n */\nexport const trimStringFields = object => (\n  Object\n    .entries(object)\n    .reduce((cleaned, [ key, value ]) => {\n      cleaned[key] = isStr(value) ? value.trim() : value\n      return cleaned\n    }, object)\n)\n", "/** @module collection */\n\nimport { updateColl } from './updateColl'\n\n/**\n * Removes a path from an object.\n * @example\n * unset(obj, 'foo.bar')\n * // Returns the passed in obj, with the value of bar set to undefined\n * @function\n * @param {Object} obj - object to have the attribute removed\n * @param {string|array} path - path of attribute to be removed, separated by string\n * @return the passed in object, with the attribute found at the path removed\n */\nexport const unset = (obj, path) => updateColl(obj, path, 'unset')\n", "\n\n/**\n * checks whether a given string is a valid filename\n * @param {string} fileName \n * \n * @returns {Boolean}\n */\nexport const validFilename = (fileName) => {\n  if (!fileName) return false\n  // On Unix-like systems '/' is reserved \n  // and <>:\"/\\|?* as well as non-printable characters \\u0000-\\u001F on Windows\n  const regex = /[<>:\"/\\\\|?*\\u0000-\\u001F]/g\n\n  // invalid Windows filenames\n  const windowsRegex = /^(con|prn|aux|nul|com\\d|lpt\\d)$/i\n\n  // starts with period \n  const periodRegex = /^\\.\\.?$/\n\n  return regex.test(fileName) || windowsRegex.test(fileName) || periodRegex.test(fileName)\n    ? false\n    : true\n}", "/** @module promise */\n\n'use strict'\n\n/**\n * Stops execution for a given amount of time\n * @function\n * @param {number} time - Amount of time to wait\n * @return { void }\n */\nexport const wait = time => (new Promise(res => setTimeout(() => res(true), time)))", "/** @module string */\n\nimport { isStr } from './isStr'\nimport { cleanStr } from './cleanStr'\nimport { capitalize } from './capitalize'\n\n/**\n * Converts all words in a string to be capitalized.\n * @function\n * @param {string} string to be converted\n * @return {string} - string with all words capitalized\n */\nexport const wordCaps = str => {\n  if (!isStr(str)) return str\n  let cleaned = cleanStr(str)\n  return cleaned\n    .split(' ')\n    .map(word => word && capitalize(word) || '')\n    .join(' ')\n}\n", "export * from './parkin'\n", "import { deepFreeze } from '@keg-hub/jsutils'\n\nexport const constants = deepFreeze({\n  ALIAS_REF: `$$`,\n  ALIAS_WORLD_KEY: `$alias`,\n  ALIAS_REF_AT_RUNTIME: `$$:`,\n  REGEX_VARIANT: 'regex',\n  WORLD_REF: `$`,\n  WORLD_KEY: `$world`,\n  WORLD_AT_RUNTIME: `$:`,\n  EXPRESSION_VARIANT: 'expression',\n  STEP_TYPES: [ 'given', 'when', 'then', 'and', 'but' ],\n  HOOK_TYPES: [ 'beforeAll', 'afterAll', 'beforeEach', 'afterEach' ],\n  FEATURE_META: [ 'feature', 'perspective', 'desire', 'reason', 'comments' ],\n  LOG_JEST_SPEC_ENV: `PARKIN_LOG_JEST_SPEC`,\n  SPEC_RESULT_LOG: `------- PARKIN SPEC RESULT LOG -------`,\n})\n", "import { TStepDef } from '../types'\nimport { joinRegex } from '@keg-hub/jsutils'\nimport { getRegexParts } from './regex'\n\nimport {\n  RX_INT,\n  RX_FLOAT,\n  RX_SINGLE_QUOTED,\n  RX_DOUBLE_QUOTED,\n  RX_PARAMETER,\n} from './patterns'\n\nexport type TMatchTokens = {\n  type:string\n  match:string\n  index:number\n  defIndex:number\n}\n\n// @ts-ignore\nconst tokenRegex = joinRegex(\n  RX_INT,\n  // @ts-ignore\n  RX_FLOAT,\n  RX_PARAMETER,\n  RX_DOUBLE_QUOTED,\n  RX_SINGLE_QUOTED,\n  'g'\n) as RegExp\n\nexport const tokenizeStep = (step:string, def:TStepDef) => {\n  const parts = getRegexParts(def.match as string)\n\n  const tokens:TMatchTokens[] = []\n\n  let match:RegExpExecArray\n  let idx:number=0\n  while((match = tokenRegex.exec(step)) !== null) {\n    const [val, __, ...rest] = match\n    let type = rest.pop()\n    const part = parts[idx]\n\n    const trimmed = val.trimStart()\n    const diff = val.length - trimmed.length\n\n    tokens.push({\n      match: val.trim(),\n      defIndex: part?.index,\n      index: match.index + diff,\n      type: type || part?.paramType || `any`,\n    })\n    idx++\n  }\n\n  return tokens\n}\n", "import { noOpObj, getWordEndingAt } from '@keg-hub/jsutils'\nimport { getParamTypes } from './paramTypes'\n\nimport { RX_OPTIONAL, RX_ALT, RX_PARAMETER, RX_MATCH_REPLACE } from './patterns'\n\n/**\n * Finds a matching definition from passed in regex\n * Then extracts the variables from the text to pass to the definitions method\n * @function\n * @public\n * @export\n * @param {Object} definition - Registered definition model\n * @param {string} text - Feature step text to compare with definition match text\n *\n * @returns {Object} Found matching definition and matched arguments\n */\nexport const matchRegex = (definition, text) => {\n  const match = text.match(new RegExp(definition.match))\n\n  // Which is the original string\n  return match\n    ? { definition, match: match.slice(1, match.length).filter(Boolean) }\n    : noOpObj\n}\n\n/**\n * Converts an optional expression into regex\n * @param {string} optional\n * @return {string} regex for an optional cucumber-expression\n * @example\n * toAlternateRegex('test(s)')\n * result: '(test|tests)'\n */\nexport const toAlternateRegex = optional => {\n  const split = optional.split(/(\\(|\\))/)\n\n  const [ start, , middle, , end ] = split\n\n  // no words outside of optional boundary\n  if (start === '' && end === '') return optional + '?'\n  else if (start === '') return `(${middle}|${middle}${end})`\n  else if (end === '') return `(${start}|${start}${middle})`\n  else return `(${start}${end}|${start}${middle}${end})`\n}\n\n/**\n * Gets the full text around an optional\n * @param {Array<string>} match result of optional regex match\n */\nconst getFullOptionalText = match => {\n  const text = match.input\n  const precedingWord = getWordEndingAt(text, match.index)\n  return precedingWord + match[0]\n}\n\n/**\n * Helper for `getParamRegex` to get the optional types regex\n * @param {Array<string>} match result of optional regex match\n *\n * @return {string} - The correct regex source text for a definition optional part\n *                    This regex will be used for matching values in the feature step text\n */\nconst getOptionalRegex = match => {\n  const optionalText = getFullOptionalText(match)\n  return toAlternateRegex(optionalText)\n}\n\n/**\n * Returns regex source for a given parameter type\n * @param {string} type - cucumber-expression parameter type: float, int, word, or string\n * @return {string} regex source text\n */\nexport const getParamRegex = type => {\n  const params = getParamTypes()\n  const spec = params[type] || params.any\n  return spec.regex.source\n}\n\n/**\n * Gets the right regex for an alternate part\n * @param {string} value the regex match's text\n * @return {string} regex source for an alternate part\n */\nexport const getAlternateRegex = value => {\n  return `(${value.trim().replace(/\\//g, '|')})`\n}\n\n/**\n * Helper for `parseMatch` that gets the right regex for a step's dynamic content\n * @param {string} type - optional, alternate, or parameter\n * @param {string} match = regex match results\n *\n * @returns {Object|null} - RegEx object if the type matches\n */\nconst getMatchRegex = (type, match) => {\n  const [ val, paramType ] = match\n\n  switch (type) {\n  case 'parameter':\n    return new RegExp(getParamRegex(paramType))\n  case 'optional':\n    return new RegExp(getOptionalRegex(match))\n  case 'alternate':\n    return new RegExp(getAlternateRegex(val))\n  default:\n    return null\n  }\n}\n\n/**\n * Formats the regex match result into an object,\n * with some computed values\n * @param {Array} matchArr\n * @param {string} type\n *\n * @returns {Object} - Formatted dynamic step parameter as a metadata object\n */\nconst parseMatch = (matchArr, type = 'other') => {\n  const val = matchArr[0]\n\n  // Get the real start index by removing the start white space\n  const trimmed = val.trimStart()\n\n  // Then calculate the difference and add it to the match index\n  const diff = val.length - trimmed.length\n\n  return {\n    text: val.trim(),\n    input: matchArr.input,\n    index: matchArr.index + diff,\n    regex: getMatchRegex(type, matchArr),\n    type,\n    ...(type === 'parameter' && {\n      paramType: val.trim().replace(RX_MATCH_REPLACE, ''),\n    }),\n  }\n}\n\n/**\n * Extracts all the dynamic parts to a definition's match text\n * @param {string} defMatcher - Registered definition match text\n * @return {Array<Object>} array of matches. See `parseMatch` for the structure.\n * @example\n * const parts = getRegexParts('I eat {int} apple(s)')\n * result:\n * [\n *  { type: 'parameter', text: '{int}', regex: /-?[0-9]+/, paramType: 'int', ... } ,\n *  { type: 'optional', text: 'apple(s)', regex: /(apple|apples)/, ... } ,\n * ]\n *\n * @returns {Array} - Sorted found dynamic content match the order from a features step text\n */\nexport const getRegexParts = defMatcher => {\n  const parameters = [\n    ...defMatcher.matchAll(new RegExp(RX_PARAMETER, 'gi')),\n  ].map(match => parseMatch(match, 'parameter'))\n\n  const optionals = [...defMatcher.matchAll(new RegExp(RX_OPTIONAL, 'gi'))].map(\n    match => parseMatch(match, 'optional')\n  )\n\n  const alts = [...defMatcher.matchAll(new RegExp(RX_ALT, 'gi'))].map(match =>\n    parseMatch(match, 'alternate')\n  )\n\n  // sort matched expressions by their index in the text\n  const sortedExpressions = [ ...parameters, ...optionals, ...alts ].sort(\n    (matchA, matchB) => matchA.index - matchB.index\n  )\n\n  return sortedExpressions\n}\n", "/*\n * Extracts keywords from a text string\n * @function\n * @private\n * @param {string} line - Text content to extract the keyword from\n * @param {Object} regex - Regex object used for finding a keyword\n * @param {number} index - Current inject of the line being parsed\n *\n * @returns {string} - Found keyword text from the line argument\n */\nexport const getRXMatch = (line, regex, index) => {\n  const matching = line.match(regex)[index]\n  return matching ? matching.trim() : ` `\n}\n\n/*\n * Sanitizes the passed in text and joins the texts length\n * @function\n * @export\n * @public\n * @param {string} text - Text to be sanitized\n * @param {number} index - Index of the line being sanitized\n *\n * @returns {string} - Sanitized text\n */\nexport const sanitizeForId = (text, index) => {\n  const cleaned =\n    text &&\n    text.trim() &&\n    text\n      .trim()\n      .toLowerCase()\n      .replace(/[\\s\\/\\\\\\(\\)\\+=_&%\\$#@!\\*~`\\|\\?:;\"'<>,.{}]/g, '-')\n\n  return cleaned ? `${cleaned}-${text.length}` : `${index}-${index.length}`\n}\n\n/**\n * Sanitize the step definition text to be used as the name\n * @function\n * @private\n * @param {Object} step - Parsed step definition object\n *\n * @returns {string} Sanitized string version of the step definition text\n */\nexport const sanitize = step => {\n  let name = step.match.toString()\n  name[0] === '/' && (name = name.substr(1))\n  name[0] === '^' && (name = name.substr(1))\n\n  name.charAt(name.length - 1) === '/' && (name = name.slice(0, -1))\n  name.charAt(name.length - 1) === '$' && (name = name.slice(0, -1))\n\n  return name.replace(/\\(\\?:([^\\|]+)+\\|+([^\\)]+)?\\)/, '$1')\n}\n\n/**\n * Ensures the definition does not already exist based on it's content\n * Also check the uuid, and updates it if needed\n * @function\n * @private\n * @param {Object} definition - Parsed definition object to be validated\n * @param {Array<Objects>} definitions - All definitions already loaded\n *\n * @returns {Object|boolean} - Returns the passed in definition or false if it already exists\n */\nexport const validateDefinition = (definition, definitions) => {\n  return definitions.reduce(\n    (validated, def) => {\n      if (!validated || def.content === validated.content) return false\n\n      def.uuid === validated.uuid &&\n        (validated.uuid = `${validated.uuid}-${validated.content.length}`)\n\n      return validated\n    },\n    { ...definition }\n  )\n}\n\n/**\n * Remove single and double quotes from a string's starting and ending\n * @param {string} arg - String containing single or double quotes at the start and end\n *\n * @returns {string} - Passed in arg string with start and end quotes removed\n */\nexport const removeQuotes = arg =>\n  arg\n    .trim()\n    .replace(/^(\"|')/, '')\n    .replace(/(\"|')$/, '')\n", "import { constants } from '../constants'\nimport { removeQuotes } from '../utils/helpers'\nimport {\n  get,\n  isObj,\n  noOpObj,\n  toStr,\n  exists,\n  isQuoted,\n  checkCall,\n  equalsNaN,\n  joinRegex,\n} from '@keg-hub/jsutils'\n\nimport {\n  RX_ANY,\n  RX_FLOAT,\n  RX_INT,\n  RX_DOUBLE_QUOTED,\n  RX_SINGLE_QUOTED,\n  RX_ALIAS,\n  RX_WORLD,\n} from './patterns'\n\nimport { throwParamTypeExists, throwMissingWorldValue } from '../utils/errors'\n\nconst { WORLD_KEY, ALIAS_WORLD_KEY, ALIAS_REF } = constants\n\n/**\n * Checks if the arg is a path to a value on the world object\n * If it is, it pulls the value from the world\n * @type {function}\n * @param {*} arg - Value to check if it's a world path\n * @param {object} $world - Parkin global world object\n *\n * @returns {*} Found value on the world object or undefined\n */\nconst checkWorldValue = (func, type) => {\n  return (arg, $world) => {\n    const hasWorldVal = arg.match(RX_WORLD)\n    const hasAliasVal = arg.match(RX_ALIAS)\n\n    // If not world value, just return func response\n    if (!isObj($world) || (!hasWorldVal && !hasAliasVal))\n      return matchType(func(arg), type)\n\n    // Try to pull from world object\n    const worldVal = hasWorldVal\n      ? get($world, removeQuotes(arg).replace(`${WORLD_KEY}.`, ''))\n      : get(\n        $world,\n        removeQuotes(arg).replace(`${ALIAS_REF}`, `${ALIAS_WORLD_KEY}.`)\n      )\n\n    // If has a wold value, then return world value else thrown an error\n    return exists(worldVal)\n      ? matchType(worldVal, type)\n      : hasWorldVal\n        ? throwMissingWorldValue(arg, $world)\n        : matchType(func(arg), type)\n  }\n}\n\n// Checks if the val matches the type\n// If matching, returns val, else return null\nconst matchType = (val, type) => {\n  return typeof val === type ? val : null\n}\n\n/**\n * Default param type model used when registering param types\n * @type {Object}\n */\nconst typeModel = {\n  name: '',\n  regex: '',\n  type: 'string',\n  useForSnippets: true,\n  preferForRegexpMatch: false,\n  transformer: checkWorldValue(arg => arg, 'string'),\n}\n\n/**\n * Maps param types to function, for type conversion\n * Follows the default conversions for cucumber expressions\n * See https://cucumber.io/docs/cucumber/cucumber-expressions/\n * @type {Object}\n */\nconst __paramTypes = {\n  any: {\n    ...typeModel,\n    name: 'any',\n    regex: RX_ANY,\n  },\n  word: {\n    ...typeModel,\n    name: 'word',\n    regex: RX_ANY,\n    transformer: checkWorldValue(arg => {\n      return !isQuoted(arg) ? toStr(arg) : undefined\n    }, typeModel.type),\n  },\n  float: {\n    ...typeModel,\n    name: 'float',\n    type: 'number',\n    regex: RX_FLOAT,\n    transformer: checkWorldValue(arg => {\n      const result = parseFloat(arg)\n      return equalsNaN(result) ? undefined : result\n    }, 'number'),\n  },\n  int: {\n    ...typeModel,\n    name: 'int',\n    type: 'number',\n    regex: RX_INT,\n    transformer: checkWorldValue(arg => {\n      const result = parseInt(arg)\n      return equalsNaN(result) || arg.includes('.') ? undefined : result\n    }, 'number'),\n  },\n  string: {\n    ...typeModel,\n    name: 'string',\n    regex: joinRegex(RX_DOUBLE_QUOTED, RX_SINGLE_QUOTED),\n    transformer: checkWorldValue(arg => {\n      return isQuoted(arg) ? removeQuotes(arg) : undefined\n    }, typeModel.type),\n  },\n}\n\n/**\n * Get the registered __paramTypes\n * @function\n * @public\n * @export\n *\n * @return {Object} Registered param types\n */\nexport const getParamTypes = () => __paramTypes\n\n/**\n * Register custom types following the typeModel object\n * See https://cucumber.io/docs/cucumber/cucumber-expressions/ for more info\n * Wraps the transformer method in the checkWorldValue HOF\n * @function\n * @public\n * @export\n *\n * @return {Object} Registered param types\n */\nexport const registerParamType = (model = noOpObj, key = model.name) => {\n  if (__paramTypes[key]) return throwParamTypeExists(key)\n\n  // Build the new type joining with the default\n  __paramTypes[key] = { ...typeModel, ...model }\n\n  // Wrap the transformer in the world value check helper\n  __paramTypes[key].transformer = checkWorldValue(\n    __paramTypes[key].transformer,\n    __paramTypes[key].type\n  )\n\n  return __paramTypes\n}\n\n/**\n * Converts the found matching values into the correct types\n * Using transformer methods of the matched paramType names\n * @function\n * @public\n * @export\n * @param {Array<string>} matches - All found dynamic arguments\n * @param {Array<function>} transformers - Matching paramTypes by index\n * @param {Object} $world - Global parkin world object\n *\n * @returns {Array<*>} Matches converted into the correct type\n */\nexport const convertTypes = (matches, transformers, $world) => {\n  return matches\n    .map((item, i) => {\n      const paramType = transformers[i] || __paramTypes.any\n      return checkCall(paramType.transformer, item, $world)\n    })\n    .filter(exists)\n}\n", "import { joinRegex } from '@keg-hub/jsutils'\n\nexport const RX_OPTIONAL = /\\w*\\([^)]*?\\)/\n\nexport const RX_ALT = /\\s*\\S*\\/\\S*\\s*/\n\nexport const RX_PARAMETER = /\\s*{(.*?)}\\s*/\n\n// @ts-ignore\nexport const RX_EXPRESSION = joinRegex(RX_PARAMETER, RX_OPTIONAL, 'g')\n\nexport const RX_ANY = /(.*)/\n\nexport const RX_MATCH_REPLACE = /{|}/g\n\nexport const RX_DOUBLE_QUOTED = /\"[^\"]+\"/\n\nexport const RX_SINGLE_QUOTED = /'[^']+'/\n\nexport const RX_FLOAT = /-?[0-9]+[.][0-9]+/\n\nexport const RX_INT = /-?[0-9]+/\n\nexport const RX_WORLD = /^[\"]?\\$world\\.\\S+[\"]?/\n\nexport const RX_WORLD_REPLACE = /^\\$world\\./\n\nexport const RX_WORLD_MATCH = /(\\$:world|\\$world)+\\.[^\"'\\s]*/gm\n\nexport const RX_ALIAS = /^[\"]?\\$\\$\\S+[\"]?/\n\nexport const RX_ALIAS_REPLACE = /^\\$\\$/\n\nexport const RX_ALIAS_MATCH = /(\\$\\$:\\w+|\\$\\$\\w+)[^\"'\\s]*/gm\n", "/*\n * Helper method to use the a test method can not be found on the global scope\n * @function\n * @public\n * @throws\n * @param {string} type - Name of test method to get from the global scope\n *\n * @returns {function} - Test method\n */\nexport const testMethodFill = type => {\n  /*\n   * Internal method that throws an error when a test method does not exist on the global scope\n   * @function\n   * @private\n   * @inner\n   *\n   * @returns {void}\n   */\n  return () => {\n    throw new Error(\n      `` +\n        `Test method ${type} does not exist on the global scope.\\n` +\n        `Please ensure ${type} exists before calling the run method!\\n`\n    )\n  }\n}\n\n/**\n * Throws an error when a Steps class instance is not passed to the runner class constructor\n * @function\n * @public\n * @throws\n *\n * @returns {void}\n */\nexport const throwMissingSteps = () => {\n  throw new Error(\n    `Runner class constructor requires an instance of the Steps class`\n  )\n}\n\n/**\n * Throws an error when a Hooks class instance is not passed to the runner class constructor\n * @function\n * @public\n * @throws\n *\n * @returns {void}\n */\nexport const throwMissingHooks = found => {\n  throw new Error(\n    `Runner class constructor requires an instance of the Hooks class. Found: ${found}`\n  )\n}\n\n/**\n * Throws an error when a feature text is not passed to the Runner class instance\n * @function\n * @public\n * @throws\n *\n * @returns {void}\n */\nexport const throwMissingFeatureText = () => {\n  throw new Error(\n    `Runner class requires feature text when calling the run method`\n  )\n}\n\n/**\n * Throws an error when a feature step does not match a step definition\n * @function\n * @public\n * @throws\n * @param {string} text - Text that does not match a registered step definition\n *\n * @returns {void}\n */\nexport const throwNoMatchingStep = text => {\n  throw new ReferenceError(text)\n}\n\n/**\n * Throws an error when a registering a param type that already exists\n * @function\n * @public\n * @throws\n * @param {string} name - Name of the param type that is being registered\n *\n * @returns {void}\n */\nexport const throwParamTypeExists = () => {\n  throw new Error(`Cannot register param type \"${name}\". It already exists!`)\n}\n\n/**\n * Throws an error when a assembling a parsed feature, and no parsed feature object exists\n * @function\n * @public\n * @throws\n * @param {*} feature - Argument that was passed instead of the parsed feature object\n *\n * @returns {void}\n */\nexport const throwFeatureNotAnObj = feature => {\n  throw new Error(\n    `Assemble feature requires an object matching the feature model spec!`,\n    feature\n  )\n}\n\n/**\n * Throws an error when a registering a param type that already exists\n * @function\n * @public\n * @throws\n * @param {string} name - Name of the param type that is being registered\n *\n * @returns {void}\n */\nexport const throwMissingWorldValue = (arg, world) => {\n  throw new Error(\n    `Can not replace ${arg} with value from $world, it does not exist on the world object`,\n    world,\n    arg\n  )\n}\n\n/**\n * Throws an error when a registering an invalid hook type\n * @function\n * @public\n * @throws\n * @param {string} hookTypes - List of allowed hook types\n * @param {string} type - Invalid hook type being registered\n *\n * @returns {void}\n */\nexport const throwInvalidHookType = (hookTypes, type) => {\n  throw new Error(\n    [\n      `Expected client hook type to be one of ', ${hookTypes}.`,\n      `Found: ${type}`,\n    ].join('\\n')\n  )\n}\n\n/**\n * Throws an error when running world replace on feature text content\n * @function\n * @public\n * @throws\n * @param {Object} err - Error that was thrown\n * @param {string} currentMatch - Current $world text that was matched\n */\nexport const throwWorldReplace = (err, currentMatch) => {\n  console.error(\n    `Error replacing $world value in feature text. Current match was ${currentMatch}`\n  )\n  throw err\n}\n\n/**\n * Throws an error when running world.alias replace on feature text content\n * @function\n * @public\n * @throws\n * @param {Object} err - Error that was thrown\n * @param {string} currentMatch - Current $world.$alias text that was matched\n */\nexport const throwAliasReplace = (err, currentMatch) => {\n  console.error(\n    `Error replacing $$alias ( $world.$alias ) in feature text. Current match was ${currentMatch}`\n  )\n  throw err\n}\n", "import type { TMatchResp, TStepDefsArr, TWorldConfig } from '../types'\n\nimport { constants } from '../constants'\nimport { tokenizeStep } from './tokens'\nimport { noOpObj } from '@keg-hub/jsutils'\nimport { matchRegex, getRegexParts } from './regex'\nimport { getParamTypes, registerParamType } from './paramTypes'\nimport { findAsRegex, extractParameters, matchExpression } from './expression'\n\nconst { REGEX_VARIANT } = constants\n\n/**\n * Class for accessing matcher methods and param types\n * <br/>Gives access to underlying matcher methods to be called directly\n */\nexport class Matcher {\n  find = matcher\n  regex = matchRegex\n  parts = getRegexParts\n  types = getParamTypes\n  stepTokens = tokenizeStep\n  extract = extractParameters\n  expression = matchExpression\n  expressionFind = findAsRegex\n  register = registerParamType\n}\n\n/**\n * Finds a matching registered definition from the passed in definitions and text\n * Treats all non-regex step variants as expressions\n * @function\n * @public\n */\nexport const matcher = (\n  definitions:TStepDefsArr,\n  text:string,\n  $world:TWorldConfig\n) => {\n  return definitions.reduce((found, definition) => {\n    return found.match || !definition.match\n      ? found as TMatchResp\n      : definition.variant !== REGEX_VARIANT\n        ? matchExpression(definition, text, $world) as TMatchResp\n        : matchRegex(definition, text) as TMatchResp\n  }, noOpObj as TMatchResp)\n}\n", "import { checkCall, noOpObj, noOp } from '@keg-hub/jsutils'\n\n/**\n * Helpers to ensure the right code is run in the right environments\n * @function\n * @export\n * @public\n *\n * @returns {Boolean} True if a global object exists\n */\nexport const hasWindow = Boolean(typeof window !== 'undefined')\nexport const hasGlobal = Boolean(typeof global !== 'undefined')\nexport const hasModule = Boolean(typeof module === 'object')\nexport const hasRequire = Boolean(typeof require === 'function')\nexport const hasJasmine = Boolean(\n  hasGlobal && typeof global.jasmine !== 'undefined'\n)\n\n/**\n * Resolve the jasmine object if it exists\n * @function\n * @export\n * @public\n *\n * @returns {Object} Resolved jasmine object with the getEnv property\n */\nexport const resolveJasmine = () =>\n  hasJasmine ? checkCall(() => global.jasmine) : { getEnv: () => noOpObj }\n\n/**\n * Resolve the module object if it exists\n * @function\n * @export\n * @public\n *\n * @returns {Object} Resolved module object with the exports property\n */\nexport const resolveModule = () =>\n  hasModule ? checkCall(() => module) : { exports: {} }\n\n/**\n * Resolve the require function if it exists\n * @function\n * @export\n * @public\n *\n * @returns {Object} Resolved module object with the exports property\n */\nexport const resolveRequire = () =>\n  hasRequire ? checkCall(() => require) : noOp\n\n/**\n * Resolve the global object based on if the window or global objects exit\n * @function\n * @export\n * @public\n *\n * @returns {Object} Resolved global object (window||global|noOpObj)\n */\nexport const resolveGlobalObj = () => {\n  try {\n    return hasWindow\n      ? checkCall(() => window)\n      : hasGlobal\n        ? checkCall(() => global)\n        : noOpObj\n  }\n  catch (err) {\n    return noOpObj\n  }\n}\n", "import {\n  matchRegex,\n  getRegexParts,\n  getParamRegex,\n  toAlternateRegex,\n  getAlternateRegex,\n} from './regex'\n\nimport {\n  RX_OPTIONAL,\n  RX_ALT,\n  RX_EXPRESSION,\n  RX_MATCH_REPLACE,\n  RX_PARAMETER,\n} from './patterns'\n\nimport { hasWindow } from '../utils/globalScope'\nimport { noOpObj, isFunc } from '@keg-hub/jsutils'\nimport { getParamTypes, convertTypes } from './paramTypes'\n\n/**\n * Escapes a string so it can be converted into a regular expression\n * Ensures special chars are escaped, a string with \".\" in it will be replaced with \"\\.\"\n * @function\n * @private\n * @param {string} str - Step match text to be escaped\n *\n * @return {string} Escaped string to allow converting into a regular expression\n */\nconst escapeStr = str => {\n  return hasWindow\n    ? str.replace(/[|\\\\[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d')\n    : str.replace(/[|\\\\[\\]^$+*?.]/g, '\\\\$&')\n}\n\n/**\n * Replace the passed in matcher string with the passed in replaceWith data based on the testRx\n * @function\n * @private\n * @param {string} match - Step match text from feature scenario\n * @param {string} testRx - Regular expression to find matching text within the matcher text\n * @param {string|function} replaceWith - Data to replace the matched data with\n *                                        Automatically called when it's function\n *\n * @return {string} match string with matched content replaced with regex\n */\nconst runRegexCheck = (matcher, testRx, replaceWith) => {\n  if (!testRx.test(matcher)) return matcher\n\n  // Set the default regex match\n  let regexStr = matcher\n  // Replace any expressions with regex, and convert the param types\n  matcher.replace(testRx, (...args) => {\n    const match = args[0].trim()\n    const [ start, ...end ] = regexStr.split(match)\n    const replace = isFunc(replaceWith) ? replaceWith(...args) : replaceWith\n    regexStr = `${start}${replace}${end.join(match)}`\n  })\n\n  return regexStr\n}\n\n/**\n * Find all expressions in the match string, and convert them into into regex\n * @function\n * @private\n * @param {string} match - Step match text from feature scenario\n *\n * @return {Object} { regex: match string with expression replaced, transformers: Array of transformer objects }\n */\nconst convertToRegex = match => {\n  const paramTypes = getParamTypes()\n  const transformers = []\n  const regex = runRegexCheck(match, RX_EXPRESSION, (val, ...args) => {\n    // Get the expression type\n    const type = val.trim().replace(RX_MATCH_REPLACE, '')\n    const isParameter = val.match(RX_PARAMETER)\n    const isOptional = val.match(RX_OPTIONAL)\n\n    // Add the transformer for the type to the transformers array\n    isParameter && transformers.push(paramTypes[type] || paramTypes.any)\n\n    // Return the regex\n    return isParameter\n      ? getParamRegex(type)\n      : isOptional\n        ? toAlternateRegex(val)\n        : val\n  })\n\n  return { regex, transformers }\n}\n\n/**\n * Find all alternate syntax in the match string, and convert them into into regex\n * @function\n * @private\n * @param {string} match - Step match text from feature scenario\n *\n * @return {string} match string with alternate syntax replaced\n */\nconst checkAlternative = match => {\n  const altIndexes = []\n  const regex = runRegexCheck(\n    match,\n    new RegExp(RX_ALT, 'g'),\n    // Use a non-capture group to allow matching, but don't include in the results (?:)\n    getAlternateRegex\n  )\n\n  return { regex, altIndexes }\n}\n\n/**\n * Adds regex anchors to the ends of the regex string, if it needs them\n * @param {string} str\n * @return {string} with anchors\n */\nconst checkAnchors = str => {\n  let final = str\n  if (!str.startsWith('^')) final = '^' + final\n  if (!str.endsWith('$')) final += '$'\n\n  return { regex: final }\n}\n\n/**\n * Extracts the dynamic gherkin-expression parameters from the text,\n * given the step matcher template and the fullMatchResults\n * @param {string} text\n * @param {RegExp} stepMatcher\n * @param {Array} wordMatches - matches for the {word} params\n */\nexport const extractParameters = (text, stepMatcher, wordMatches) => {\n  // Gets an array of each dynamic element of the step match text,\n  // including: params (e.g. {float}), optionals (e.g. test(s))\n  // and alternate text (e.g. required/optional)\n  const parts = getRegexParts(stepMatcher)\n  const expectedParamLength = parts.filter(\n    part => part.type === 'parameter'\n  ).length\n\n  // extract the params from the text, using the parts array\n  const result = parts.reduce(\n    (state, part) => {\n      const { params, textIndex, wordMatchIndex } = state\n\n      // look at the section of the text we haven't already evaluated\n      const substring = text.substring(textIndex)\n\n      const isWord = part.paramType === 'word'\n      const partMatch = substring.match(part.regex)\n      const wordMatch = {\n        0: wordMatches[wordMatchIndex],\n        index: substring.indexOf(wordMatches[wordMatchIndex]),\n      }\n\n      // if matching a param {word}, then use the wordMatch, because\n      // it contains all the {word} matches properly\n      const match = isWord ? wordMatch : partMatch\n      if (!match) return state\n\n      // add the matched parameter if the current part is a param and a match exists\n      part.type === 'parameter' && match && params.push(match[0])\n\n      return {\n        params,\n\n        // increment text index so that we don't reevaluate the same text in future iterations\n        textIndex: textIndex + (match && match.index + match[0].length),\n\n        // increment match index so we don't repeat a word in future iterations\n        wordMatchIndex: wordMatchIndex + (isWord && 1),\n      }\n    },\n    { params: [], textIndex: 0, wordMatchIndex: 0 }\n  )\n\n  return expectedParamLength === result.params.length ? result.params : null\n}\n\n/**\n * Converts the passed in definition.match string into regex\n * Then matches the passed in text string with the converted regex string\n * @function\n * @public\n * @export\n * @param {Object} definition - Registered definition\n * @param {string} text - Feature step text to compare with definition text\n *\n * @returns {Object} Found matching definition and regex variations\n */\nexport const findAsRegex = (definition, text) => {\n  const escaped = escapeStr(definition.match)\n  const { regex: regexAlts } = checkAlternative(escaped)\n  const { transformers, regex: regexConverted } = convertToRegex(regexAlts)\n  const { regex: regexAnchors } = checkAnchors(regexConverted)\n\n  // Then call the regex matcher to get the content\n  const found = matchRegex({ ...definition, match: regexAnchors }, text)\n\n  return {\n    found,\n    escaped,\n    regexAlts,\n    transformers,\n    regexAnchors,\n    regexConverted,\n  }\n}\n\n/**\n * Finds a matching definition from the passed in expression text\n * Then extracts the variables from the text to pass to the definitions method\n * Converts expression strings into regex then calls the matchRegex method\n * @function\n * @public\n * @export\n * @param {Object} definition - Registered definition\n * @param {string} text - Feature step text to compare with definition text\n *\n * @returns {Object} Found matching definition and matched arguments\n *  - form: { definition, match: Array of Arguments to pass to definitions function }\n */\nexport const matchExpression = (definition, text, $world) => {\n  // If it's an exact match, then no variables can exist\n  // So we can short circuit and return the definition\n  if (definition.match === text) return { definition, match: [] }\n\n  const { found, transformers } = findAsRegex(definition, text)\n\n  // If no found definition or match, return an empty object\n  if (!found || !found.definition || !found.match) return noOpObj\n\n  // get all the parameters, without any type coercion\n  const params = extractParameters(text, definition.match, found.match)\n  if (!params) return noOpObj\n\n  // Convert the found variables into their type based on the mapped transformers\n  const converted = convertTypes(params, transformers, $world)\n\n  // If the conversion fails, and no variable or not enough variables are returned,\n  // Then assume the type does not match, so the step does not match.\n  // Otherwise return the matched definition, and the converted variables\n  return converted.length !== params.length\n    ? noOpObj\n    : { definition, match: converted }\n}\n", "import { matcher } from './matcher'\nimport { constants } from './constants'\nimport { throwNoMatchingStep } from './utils/errors'\nimport { capitalize, eitherArr, isStr, noOpObj } from '@keg-hub/jsutils'\nimport {\n  resolveGlobalObj,\n  resolveModule,\n  resolveRequire,\n} from './utils/globalScope'\nimport { sanitizeForId, sanitize, validateDefinition } from './utils/helpers'\n\nconst { REGEX_VARIANT, EXPRESSION_VARIANT, STEP_TYPES } = constants\n\n/**\n * Builds the text content of a step definition call\n * @function\n * @private\n * @param {Object} step - Parsed step definition object\n * @param {string} step.type - Type of step definition this step belongs to\n * @param {string} step.match - Text used to match with a features step\n * @param {function} step.method - Called when a features step matches match property\n * @param {string} step.variant - Syntax used in the match property\n *\n * @returns {string} - Built text content of the step definition\n */\nconst getContent = step => {\n  const match =\n    step.variant === REGEX_VARIANT ? step.match.toString() : `\"${step.match}\"`\n\n  return `${capitalize(step.type)}(${match}, ${step.method.toString()})`\n}\n\n/**\n * Registers a step definition by type\n * @function\n * @private\n * @param {string} internalType - Internal references to the step definition type\n * @param {string} type - Type of step definition to search when matching\n * @param {string} match - Text used to match with a features step\n * @param {function} method - Called when a features step matches match property\n *\n * @returns {void}\n */\nconst registerFromCall = function (\n  internalType,\n  type,\n  match,\n  method,\n  meta = noOpObj\n) {\n  const definition = {\n    type,\n    meta,\n    match,\n    method,\n    // TODO: add token parsing\n    tokens: [],\n    variant:\n      match.toString().indexOf('/') === 0 ? REGEX_VARIANT : EXPRESSION_VARIANT,\n  }\n\n  definition.name = sanitize(definition)\n  // The name should always be unique, so we can use that as a consistent uuid\n  definition.uuid = sanitizeForId(`${type}-${definition.name}`)\n  definition.content = getContent(definition)\n\n  const definitions = this.list()\n  const newDefinition = validateDefinition(definition, definitions)\n\n  newDefinition && this[internalType].push(newDefinition)\n\n  return newDefinition\n}\n\n/**\n * Helper method to wrap the default register method of a step definition\n * Allows capturing the definition when it's registered\n * Contains only newly registered definitions, NOT all definitions\n * @function\n * @private\n * @param {Object} parent - Parent class to register the definitions to (Step class instance)\n * @param {string} type - Type of step definition to register\n * @param {Object} container - Holds the newly registered definitions\n *\n * @returns {function} - Method to register step definitions by type\n */\nconst tempRegister = (parent, type, container) => {\n  /**\n   * Captures a registered step definition and adds it the the container object\n   * @function\n   * @internal\n   * @param {string} match - Text used to matched with a features step\n   * @param {function} method - Called when a features step matches the text param\n   * @param {Object} meta - Object describing the functionality of the step definition\n   *\n   * @returns {Object} newly registered definition model\n   */\n  return (...args) => {\n    const definition = parent[type](...args)\n    container[type].push(definition)\n\n    return definition\n  }\n}\n\n/**\n * Registers a parsed step definition object\n * @function\n * @private\n * @param {Array|string} definitions - Array of strings or single string\n *                                     of the text content form a definition file\n *\n * @returns {void}\n */\nconst registerFromParse = function (definitions) {\n  // Ensures a consistent index due to being an array\n  const DEF_TYPES = this.types.map(type => capitalize(type))\n\n  // Build a container for holding the newly added definitions\n  // Looks like the object below\n  // { Given: [], When: [], Then: [], But: [], And: [] }\n  const container = DEF_TYPES.reduce((built, type) => {\n    built[type] = []\n    return built\n  }, {})\n\n  // Loop over the passed in definitions\n  eitherArr(definitions, [definitions]).map(definition => {\n    // Create a dynamic function calling the definition\n    // The definition should be a call to a global Given, When, Then methods\n    // Which is comes from the tempRegister method for each type\n    Function(`return (global, require, module, ${DEF_TYPES.join(',')}) => {\n          return (function(global) { ${definition} }).call(global, global)\n        }`)()(\n      // Pass in the global object so we can bind the dynamic function to it\n      // Allows referencing values on the global scope directly\n      // For example myGlobalFunction() instead of window.myGlobalFunction()\n      resolveGlobalObj(),\n      resolveRequire(),\n      resolveModule(),\n      // Call the tempRegister for each type,\n      // Then spread the response as arguments to the dynamic function\n      ...DEF_TYPES.map(type => tempRegister(this, type, container))\n    )\n  })\n\n  // Return the container which should now hold all newly registered definitions ONLY\n  return container\n}\n\n/**\n * Join all step types together into a single array\n * @function\n * @private\n * @param {Object} instance - Steps calls instance\n *\n * @returns {Array} - Joined steps\n */\nconst joinAllSteps = instance => {\n  return instance.types.reduce(\n    (stepDefs, type) => stepDefs.concat(instance[`_${type}`]),\n    []\n  )\n}\n\n/**\n * Allows registering step definition matchs and functions\n * Which are used to map to steps of a parsed feature file\n * @class\n * @public\n * @param {Object} world - Holds configuration for the running test environment\n *\n * @returns {Object} Instance of the Steps class\n */\nexport class Steps {\n  /**\n   * Allowed step definition types\n   * @memberof Steps\n   * @type {Array}\n   * @private\n   */\n  types = STEP_TYPES\n\n  constructor(world) {\n    this._world = world || {}\n    const self = this\n    /**\n     * Creates helpers for registering step definitions by type\n     * @memberof Steps\n     * @function\n     * @public\n     * @param {string} match - Text used to matched with a features step\n     * @param {function} method - Function called when a features step text matches the text param\n     * @example\n     * const steps = new Steps({})\n     * steps.Given(`text`, ()=> {})\n     *\n     * @returns {void}\n     */\n    this.types.map(type => {\n      const internalType = `_${type}`\n      this[internalType] = []\n      this[capitalize(type)] = (match, method, meta) => {\n        return self.register(internalType, type, match, method, meta)\n      }\n    })\n  }\n\n  /**\n   * Gets a list of all step definitions registered with the parkin instance\n   * @memberof Steps\n   * @function\n   * @public\n   *\n   * @returns {Array} - List of all registered step definitions\n   */\n  list = () => {\n    return joinAllSteps(this)\n  }\n\n  /**\n   * Gets a list of all step definitions registered with the parkin instance\n   * @memberof Steps\n   * @function\n   * @public\n   *\n   * @returns {Array} - List of all registered step definitions\n   */\n  typeList = () => {\n    return this.types.reduce((stepDefs, type) => {\n      const internalType = `_${type}`\n      stepDefs[internalType] = [...this[internalType]]\n      return stepDefs\n    }, {})\n  }\n\n  /**\n   * Finds a matching step definition from the passed in text\n   * Steps must be registered with this instance to be found\n   * @memberof Steps\n   * @function\n   * @public\n   * @param {string} text - Feature step text to compare with definition match text\n   *\n   * @returns {Object} - Contains a match property as an array of arguments\n   *                     And the definition property as the found registered definition\n   */\n  match = text => {\n    // Join all step types together when finding a match\n    // Cucumber treats all step definition types as the same when matching to step text\n    const list = this.list()\n\n    // Call the matcher to find a matching step definition\n    const found = matcher(list, text, this._world)\n\n    // If no matching step definition exists, then return false\n    if (!found.match || !found.definition) return false\n\n    // Add the Step instance's world to the match arguments\n    // Always added as the last argument\n    found.match.push(this._world)\n\n    return found\n  }\n\n  /**\n   * Finds a matching step definition from the passed in list and text can calls it\n   * This is the method the actually calls a step definition function\n   * @memberof Steps\n   * @function\n   * @public\n   * @param {Array<Object>} list - Group of registered step definition\n   * @param {string} text - Feature step text to compare with step definition text\n   *\n   * @returns {*} - Response from the step definition function\n   */\n  resolve = text => {\n    // Try to find a step definition match to the passed in text\n    const found = this.match(text)\n\n    // If found, call the step function passing the match array as arguments\n    // Otherwise throw a no match error\n    return found\n      ? found.definition.method(...found.match)\n      : throwNoMatchingStep(\n        `Matching definition could not be found for step: \"${text}\"`\n      )\n  }\n\n  /**\n   * Registers a step definition by type based on passed in args\n   * @memberof Steps\n   * @function\n   * @public\n   * @param {Array} args - All arguments passed to the method\n   * @param {string|Array|Object} args.0 - Type of step definition to search when matching\n   *                                        Or an array of parsed definition objects\n   *                                        Or a single parsed definition object\n   * @param {string} args.1 - Text used to matched with a features step\n   * @param {function} args.2 - Function called when a features step text matches the text param\n   *\n   * @returns {void}\n   */\n  register = (...args) => {\n    return isStr(args[0])\n      ? registerFromCall.apply(this, args)\n      : registerFromParse.apply(this, args)\n  }\n\n  /**\n   * Clears out all registered step definitions for all types\n   * @memberof Steps\n   * @function\n   * @public\n   *\n   * @returns {void}\n   */\n  clear = () => {\n    this.types.map(type => (this[`_${type}`] = []))\n  }\n}\n", "import { constants } from './constants'\nimport { isFunc, noPropArr, noOp } from '@keg-hub/jsutils'\nimport { throwInvalidHookType } from './utils/errors'\n\nconst { HOOK_TYPES } = constants\n\n/**\n * Allows registering hook functions, which are then called when\n * the runner runs a feature\n * @class\n * @public\n * @returns {Object} Instance of the Hooks class\n */\nexport class Hooks {\n  /**\n   * Allowed hook types\n   * @memberof Hooks\n   * @type {Array}\n   * @private\n   */\n  types = HOOK_TYPES\n\n  /**\n   * Parkin instance the hooks are tied to\n   * @memberof Hooks\n   * @type {Object}\n   * @private\n   */\n  instance = undefined\n\n  constructor(world, instance) {\n    this._registeredHooks = {}\n    this.instance = instance\n\n    /**\n     * Creates helpers for registering hooks\n     * @memberof Hooks\n     * @function\n     * @public\n     * @param {function} method - Function to be registered to the hook. They will be called when the runner runs a feature\n     * @example\n     * const hooks = new Hooks()\n     * hooks.beforeAll(() => setupEnvironment())\n     *\n     * @returns {void}\n     */\n    this.types.map(type => {\n      this[type] = clientHookFn => {\n        if (!isFunc(clientHookFn)) return\n        this._registeredHooks[type] = this._registeredHooks[type] || []\n        this._registeredHooks[type].push(clientHookFn)\n      }\n    })\n  }\n\n  /**\n   * @param {string} type\n   *\n   * @return {Function} A wrapper function that calls all the registered hooks in series\n   */\n  getRegistered = type => {\n    const foundHooks = this.types.includes(type)\n      ? this._registeredHooks[type] || noPropArr\n      : throwInvalidHookType(HOOK_TYPES.join(', '), type)\n\n    return foundHooks.length\n      ? async () => {\n        return foundHooks.reduce(async (toResolve, hook) => {\n          await toResolve\n          return await hook(this.instance)\n        }, Promise.resolve())\n      }\n      : noOp\n  }\n}\n", "import { sanitizeForId, getRXMatch } from '../utils/helpers'\n\nconst RX_GIVEN = /^\\s*Given (.*)$/\nconst RX_WHEN = /^\\s*When(.*)$/\nconst RX_THEN = /^\\s*Then (.*)$/\nconst RX_AND = /^\\s*And (.*)$/\nconst RX_BUT = /^\\s*But (.*)$/\nconst RX_ASTERISK = /^\\s*\\* (.*)$/\nconst RX_DOC_QUOTES = /^\\s*?\"\"\"\\s*?/\nconst RX_DOC_QUOTES_FULL = /^\\s*?\"\"\"(\\s*?|.*?)*?\"\"\"/gm\nconst RX_DOC_TICKS = /^\\s*?```\\s*?/\nconst RX_DOC_TICKS_FULL = /^\\s*?```(\\s*?|.*?)*?```/gm\nconst RX_DATA_TABLE = /^\\s*?\\|/\nconst RX_DATA_TABLE_FULL = /^\\s*?\\|([^\\S\\r\\n]*?|.*)\\|/gm\n\n/**\n * Regular expressions and types for matching step keywords\n * @type {Array}\n * @private\n */\nconst RegStepTags = [\n  { regex: RX_GIVEN, type: 'given' },\n  { regex: RX_WHEN, type: 'when' },\n  { regex: RX_THEN, type: 'then' },\n  { regex: RX_AND, type: 'and' },\n  { regex: RX_BUT, type: 'but' },\n  { regex: RX_ASTERISK, type: 'and' },\n]\n\n/**\n * Check for a data table in the in the steps content\n * The string should be passed to the step def as the last argument\n * Each line of the data stable should be split in to arguments separated by |\n * @function\n * @private\n * @param {Object} step - Current step being parsed into an object\n * @param {Array} lines - All lines after the step line\n * @param {string} line - Next line after the step line\n * @param {string} index - Index of line relative to the full text content\n *\n * @todo Implement data table parsing\n *\n * @return {Object} Current step being parsed with the doc string added\n */\nconst checkDataTable = (step, lines, line, index) => {\n  if (!RX_DATA_TABLE.test(line)) return step\n\n  let tableEnd\n\n  step.table = {\n    index,\n    content: lines.reduce((table, ln) => {\n      tableEnd = tableEnd || !RX_DATA_TABLE.test(ln)\n      !tableEnd &&\n        table.push(\n          ln.split('|').reduce((row, item) => {\n            const column = item.trim()\n            column && row.push(column)\n\n            return row\n          }, [])\n        )\n\n      return table\n    }, []),\n  }\n\n  return step\n}\n\n/**\n * Check for doc strings in the steps\n * The string should be passed to the step def as the last argument\n * Space inside the doc string should be left as is\n * @function\n * @private\n * @param {Object} step - Current step being parsed into an object\n * @param {string} lines - All lines after the step line\n * @param {string} line - Next line after the step line\n * @param {string} index - Index of line relative to the full text content\n *\n * @todo Implement doc string parsing\n *\n * @return {Object} Current step being parsed with the doc string added\n */\nconst checkDocString = (step, lines, line, index) => {\n  let docMatch = RX_DOC_QUOTES.test(line) && '\"\"\"'\n  docMatch = docMatch || (RX_DOC_TICKS.test(line) && '```')\n\n  if (!docMatch) return step\n\n  // Get the white space leading up to the doc-string identifier\n  // Create a regex white space chars to remove the same amount of white space\n  // from the start of each line relative to the doc-string identifier\n  // See here for more info => https://cucumber.io/docs/gherkin/reference/\n  const whiteSpace = line.split(docMatch)[0]\n  const spacer = new Array(whiteSpace.length).fill('\\\\s')\n    .join('')\n  const spacerRegex = new RegExp(`^${spacer}`)\n\n  step.doc = {\n    index,\n    whiteSpace,\n    type: docMatch === `\"\"\"` ? 'quote' : 'tick',\n    // Split the passed in lines on the matching doc-string identifier\n    // Then pull the second element from the array\n    // Which is the content between the opening and closing doc-string identifiers\n    // Then split it into an array single lines, and remove the starting white-space\n    content: lines\n      .split(docMatch)\n      .slice(1)\n      .shift()\n      .trim()\n      .split('\\n')\n      .reduce((cleaned, ln) => {\n        cleaned.push(ln.replace(spacerRegex, '').trim())\n        return cleaned\n      }, [])\n      .join('\\n'),\n  }\n\n  return step\n}\n\n/*\n * Helper factory function to build a step object\n * @function\n * @private\n * @param {string} type - The type of step definition\n * @param {string} step - Text containing the step text\n *\n * @returns {Object} - Parsed step object\n */\nconst stepFactory = (type, stepText, lines, index) => {\n  let step = {\n    type,\n    index,\n    step: stepText,\n    uuid: sanitizeForId(`${type}-${stepText}`),\n  }\n\n  // TODO: Need to add check if next line is empty of a comment\n  // If it is, then need to go to line after that\n  // And use that line for checking data tables and dock strings\n  // Otherwise this will fail unless the table or doc comes directly after the step\n  const nextIndex = index + 1\n  const nextLine = lines[nextIndex]\n  const afterLines = lines.slice(nextIndex)\n\n  step = checkDataTable(step, afterLines, nextLine, nextIndex)\n  step = checkDocString(step, afterLines.join('\\n'), nextLine, nextIndex)\n\n  return step\n}\n\n/**\n * Checks each step tag type, and adds it to current scenario when it exists\n * @function\n * @private\n * @param {Object} scenario - Parsed scenario object of the current scenario\n * @param {string} line - Current line being parsed\n * @param {number} index - Current index of the line relative to the full text\n *\n * @return {boolean} - True if a line was added to the current scenario object\n */\nexport const parseStep = (scenario, lines, line, index) => {\n  return RegStepTags.reduce((added, regTag) => {\n    // If the line was already added, just return\n    if (added) return added\n\n    // Check if the line is a step tag\n    const hasTag = regTag.regex.test(line)\n    // If if is, add the extracted line to the steps of the current scenario\n    hasTag &&\n      scenario.steps.push(\n        stepFactory(\n          regTag.type,\n          getRXMatch(line, regTag.regex, 1),\n          lines,\n          index\n        )\n      )\n\n    // Return if the line was added to the steps\n    return hasTag\n  }, false)\n}\n", "import { parseStep } from './parseStep'\nimport { noOpObj } from '@keg-hub/jsutils'\nimport { replaceWorld } from '../utils/worldReplace'\nimport { sanitizeForId, getRXMatch } from '../utils/helpers'\n\n/**\n * Regular expressions for matching feature file keywords\n * @type {object}\n */\nconst RX_NEWLINE = /\\r?\\n/g\nconst RX_TAG = /^\\s*@(.*)$/\nconst RX_COMMENT = /^\\s*#(.*)$/\nconst RX_FEATURE = /^\\s*Feature:(.*)$/\nconst RX_RULE = /^\\s*Rule:(.*)$/\nconst RX_AS = /^\\s*As (.*)$/\nconst RX_I_WANT = /^\\s*I want (.*)$/\nconst RX_SO_THAT = /^\\s*So that (.*)$/\nconst RX_IN_ORDER = /^\\s*In order (.*)$/\nconst RX_SCENARIO = /^\\s*Scenario:(.*)$/\nconst RX_EXAMPLE = /^\\s*Example:(.*)$/\nconst RX_BACKGROUND = /^\\s*Background:(.*)$/\n\n/**\n * Regular expressions and types for matching feature meta data keywords\n * @type {Array}\n * @private\n */\nconst featureMetaTags = [\n  { regex: RX_AS, key: 'perspective' },\n  { regex: RX_I_WANT, key: 'desire' },\n  { regex: RX_SO_THAT, key: 'reason' },\n  { regex: RX_IN_ORDER, key: 'reason' },\n]\n\n/*\n * Helper factory function to build a feature object\n * @function\n * @private\n * @param {string} feature - Text containing the feature keyword and text\n * @param {string} content - The entire text of a feature file\n *\n * @returns {Object} - Parsed feature object\n */\nconst featureFactory = (feature, content, index) => {\n  return {\n    index,\n    content,\n    feature,\n    tags: [],\n    rules: [],\n    reason: [],\n    comments: [],\n    scenarios: [],\n    // The feature name should always be unique, so use that as a re-usable id\n    ...(feature && { uuid: sanitizeForId(feature, index) }),\n  }\n}\n\n/*\n * Helper factory function to build a rule object\n * @function\n * @private\n * @param {string} rule - Text containing the rule keyword and text\n *\n * @returns {Object} - Parsed feature object\n */\nconst ruleFactory = (rule, index) => {\n  return {\n    index,\n    rule,\n    tags: [],\n    scenarios: [],\n    // The feature name should always be unique, so use that as a re-usable id\n    ...(rule && { uuid: sanitizeForId(rule, index) }),\n  }\n}\n\n/*\n * Helper factory function to build a scenario object\n * @function\n * @private\n * @param {string} scenario - Text containing the scenario keyword and text\n *\n * @returns {Object} - Parsed scenario object\n */\nconst scenarioFactory = (scenario, index) => {\n  return {\n    index,\n    scenario,\n    tags: [],\n    steps: [],\n    ...(scenario && { uuid: sanitizeForId(scenario, index) }),\n  }\n}\n\n/*\n * Helper factory function to build a background object\n * @function\n * @private\n * @param {string} scenario - Text containing the scenario keyword and text\n *\n * @returns {Object} - Parsed scenario object\n */\nconst backgroundFactory = (background, index) => {\n  return {\n    index,\n    steps: [],\n    background,\n    ...(background && { uuid: sanitizeForId(background, index) }),\n  }\n}\n\n/*\n * Helper function to add reason text to a feature when it exists\n * @function\n * @private\n * @param {Object} feature - Parse feature object\n * @param {string} reason - Text containing the reason from the parsed feature file\n *\n * @returns {void}\n */\nconst addReason = (feature, reason, index) => {\n  reason && feature.reason.push({ content: reason, index })\n}\n\n/**\n * Checks for feature descriptive content\n * @function\n * @private\n * @param {Object} feature - Current feature being parsed into an object\n * @param {string} line - Current line being parsed\n *\n * @return {boolean} - True if a line was added to the current feature object\n */\nconst featureMeta = (feature, line, index) => {\n  let metaAdded = false\n  featureMetaTags.reduce((added, regTag) => {\n    if (added) return added\n\n    const hasTag = regTag.regex.test(line)\n    if (!metaAdded && hasTag) metaAdded = true\n\n    return hasTag\n      ? regTag.key === 'reason'\n        ? addReason(feature, getRXMatch(line, regTag.regex, 0), index)\n        : (feature[regTag.key] = {\n            content: getRXMatch(line, regTag.regex, 0),\n            index,\n          })\n      : hasTag\n  }, false)\n\n  return metaAdded\n}\n\n/*\n * Checks for feature file meta-data\n * @function\n * @private\n * @param {Object} feature - Current feature being parsed into an object\n * @param {string} line - Current line being parsed\n *\n * @return {boolean} - True if a line was added to the current feature object\n */\nconst checkTag = (parent, feature, line, index) => {\n  if (!RX_TAG.test(line)) return false\n\n  // background can not have tags, so add them to the feature instead\n  const tagParent = parent.background ? feature : parent\n\n  const tags = getRXMatch(line, RX_TAG, 0)\n\n  // Join the tags with the tagParents current tags\n  tagParent.tags = (tagParent.tags || []).concat(tags.split(' '))\n\n  return true\n}\n\n/*\n * Checks for feature file comments\n * @function\n * @private\n * @param {Object} feature - Current feature being parsed into an object\n * @param {string} line - Current line being parsed\n * @param {number} index - Location of the current feature in the features group array\n *\n * @return {boolean} - True if a line was added to the current feature object\n */\nconst featureComment = (feature, line, index) => {\n  if (!RX_COMMENT.test(line)) return false\n\n  // const comment = getRXMatch(line, RX_COMMENT, 1)\n  // Don't use getRXMatch because we want the full white space\n  // Because comments are added globally and not by line\n  // This could cause some issues if the user starts using different white space settings\n  // But not much we can do about it\n  const comment = line.match(RX_COMMENT)[0]\n\n  feature.comments.push({ content: comment, index })\n\n  return true\n}\n\n/**\n * Check for new feature, or add feature text to current feature\n * @function\n * @private\n * @param {Array} featuresGroup - All Parsed features as an array\n * @param {Object} feature - Current feature being parsed into an object\n * @param {string} line - Current line being parsed\n * @param {string} content - Full text content of the feature file\n * @param {number} index - The current line number of the feature text content\n *\n * @return {Object} Current feature being parsed\n */\nconst ensureFeature = (featuresGroup, feature, line, content, index) => {\n  // Check for Feature: keyword text\n  if (!RX_FEATURE.test(line)) return feature\n\n  // Get the text from the line\n  const featureText = getRXMatch(line, RX_FEATURE, 1)\n\n  // If the text was not yet added, then add it\n  // Then ensure the feature was added to the full group\n  if (!feature.feature) {\n    feature.feature = featureText\n\n    // Ensure the index is added if needed\n    if (!feature.index) feature.index = index\n    if (!feature.uuid) feature.uuid = sanitizeForId(feature.feature, index)\n\n    !featuresGroup.includes(feature) && featuresGroup.push(feature)\n\n    return feature\n  }\n\n  // Otherwise create a new feature, with the feature text and content\n  const builtFeature = featureFactory(featureText, content, index)\n  featuresGroup.push(builtFeature)\n\n  return builtFeature\n}\n\n/**\n * Check for new feature scenario, and add scenario to feature object\n * @function\n * @private\n * @param {Object} feature - Current feature being parsed into an object\n * @param {Object} scenario - Current scenario being parsed into an object\n * @param {string} line - Current line being parsed\n * @param {number} index - The current line number of the feature text content\n *\n * @return {Object} Current scenario being parsed\n */\nconst ensureRule = (feature, rule, line, index) => {\n  // Check for \"Rule:\" keyword\n  if (!RX_RULE.test(line)) return rule\n\n  // Get text after the \"Rule:\" key word\n  let ruleText = getRXMatch(line, RX_RULE, 1)\n\n  // Check if the scenario text was already added, and add it if needed\n  // Otherwise create a new scenario with the scenario text\n  !rule.rule ? (rule.rule = ruleText) : (rule = ruleFactory(ruleText, index))\n\n  // Ensure the line index is added\n  !rule.index && (rule.index = index)\n  // Add the uuid from the rule text if it doesn't exist\n  !rule.uuid && (rule.uuid = sanitizeForId(rule.rule, index))\n\n  // Add the rule if needed to the current feature\n  !feature.rules.includes(rule) && feature.rules.push(rule)\n\n  return rule\n}\n\n/**\n * Check for new feature scenario, and add scenario to feature object\n * @function\n * @private\n * @param {Object} parent - Current parent (feature || rule) being parsed into an object\n * @param {Object} scenario - Current scenario being parsed into an object\n * @param {string} line - Current line being parsed\n * @param {number} index - The current line number of the feature text content\n *\n * @return {Object} Current scenario being parsed\n */\nconst ensureScenario = (feature, rule, scenario, line, index) => {\n  // Check for \"Scenario:\" or \"Example:\" keywords\n  const hasScenario = RX_SCENARIO.test(line)\n  if (!hasScenario && !RX_EXAMPLE.test(line)) return scenario\n\n  // Check for \"Scenario:\", if not found then check for \"Example:\"\n  let scenarioText = hasScenario && getRXMatch(line, RX_SCENARIO, 1)\n  scenarioText = scenarioText || getRXMatch(line, RX_EXAMPLE, 1)\n\n  // Check if the scenario text was already added, and add it if needed\n  // Otherwise create a new scenario with the scenario text\n  !scenario.scenario\n    ? (scenario.scenario = scenarioText)\n    : (scenario = scenarioFactory(scenarioText, index))\n\n  // Ensure the line index is added\n  !scenario.index && (scenario.index = index)\n  // Add the uuid from the scenario text if it doesn't exist\n  !scenario.uuid && (scenario.uuid = sanitizeForId(scenario.scenario, index))\n\n  // Add the scenario if needed to the current parent\n  const parent = rule.uuid ? rule : feature\n  !parent.scenarios.includes(scenario) && parent.scenarios.push(scenario)\n\n  return scenario\n}\n\n/**\n * Check for background in a feature, These steps should run before all steps of a scenario\n * Should be added to each scenario, where a background exists in the feature\n * @function\n * @private\n * @param {Object} parent - Current parent (feature || rule) being parsed into an object\n * @param {Object} scenario - Current scenario being parsed into an object\n * @param {string} line - Current line being parsed\n *\n * @return {Object} Current background being parsed\n */\nconst ensureBackground = (feature, rule, background, line, index) => {\n  if (!RX_BACKGROUND.test(line)) return background\n\n  // Generate the background text from the parent uuid and background keyword\n  // background's don't have a text title, so we have to generate one when parsing\n  const parent = rule.uuid ? rule : feature\n  const backgroundText = `${parent.uuid}-background`\n\n  // Check if the background text was already added, and add it if needed\n  // Otherwise create a new background with the background text\n  !background.background\n    ? (background.background = backgroundText || '')\n    : (background = backgroundFactory(backgroundText, index))\n\n  // Ensure the line index is added\n  !background.index && (background.index = index)\n  // Add the uuid from the background text if it doesn't exist\n  !background.uuid &&\n    (background.uuid = sanitizeForId(background.background, index))\n\n  parent.background = background\n\n  return background\n}\n\n/**\n * Determine the active parent base on the line to be evaluated\n * If a new parent is not found, then returns the current activeParent\n * @function\n * @private\n * @param {Object} activeParent - Current parent object to have properties added to it\n * @param {Object} feature - Feature model object\n * @param {Object} scenario - Scenario model object\n * @param {Object} background - Background model object\n * @param {string} line - Next line of the text to be evaluated\n *\n * @returns {Object} - Found active parent based on the line\n */\nconst setActiveParent = (\n  activeParent,\n  feature,\n  rule,\n  scenario,\n  background,\n  line\n) => {\n  return RX_SCENARIO.test(line) || RX_EXAMPLE.test(line)\n    ? scenario\n    : RX_FEATURE.test(line)\n      ? feature\n      : RX_RULE.test(line)\n        ? rule\n        : RX_BACKGROUND.test(line)\n          ? background\n          : activeParent\n}\n\n/**\n * Parses a feature files text content into an object\n * @function\n * @public\n * @export\n * @param {string} text - Text content of a feature file\n *\n * @returns {Object} - Parsed feature file as an object\n */\nexport const parseFeature = function (text, world) {\n  world = world || (this && this.world) || noOpObj\n  const features = []\n\n  const replaceText = replaceWorld((text || '').toString(), world)\n  const lines = replaceText.split(RX_NEWLINE)\n\n  let rule = ruleFactory(false)\n  let scenario = scenarioFactory(false)\n  let background = backgroundFactory(false)\n  let feature = featureFactory(false, text)\n  let activeParent = feature\n\n  /*\n   * Loop over each line of text, and compose the line with corresponding regex to find a match\n   */\n  return lines.reduce((featuresGroup, line, index) => {\n    /*\n     * Check for new feature, or parse the current features text\n     */\n    feature = ensureFeature(featuresGroup, feature, line, text, index)\n\n    /*\n     * Check for child content of the feature or activeParent and parse the line when matched\n     */\n    if (\n      featureComment(feature, line, index) ||\n      featureMeta(feature, line, index)\n    )\n      return featuresGroup\n\n    /*\n     * Check for new feature rule, and add rule to feature object\n     */\n    rule = ensureRule(feature, rule, line, index)\n\n    /*\n     * Check for new feature scenario, and add scenario to feature object\n     */\n    scenario = ensureScenario(feature, rule, scenario, line, index)\n\n    /*\n     * Check for new feature scenario, and add scenario to feature object\n     */\n    background = ensureBackground(feature, rule, background, line, index)\n\n    // Check for stepTags before check for the next active parent\n    // This way We don't add a step to the wrong parent\n    if (!activeParent.feature && parseStep(activeParent, lines, line, index))\n      return featuresGroup\n\n    /*\n     * Get the currently active parent based on the next line to be parsed\n     * This allows setting the active parent before the next iteration\n     */\n    activeParent = setActiveParent(\n      activeParent,\n      feature,\n      rule,\n      scenario,\n      background,\n      line\n    )\n\n    // Check for tags after the next active parent has been set\n    checkTag(activeParent, feature, line, index)\n\n    return featuresGroup\n  }, features)\n}\n", "import { constants } from '../constants'\nimport { get, isFunc, exists } from '@keg-hub/jsutils'\nimport { throwWorldReplace, throwAliasReplace } from './errors'\nimport {\n  RX_WORLD_MATCH,\n  RX_ALIAS_MATCH,\n  RX_ALIAS_REPLACE,\n  RX_WORLD_REPLACE,\n} from '../matcher/patterns'\nconst {\n  ALIAS_REF,\n  WORLD_REF,\n  ALIAS_WORLD_KEY,\n  WORLD_AT_RUNTIME,\n  ALIAS_REF_AT_RUNTIME,\n} = constants\n\n/**\n * Attempts to replace the matching content with location data from the world object\n * If the value is a function, the function is called\n * Otherwise the existing value ise used\n * If nothing exists at the location, the original match is returned\n *\n * @param {string} match - The found text that matches the $$alias format\n * @param {Object} world - Parking global config object\n * @param {string} location - Location on the world object that contains the replace value\n *\n * @returns {string} - text, with the `$$alias` text replaced\n */\nconst attemptReplace = (match, world, location) => {\n  const replaceWith = get(world, location)\n  return isFunc(replaceWith)\n    ? replaceWith(world, location)\n    : exists(replaceWith)\n      ? replaceWith\n      : match\n}\n\n/**\n * Finds all matching $$alias strings in the passed in text\n * Then replaces them with content from the world.$alias object\n * If the world.$alias value does not exist, the text is left as is\n * If there is text matching `$$:alias`, the `:` is removed\n * This allows variables in step definitions to be replaced at run time\n *\n * @param {string} text - String to have `$$alias` text replaced\n * @param {Object} world - Parking global config object\n *\n * @returns {string} - text, with the `$world` text replaced\n */\nexport const aliasReplace = (text, world) => {\n  // Track the current match, for extra information if the replace throws\n  let currentMatch\n  try {\n    return text.replace(RX_ALIAS_MATCH, match => {\n      currentMatch = match\n      const cleaned = match.trim()\n\n      // ALIAS_REF ( $$ ) requires adding an extra `$` when doing the replace\n      // This is because the $ char has a special function in the string.replace method\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n      const replaced =\n        cleaned.indexOf(ALIAS_REF_AT_RUNTIME) === 0\n          ? cleaned.replace(ALIAS_REF_AT_RUNTIME, `$${ALIAS_REF}`)\n          : attemptReplace(\n            match,\n            world,\n            cleaned.replace(RX_ALIAS_REPLACE, `${ALIAS_WORLD_KEY}.`)\n          )\n\n      return replaced\n    })\n  }\n  catch (err) {\n    throwAliasReplace(err, currentMatch)\n  }\n}\n\n/**\n * Finds all matching $world strings in the passed in text\n * Then replaces them with content from the world object\n * If the world value does not exist, the text is left as is\n * If there is text matching `$:world`, the `:` replaced as `$world`\n * This allows variables in step definitions to be replaced at run time\n *\n * @param {string} text - String to have `$world` text replaced\n * @param {Object} world - Parking global config object\n *\n * @returns {string} - text, with the `$world` text replaced\n */\nexport const worldReplace = (text, world) => {\n  // Track the current match, for extra information if the replace throws\n  let currentMatch\n  // Wrapped in a try/catch because\n  // Errors are swallowed inside the text.replace function for some reason\n  try {\n    return text.replace(RX_WORLD_MATCH, match => {\n      currentMatch = match\n      const cleaned = match.trim()\n\n      return cleaned.indexOf(WORLD_AT_RUNTIME) === 0\n        ? cleaned.replace(WORLD_AT_RUNTIME, WORLD_REF)\n        : attemptReplace(match, world, cleaned.replace(RX_WORLD_REPLACE, ''))\n    })\n  }\n  catch (err) {\n    throwWorldReplace(err, currentMatch)\n  }\n}\n\n/**\n * Helper to call aliasReplace, and worldReplace in a single call\n *\n * @param {string} text - String to have `$world` text replaced\n * @param {Object} world - Parking global config object\n *\n * @returns {string} - text, with the `$world` text replaced\n */\nexport const replaceWorld = (text, world) => {\n  return worldReplace(aliasReplace(text, world), world)\n}\n", "/**\n * Parses definitions from text content by calling the steps.register function\n * @function\n * @public\n * @export\n * @param {string} text - Text content of a definitions file\n *\n * @returns {Object} - Parsed feature file as an object\n */\nexport const parseDefinition = function (text) {\n  const registered = this.steps.register([text])\n  return registered\n}\n", "import { constants } from '../constants'\nimport { testMethodFill } from './errors'\nimport { noOp, get } from '@keg-hub/jsutils'\nimport { hasJasmine, resolveJasmine } from './globalScope'\nconst { SPEC_RESULT_LOG, LOG_JEST_SPEC_ENV } = constants\n\n/**\n * Converts a log into a string, and logs it to stdout wrapped by SPEC_RESULT_LOG constant\n * Which allows easy parsing the spec output json object\n * @function\n * @private\n * @param {Object} result - Spec result object from jasmine reported\n *\n * @returns {Void}\n */\nconst logResultToTerminal = result => {\n  const timestamp = new Date().getTime()\n  get(process, `env.${LOG_JEST_SPEC_ENV}`) &&\n    process.stdout.write(\n      [\n        SPEC_RESULT_LOG,\n        JSON.stringify({ ...result, timestamp }),\n        SPEC_RESULT_LOG,\n      ].join(``)\n    )\n}\n\n/**\n * Gets the suite type based on the description text\n * The first word should be the type, if not, then it's a feature\n * @function\n * @private\n * @param {Object} suite - Suite object from jasmine reported\n *\n * @returns {string} - The suite type\n */\nconst getSuiteData = suite => {\n  const description = get(suite, `description`)\n\n  const type = !description\n    ? `Feature`\n    : description.startsWith(`Scenario >`)\n      ? `Scenario`\n      : description.startsWith(`Background >`)\n        ? `Background`\n        : description.startsWith(`Rule >`)\n          ? `Rule`\n          : `Feature`\n\n  return {\n    type: type.toLowerCase(),\n    // Format the description to match the actual Gherkin syntax\n    ...(type !== `Feature` && {\n      description: description.replace(`${type} >`, `${type}:`),\n    }),\n  }\n}\n\n/**\n * Resolves a test method from the global scope\n * Returns a NOOP when getTestMethod.PARKIN_TEST_MODE is true\n * This allows testing the runner methods, without running the tests\n * @function\n * @private\n * @param {string} type - Name of test method to get from the global scope\n * @param {boolean} testMode - Allows testing the runner methods, without running the tests\n *\n * @returns {function} - Test method\n */\nexport const getTestMethod = (type, testMode) => {\n  // To write tests for the runner, we have to override the default test methods\n  // This allows testing the runner methods, without running the tests\n  return testMode ? noOp : global[type] || testMethodFill(type)\n}\n\n/**\n * Builds a custom jasmine reporter\n * Checks failed specs and sets all all specs in a suite to disable when found\n * @function\n * @private\n * @param {Object} jasmineEnv - The current jasmine environment\n *\n * @returns {Object} - Custom jasmine reporter\n */\nconst buildReporter = jasmineEnv => {\n  const suites = []\n  const jasmineDescribe = jasmineEnv.describe\n\n  // Wrap the describe method, so we can capture each test suite\n  // This allows us to access them later check skip failed specs\n  jasmineEnv.describe = (...args) => {\n    const suite = jasmineDescribe.apply(null, args)\n    suites.push(suite)\n\n    return suite\n  }\n\n  return {\n    suiteStarted: suite => {\n      logResultToTerminal({\n        ...suite,\n        ...getSuiteData(suite),\n        action: `start`,\n      })\n    },\n    specStarted: result => {\n      logResultToTerminal({\n        ...result,\n        type: `step`,\n        action: `start`,\n      })\n    },\n    specDone: result => {\n      // Check if the env is set to log the spec result\n      logResultToTerminal({\n        ...result,\n        type: 'step',\n        action: 'end',\n      })\n\n      // If the spec passed, just return\n      if (result.status !== 'failed') return\n\n      // If the spec failed, loop through all other specs, and disable them\n      // This ensures if a spec fails, all follow specs will be skipped\n      const suite = suites.find(suite =>\n        suite.children.find(spec => spec.result === result)\n      )\n      suite && suite.children.map(spec => spec.disable())\n    },\n    suiteDone: suite => {\n      logResultToTerminal({\n        ...suite,\n        ...getSuiteData(suite),\n        action: `end`,\n      })\n    },\n  }\n}\n\n/**\n * Checks if jasmine is available on the global scope\n * If it is, then builds and adds a custom reporter to it\n * @function\n * @export\n *\n * @returns {Void}\n */\nexport const skipTestsOnFail = testMode => {\n  if (!hasJasmine) return\n\n  const jasmineEnv = resolveJasmine().getEnv()\n\n  jasmineEnv &&\n    jasmineEnv.describe &&\n    jasmineEnv.addReporter(buildReporter(jasmineEnv, testMode))\n}\n", "import { parseFeature } from './parse'\nimport { getTestMethod, skipTestsOnFail } from './utils/testMethods'\nimport { throwMissingSteps, throwMissingFeatureText } from './utils/errors'\nimport {\n  isArr,\n  capitalize,\n  isObj,\n  isStr,\n  noOpObj,\n  eitherArr,\n} from '@keg-hub/jsutils'\n\n/**\n * Builds the title for the current suite and spec being run\n * @function\n * @private\n * @param {string} text - Text content of the suite or spec\n * @param {string} type - Type of spec of suite being run\n *\n * @returns {string} - Built title\n */\nconst buildTitle = (text, type) => {\n  return `${capitalize(type)} > ${text}`\n}\n\n/**\n * Resolves and parses features based on the data type passed in\n * Ensures an array of parsed features is returned\n * @function\n * @public\n * @param {Object|Array<string|Object>|string} data - Feature content\n * @param {Object} $world - Holds configuration for the running test environment\n *\n * @returns {Array} - passed in data converted into parsed Features\n */\nconst resolveFeatures = (data, $world) => {\n  return isStr(data)\n    ? parseFeature(data, $world)\n    : isObj(data)\n      ? [data]\n      : isArr(data)\n        ? data.reduce(\n          (features, feature) =>\n            features.concat(resolveFeatures(feature, $world)),\n          []\n        )\n        : throwMissingFeatureText()\n}\n\n/**\n * Calls the `it` global passing in a registered step function based on the step text\n * @function\n * @private\n * @param {Object} stepsInstance - Instance of the Steps class\n * @param {Object} step - Parsed Step mode object\n * @param {boolean} testMode - Allows testing the runner methods, without running the tests\n *\n * @returns {Void}\n */\nconst runStep = async (stepsInstance, step, testMode) => {\n  const test = getTestMethod('test', testMode)\n  test(`${capitalize(step.type)} ${step.step}`, async () => {\n    return await stepsInstance.resolve(step.step)\n  })\n}\n\n/**\n * Loops through the parents steps and calls the matching definition method\n * @function\n * @private\n * @param {Object} parent - Parent object containing the steps to run\n * @param {string} title - Text passed as the first argument to the describe method\n * @param {Object} stepsInstance - Instance of the Steps class\n * @param {boolean} testMode - Allows testing the runner methods, without running the tests\n *\n * @returns {Array} - Responses from the parents steps\n */\nconst loopSteps = (parent, title, stepsInstance, testMode) => {\n  const describe = getTestMethod('describe', testMode)\n\n  let responses = []\n  describe(title, () => {\n    // Map over the steps and call them\n    // Store the returned promise in the responses array\n    const responses = parent.steps.map(step =>\n      runStep(stepsInstance, step, testMode)\n    )\n\n    // Ensure we resolve all promises inside the describe block\n    Promise.all(responses)\n  })\n\n  return responses\n}\n\n/**\n * Loops through the passed in scenarios steps and calls runStep for each\n * @function\n * @private\n * @param {Object} stepsInstance - Instance of the Steps class\n * @param {Object} scenario - Parsed feature scenario object containing the steps to run\n * @param {boolean} testMode - Allows testing the runner methods, without running the tests\n *\n * @returns {Void}\n */\nconst runScenario = (stepsInstance, scenario, background, testMode) => {\n  // If there's a background, run the background steps first\n  background &&\n    loopSteps(\n      background,\n      buildTitle(scenario.scenario, `Background`),\n      stepsInstance,\n      testMode\n    )\n\n  // Next run the scenario steps once the background completes\n  return loopSteps(\n    scenario,\n    buildTitle(scenario.scenario, `Scenario`),\n    stepsInstance,\n    testMode\n  )\n}\n\n/**\n * Loops through the passed in rules steps and calls runStep for each\n * @function\n * @private\n * @param {Object} stepsInstance - Instance of the Steps class\n * @param {Object} rule - Parsed feature rule object containing the steps to run\n * @param {Object} background - Parsed background object containing the steps to run before the rule\n * @param {boolean} testMode - Allows testing the runner methods, without running the tests\n *\n * @returns {Void}\n */\nconst runRule = (stepsInstance, rule, background, testMode) => {\n  // Map over the rule scenarios and call their steps\n  // Store the returned promise in the responses array\n  let responses = []\n  describe(`Rule > ${rule.rule}`, () => {\n    responses = rule.scenarios.map(scenario =>\n      runScenario(\n        stepsInstance,\n        scenario,\n        background || rule.background,\n        testMode\n      )\n    )\n    // Ensure we resolve all promises inside the describe block\n    Promise.all(responses)\n  })\n\n  return responses\n}\n\n/**\n * @param {string} tags\n * @return {Array<string>?} A match of all words starting with '@', the tag indicator.\n * Returns false if input is invalid.\n */\nconst parseFeatureTags = tags => {\n  return isStr(tags) && tags.match(/[@]\\w*/g)\n}\n\n/**\n * @param {string?} name - name of item (feature|scenario) to check\n * @param {string | Array<string>} tags - tags of item (feature|scenario) to check\n * @param {string?} filterOptions.name - name filter\n * @param {string | Array<string>} filterOptions.tags - tags filter\n * @return {Boolean} - true if feature matches the filter options\n */\nconst itemMatch = (name = '', tags = [], filterOptions = {}) => {\n  const { name: filterName, tags: filterTags } = filterOptions\n\n  const parsedTags = isStr(filterTags)\n    ? parseFeatureTags(filterTags)\n    : eitherArr(filterTags, [])\n\n  const nameMatch = !filterName || name.includes(filterName)\n  const tagMatch =\n    !parsedTags.length ||\n    parsedTags.every(clientTag => tags.includes(clientTag))\n\n  return nameMatch && tagMatch\n}\n\n/**\n * Filters features and scenarios based on the passed in filterOptions\n * @function\n * @private\n * @param {Array} features - Features to be run\n * @param {Object} tags - Tags to filter which Features and scenarios will be run\n *  * @param {string?} filterOptions.name - name of feature\n * @param {string | Array<string>} filterOptions.tags - feature tags to match\n *\n * @returns {Array} - Filtered features that should be run\n */\nconst filterFeatures = (features, filterOptions = {}) => {\n  return features.reduce((filtered, feature) => {\n    const isMatchingFeature = itemMatch(\n      feature.feature,\n      feature.tags,\n      filterOptions\n    )\n    if (isMatchingFeature) {\n      filtered.push(feature)\n      return filtered\n    }\n\n    // check for matching scenarios, where scenarios inherit their parent feature's tags\n    const matchingScenarios = feature.scenarios.filter(scenario =>\n      itemMatch(\n        scenario.scenario,\n        [ ...(scenario.tags || []), ...(feature.tags || []) ],\n        filterOptions\n      )\n    )\n    if (matchingScenarios.length) {\n      filtered.push({\n        ...feature,\n        scenarios: matchingScenarios,\n      })\n    }\n    return filtered\n  }, [])\n}\n\n/**\n * Parses and runs the steps of a feature text string\n * Uses the registered steps of the passed in Steps class instance to evaluate the feature steps\n * @class\n * @public\n * @param {Object} stepsInstance - Instance of the Steps class\n * @param {Hooks} hooksInstance - instance of the Hooks class, storing the client's registered test callbacks\n *\n * @returns {Object} Instance of the Runner class\n */\nexport class Runner {\n  constructor(steps, hooks, world) {\n    !steps && throwMissingSteps()\n    !hooks && throwMissingHooks()\n\n    this.steps = steps\n    this.hooks = hooks\n    this._world = world\n  }\n\n  /**\n   * Gets the features to be run for a test\n   * @param {string|Array<Object>|Object} data - Feature data as a string or parsed Feature model\n   * @param {Object} options - Define how the steps are run\n   * @param {Array<string>? | string?} options.tags - Tags to filter which features or scenarios are run\n   * @param {string?} options.name - Name of feature\n   */\n  getFeatures = (data, options) => {\n    const features = resolveFeatures(data, this._world)\n    return filterFeatures(features, options)\n  }\n\n  /**\n   * Parses and runs the steps of a feature text string\n   * Matches each step to a registered steps of the Steps class instance\n   * @memberof Runner\n   * @function\n   * @public\n   * @param {string|Array<Object>|Object} data - Feature data as a string or parsed Feature model\n   * @param {Object} options - Define how the steps are run\n   * @param {Array<string>? | string?} options.tags - Tags to filter which features or scenarios are run\n   * @param {string?} options.name - Name of feature\n   *\n   * @returns {boolean} - whether any tests ran\n   */\n  run = async (data, options = noOpObj) => {\n    // Set if were running tests for Parkin, or external tests\n    // Only used for testing purposes\n    const testMode = this.run.PARKIN_TEST_MODE\n\n    // Setup step skip on failed\n    skipTestsOnFail(testMode)\n\n    const describe = getTestMethod('describe', testMode)\n    const beforeAll = getTestMethod('beforeAll', testMode)\n    const afterAll = getTestMethod('afterAll', testMode)\n    const beforeEach = getTestMethod('beforeEach', testMode)\n    const afterEach = getTestMethod('afterEach', testMode)\n\n    // Get all the features to be run\n    // Then filter them based on any options tags\n    const features = this.getFeatures(data, options)\n    if (!features.length) return false\n\n    // Ensures all tests resolve before ending by\n    // Using promises to resolve each feature / scenario / step\n    const promises = await features.map(async feature => {\n      let responses = []\n\n      beforeAll(this.hooks.getRegistered('beforeAll'))\n      afterAll(this.hooks.getRegistered('afterAll'))\n      beforeEach(this.hooks.getRegistered('beforeEach'))\n      afterEach(this.hooks.getRegistered('afterEach'))\n\n      // Map over the features scenarios and call their steps\n      // Store the returned promise in the responses array\n      describe(buildTitle(feature.feature, `Feature`), () => {\n        responses = feature.rules.map(rule =>\n          runRule(this.steps, rule, feature.background, testMode)\n        )\n\n        responses.concat(\n          feature.scenarios.map(scenario =>\n            runScenario(this.steps, scenario, feature.background, testMode)\n          )\n        )\n\n        // Ensure we resolve all promises inside the describe block\n        Promise.all(responses)\n      })\n\n      return responses\n    })\n\n    // Ensure all promises are resolved before returning\n    await Promise.all(promises)\n\n    return true\n  }\n}\n", "import { constants } from '../constants'\nimport { throwFeatureNotAnObj } from '../utils/errors'\nimport { eitherArr, isObj, isArr, capitalize, exists } from '@keg-hub/jsutils'\n\nconst { FEATURE_META } = constants\n\n/**\n * Adds content to the assembled array based on the passed in index\n * If no index exists, then the content is added to the end\n * If the index already exists, then the content is spliced into the array at the index\n * @function\n * @private\n * @param {Array<String>} assembled - Array of strings converted from a feature model\n * @param {string} content - String to add to the assembled array\n * @param {number} index - Location in the assembled array where the content should be placed\n *\n * @return {void}\n */\nconst addContent = (assembled, content, index) => {\n  !exists(index)\n    ? assembled.push(content)\n    : exists(assembled[index])\n      ? assembled.splice(index, 0, content)\n      : (assembled[index] = content)\n}\n\n/**\n * Converts a array of tags into a string and adds them to the assembled array\n * @function\n * @private\n * @param {Array<String>} assembled - Array of strings converted from a feature model\n * @param {Array<String>} tags - Group of tags from a feature or scenario\n *\n * @return {void}\n */\nconst addTags = (assembled, tags, spacer = '') => {\n  isArr(tags) &&\n    tags.length &&\n    addContent(assembled, `${spacer}${tags.join(' ')}`)\n}\n\n/**\n * Converts a features meta data into strings and adds them to the assembled array\n * @function\n * @private\n * @param {Array<String>} assembled - Array of strings converted from a feature model\n * @param {Object} feature - Parsed feature model containing a scenarios array\n *\n * @return {void}\n */\nconst addMeta = (assembled, feature) => {\n  FEATURE_META.map(key => {\n    switch (key) {\n    case 'feature':\n      addContent(assembled, `Feature: ${feature[key]}`, feature.index)\n      break\n    case 'comments':\n      isArr(feature[key]) &&\n          feature[key].map(item =>\n            addContent(assembled, item.content, item.index)\n          )\n      break\n    case 'reason':\n      isArr(feature[key]) &&\n          feature[key].map(item =>\n            addContent(assembled, `  ${item.content}`, item.index)\n          )\n      break\n    case 'desire':\n    case 'perspective':\n      feature[key] &&\n          addContent(assembled, `  ${feature[key].content}`, feature[key].index)\n      break\n    }\n  })\n}\n\n/**\n * Converts a scenarios steps into strings and adds them to the assembled array\n * @function\n * @private\n * @param {Array<String>} assembled - Array of strings converted from a feature model\n * @param {Object} scenario - Parsed scenario model containing a steps array\n *\n * @return {void}\n */\nconst addSteps = (assembled, scenario) => {\n  isArr(scenario.steps) &&\n    scenario.steps.length &&\n    scenario.steps.map(step =>\n      addContent(\n        assembled,\n        `    ${capitalize(step.type)} ${step.step}`,\n        step.index\n      )\n    )\n}\n\n/**\n * Converts a features scenarios into strings and adds them to the assembled array\n * @function\n * @private\n * @param {Array<String>} assembled - Array of strings converted from a feature model\n * @param {Object} feature - Parsed feature model containing a scenarios array\n *\n * @return {void}\n */\nconst addScenarios = (assembled, feature) => {\n  feature.scenarios &&\n    feature.scenarios.map(scenario => {\n      addTags(assembled, scenario.tags, `  `)\n      addContent(assembled, `  Scenario: ${scenario.scenario}`, scenario.index)\n      addSteps(assembled, scenario)\n    })\n}\n\n/**\n * Checks the whitespace of adjacent lines to determine the whitespace of the comment\n * Uses the next line first, then the previous line if the next line does not exist\n * @function\n * @private\n * @param {Array<String>} assembled - Array of strings converted from a feature model\n * @param {string} line - Comment line to be formatted\n * @param {number} index - Position of the line within the assembled array\n *\n * @return {string} - Formatted comment line relative to it's adjacent lines\n */\nconst formatComment = (assembled, line, index) => {\n  const next = assembled[index + 1]\n  const prev = assembled[index - 1]\n  let compareLine = exists(next) ? next : prev\n\n  // If no line to compare with just return the comment\n  if (!compareLine) return `${line}\\n`\n\n  // Split on the comment char, so we have just the text of the comment\n  const comment = line.split('#').pop()\n\n  // Get the white space of the compose line\n  const whiteSpace = Array(\n    compareLine.length - compareLine.trimStart().length\n  ).join(' ')\n\n  // Add that to the comment and replace the comment char #\n  // This allows the comments to be spaced relative the the adjacent lines\n  // Must add an extra space after addSpace because whiteSpace is 1 space short\n  return `${whiteSpace} # ${comment}\\n`\n}\n\n/**\n * Converts the assembled array into a formatted feature string\n * Calls helper to format comment lines containing a #\n * Adds a line ending char at the end of each line => '\\n'\n * @function\n * @private\n * @param {Array<String>} assembled - Array of strings converted from a feature model\n *\n * @return {string} - Reassembled feature as a string\n */\nconst formatAssembled = assembled => {\n  // Use array.from to allow access to empty array position\n  // This ensures we can replace it with an empty string\n  return Array.from(assembled, (line, index) => {\n    // For any non-existing lines, add an empty space\n    // This can happen from empty parsed lines\n    // That have an index, but no content\n    return !exists(line)\n      ? '\\n'\n      : line.startsWith('#')\n        ? formatComment(assembled, line, index)\n        : `${line}\\n`\n  })\n    .join('')\n    .trim()\n}\n\n/**\n * Converts parsed feature models back into a formatted strings\n * @function\n * @public\n * @export\n * @param {Array|Object} toAssemble - Parsed feature model to be converted\n *\n * @return {Array<String>} - Reassembled features as an array of strings\n */\nexport const assembleFeature = toAssemble => {\n  return eitherArr(toAssemble, [toAssemble]).map(feature => {\n    let assembled = []\n    !isObj(feature) && throwFeatureNotAnObj(feature)\n\n    addTags(assembled, feature.tags)\n    addMeta(assembled, feature)\n    addScenarios(assembled, feature)\n\n    return formatAssembled(assembled)\n  })\n}\n", "import { assembleFeature } from './feature'\n\nexport const assemble = {\n  feature: assembleFeature,\n}\n", "import { Steps } from './steps'\nimport { Hooks } from './hooks'\nimport { Runner } from './runner'\nimport { assemble } from './assemble'\nimport { Matcher, registerParamType } from './matcher'\nimport { parseFeature, parseDefinition } from './parse'\nimport { isObj, capitalize, noOpObj, eitherArr } from '@keg-hub/jsutils'\n\n/**\n * @typedef\n * Parkin#Given - Register Given step definitions\n * Parkin#When - Register When step definitions\n * Parkin#Then - Register Then step definitions\n * Parkin#And - Register And step definitions\n * Parkin#But - Register But step definitions\n * Parkin#assemble - Object containing assemble helper methods\n * Parkin#assemble#feature - Assemble feature models into feature text\n * Parkin#run - Run step definitions against feature\n * Parkin#parse - Object containing parse helper methods\n * Parkin#parse#feature - Parse feature file text into a feature object\n * Parkin#parse#definition - Parse definition file text into a step definition objects\n * Parkin#registerSteps - Register step definitions to be accessible when running features\n * Parkin#matcher - Instance of the matcher class to give direct access to matcher methods\n * Parkin#paramTypes - Object containing param type helper methods\n * Parkin#paramTypes#register - Register custom paramTypes for step definitions\n */\n\n/**\n * Main class for handling feature files in the browser\n * Use the Steps, Runner and parser to allow executing feature file tests\n * @class\n * @public\n * @param {Object} world - Holds configuration for the running test environment\n * @param {Object} steps - Object with step type keys containing step definitions\n *\n * @returns {Object} Instance of the Parkin class\n */\nexport class Parkin {\n  constructor(world, steps) {\n    isObj(world) && this.init(world, steps)\n  }\n\n  #isInit = false\n\n  init = (world = noOpObj, steps) => {\n    if (this.#isInit)\n      return console.warn(\n        `This instance of parkin has already been initialized!`\n      )\n\n    // Ensure the world.$alias object exists\n    if (!isObj(world.$alias)) world.$alias = {}\n\n    // Set isInit, so we can't re-initialized\n    this.#isInit = true\n    this.world = world\n    this.steps = new Steps(this.world)\n    this.hooks = new Hooks(this.world)\n    this.runner = new Runner(this.steps, this.hooks, this.world)\n\n    /**\n     * Runs the step definition methods matching the steps of a feature\n     * @memberof Parkin\n     * @alias instance&period;run\n     * @param {string|Array<Object>|Object} data - Feature data as a string or parsed Feature model\n     * @param {Object} options - options object\n     * @param {string?} options.name - optional name to filter features by\n     * @param {Array<string>} options.tags - optional tags to filter features by\n     * @function\n     * @public\n     *\n     * @returns {function} - Run tests method for executing a features steps\n     */\n    this.run = this.runner.run\n\n    /**\n     * Access parse object containing feature and definition parse methods\n     * @memberof Parkin\n     * @alias instance&period;parse\n     * @function\n     * @public\n     *\n     * @property {function} feature - Method to parse a feature string into an object\n     * @property {function} definition - Method to parse a definition string an object\n     */\n    this.parse = {\n      feature: parseFeature.bind(this),\n      definition: parseDefinition.bind(this),\n    }\n\n    /**\n     * Access assemble object containing feature assemble methods\n     * @memberof Parkin\n     * @alias instance&period;assemble\n     * @function\n     * @public\n     *\n     * @property {function} feature - Method to assemble a feature model into a string\n     */\n    this.assemble = assemble\n\n    /**\n     * Access paramTypes object containing the paramTypes register method\n     * <br>Allows registering custom paramTypes within registered step definitions\n     * @memberof Parkin\n     * @alias instance&period;paramTypes\n     * @function\n     * @public\n     * @example\n     * const PK = new Parkin()\n     * PK.paramTypes.register({ ...paramType model })\n     *\n     * @returns {Object} - paramTypes object container `register` param types method\n     */\n    this.paramTypes = { register: registerParamType }\n\n    /**\n     * Access to step definition matcher functions\n     * <br>Allows calling the matchers directly to check if a definition matches a step\n     * @memberof Parkin\n     * @alias instance&period;paramTypes\n     * @function\n     * @public\n     * @example\n     * const PK = new Parkin()\n     * PK.matcher.find(definitions, step, world)\n     * @example\n     * const PK = new Parkin()\n     * PK.matcher.expression(definition, step, world)\n     * @example\n     * const PK = new Parkin()\n     * PK.matcher.regex(definition, step, world)\n     */\n    this.matcher = new Matcher()\n\n    // Register in steps passed in on initialization\n    isObj(steps) && this.registerSteps(steps)\n\n    /**\n     * Step Definition Register methods\n     * @memberof Parkin\n     * @alias instance&period;When\n     * @function\n     * @public\n     * @param {string} match - Text used to matched with a features step\n     * @param {function} method - Called when a features step matches the text param\n     * @param {Object} meta - Object describing the functionality of the step definition\n     * @example\n     * const PK = new Parkin()\n     * PK.Given(`Given step definition string || regex`, ()=> {}, {})\n     * PK.When(`When step definition string || regex`, ()=> {}, {})\n     * PK.Then(`Then step definition string || regex`, ()=> {}, {})\n     * PK.And(`And step definition string || regex`, ()=> {}, {})\n     * PK.But(`But step definition string || regex`, ()=> {}, {})\n     *\n     * @returns {void}\n     */\n    this.steps.types.map(type => {\n      this[capitalize(type)] = (matcher, method, meta) =>\n        this.steps.register(`_${type}`, type, matcher, method, meta)\n    })\n  }\n\n  /**\n   * Helper for registering step definitions after the Parkin class instance has ben created\n   * @memberof Parkin\n   * @alias instance&period;registerSteps\n   * @function\n   * @public\n   * @param {Object} steps - Object with step type keys containing step definitions\n   * @example\n   *   // Example steps object passed in as the first argument\n   *   const steps = {\n   *     given: {\n   *       // Key / Value pair of matcher text and corresponding function\n   *       `I goto page {url}`: () => {},\n   *       // Value can also be an array with a function and meta data (i.e. [function, meta] )\n   *       `I goto page {url}`: [() => {}, { //...definition meta data  }],\n   *     },\n   *     when: { ... },\n   *     then: { ... }\n   *   }\n   *\n   * @returns {void}\n   */\n  registerSteps = steps => {\n    // Loop the steps object\n    Object.entries(steps).map((type, typedSteps) =>\n      // Loop each step type ( Given, When, Then, But, And )\n      Object.entries(typedSteps).map((matcher, content) =>\n        // Register the step based by type with the Step class instance\n        this.steps[capitalize(type)](matcher, ...eitherArr(content, [content]))\n      )\n    )\n  }\n}\n\n// Also export a instance of the class\n// This allows us to re-use the same instance as a singleton\nexport const PKInstance = new Parkin()\n"],
  "mappings": "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",
  "names": ["OPTIONS", "SHOULD_LOG", "SHOULD_THROW", "LOG_PREFIX", "defaultValidator", "validate", "argObj", "validators", "options", "logs", "throws", "prefix", "validationResults", "Object", "entries", "map", "argName", "argValue", "validateArgument", "$default", "success", "cases", "reduce", "total", "next", "validationReducer", "setOptions", "resetOptions", "key", "value", "validator", "validatorString", "name", "toString", "reason", "finalResult", "nextValidation", "handleFailure", "validation", "shouldLog", "shouldThrow", "Error", "join", "console", "error", "isArr", "Array", "isArray", "buildElementCountMap", "arr", "counts", "Map", "i", "length", "r", "element", "count", "get", "set", "areCountMapsEqual", "mapA", "mapB", "size", "isObj", "obj", "ensureArr", "val", "isFunc", "func", "deepFreeze", "freeze", "getOwnPropertyNames", "prop", "hasOwnProperty", "isFrozen", "noOpObj", "noPropObj", "content", "noPropArr", "exists", "flatten", "result", "opts", "truthy", "push", "mutate", "assign", "splice", "flatArr", "applyToFunc", "item", "expression", "args", "pipeline", "functions", "fn", "isStr", "str", "mapString", "charMapper", "char", "isLowerCase", "toLowerCase", "isUpperCase", "toUpperCase", "delimitString", "delimiter", "delimiters", "isDelimiter", "c", "some", "del", "prevChar", "capitalize", "lowercaseTail", "tail", "slice", "removeDot", "string", "noDot", "indexOf", "cleanStr", "replace", "camelCase", "compCase", "split", "cased", "word", "index", "toStr", "JSON", "stringify", "uppercasePattern", "msPattern", "hyphenCache", "toHyphenLower", "match", "equalsNaN", "isNum", "isNonNegative", "sanitize", "isColl", "updateColl", "path", "type", "org", "undefined", "parts", "from", "pop", "breakPath", "shift", "fallback", "template", "tempStr", "data", "regex", "exact", "substr", "trim", "replaceWith", "quoteSymbols", "reverseStr", "reversed", "getNearestDelimiterIndex", "text", "sort", "find", "idx", "getWordStartingAt", "endingSpaceIdx", "substring", "isBool", "isStrBool", "convertToStrBool", "softFalsy", "Boolean", "toBool", "getNums", "toNum", "Number", "isOrderable", "x", "compareTo", "y", "valid", "localeCompare", "identity", "hasOwn", "prototype", "call", "cloneFunc", "funcClone", "apply", "defineProperty", "configurable", "deepClone", "hash", "WeakMap", "Set", "has", "Date", "RegExp", "source", "flags", "constructor", "create", "cloneObjWithPrototypeAndProperties", "keys", "objectWithPrototype", "getPrototypeOf", "sourceDescriptors", "getOwnPropertyDescriptors", "descriptor", "clone", "isSealed", "seal", "uuid", "a", "Math", "random", "typeOf", "matchArg", "entry", "caseValueOrPredicate", "valueOnMatch", "default", "isEmpty", "findExtrema", "comparator", "extremaSoFar", "uniqArrByReference", "filter", "e", "uniqArr", "selector", "unique", "id", "add", "cleanColl", "coll", "recursive", "cleaned", "keyList", "hasProp", "deepEqual", "b", "arrA", "arrB", "dateA", "dateB", "getTime", "regexpA", "regexpB", "strToType", "parse", "SHOW_LOGS", "METH_DEF", "PREFIX", "LOG_TYPES", "logData", "clearObj", "deepMerge", "sources", "merged", "srcCopy", "joined", "isEntry", "maybeEntry", "mapEntries", "cb", "initialValue", "reduceObj", "start", "promisify", "method", "Promise", "res", "rej", "cbData", "defObjProps", "concat", "functionName", "addAsync", "object", "__IS_PROMISIFIED__", "getValue", "getOwnPropertyDescriptor", "isRegex", "getRegexSource", "maybeRx", "queryToObj", "currentQueryItems", "stringSplit", "querystring", "components", "itemSplit", "array", "decodeURIComponent", "mutatorCb", "warn", "otherArr", "arrCounts", "otherCounts", "longest", "shortest", "arrSet", "l", "arg", "F", "camelCasedSplit", "params", "se", "message", "ue", "re", "predicate", "fromIndex", "wait", "immediate", "timeout", "context", "this", "callNow", "clearTimeout", "setTimeout", "num", "bindTo", "doItAmount", "responses", "val1", "val2", "check", "func1", "func2", "obj1", "obj2", "str1", "str2", "every", "h", "propSelector", "mapFn", "inputIsValid", "finalArr", "current", "el", "last", "compare", "z", "G", "Y", "Ne", "paramKey", "doc", "document", "search", "location", "_doc$location", "_queryToObj", "reversedIndex", "window", "createElement", "oe", "maxLength", "reverse", "charCodeAt", "abs", "rule", "hRule", "test", "values", "p", "$", "D", "U", "te", "quotes", "quote", "startsWith", "endsWith", "date", "isNaN", "expressions", "nextSource", "one", "two", "use", "promise", "then", "catch", "err", "_e", "Fe", "mapper", "mappedValue", "keyMapper", "getCacheKey", "limit", "memorized", "cache", "arguments", "destroy", "divisor", "g", "m", "mod", "firstSet", "urlStr", "useVal", "encodeURIComponent", "_", "updated", "startIndex", "nextArr", "exception", "logErr", "w", "proto", "amount", "useAmount", "randoms", "floor", "Pe", "times", "cloneDeep", "H", "async", "asyncFns", "cloneResults", "returnOriginal", "results", "log", "methDef", "col1", "col2", "original", "toAdd", "intersect", "compareKeys", "k", "B", "waiting", "throttleTimeout", "startTime", "parseFloat", "parseInt", "ee", "divider", "sep", "P", "le", "fileName", "time", "src_exports", "__export", "PKInstance", "Parkin", "__toCommonJS", "import_jsutils", "constants", "import_jsutils", "import_jsutils", "getRXMatch", "line", "regex", "index", "matching", "sanitizeForId", "text", "cleaned", "sanitize", "step", "name", "validateDefinition", "definition", "definitions", "validated", "def", "removeQuotes", "arg", "import_jsutils", "import_jsutils", "RX_OPTIONAL", "RX_ALT", "RX_PARAMETER", "RX_EXPRESSION", "RX_ANY", "RX_MATCH_REPLACE", "RX_DOUBLE_QUOTED", "RX_SINGLE_QUOTED", "RX_FLOAT", "RX_INT", "RX_WORLD", "RX_WORLD_REPLACE", "RX_WORLD_MATCH", "RX_ALIAS", "RX_ALIAS_REPLACE", "RX_ALIAS_MATCH", "testMethodFill", "type", "throwMissingSteps", "throwMissingFeatureText", "throwNoMatchingStep", "text", "throwParamTypeExists", "throwFeatureNotAnObj", "feature", "throwMissingWorldValue", "arg", "world", "throwInvalidHookType", "hookTypes", "type", "throwWorldReplace", "err", "currentMatch", "throwAliasReplace", "WORLD_KEY", "ALIAS_WORLD_KEY", "ALIAS_REF", "constants", "checkWorldValue", "func", "type", "arg", "$world", "hasWorldVal", "RX_WORLD", "hasAliasVal", "RX_ALIAS", "matchType", "worldVal", "removeQuotes", "throwMissingWorldValue", "val", "typeModel", "__paramTypes", "RX_ANY", "RX_FLOAT", "result", "RX_INT", "RX_DOUBLE_QUOTED", "RX_SINGLE_QUOTED", "getParamTypes", "registerParamType", "model", "key", "throwParamTypeExists", "convertTypes", "matches", "transformers", "item", "i", "paramType", "matchRegex", "definition", "text", "match", "toAlternateRegex", "optional", "split", "start", "middle", "end", "getFullOptionalText", "getOptionalRegex", "optionalText", "getParamRegex", "type", "params", "getParamTypes", "getAlternateRegex", "value", "getMatchRegex", "val", "paramType", "parseMatch", "matchArr", "trimmed", "diff", "RX_MATCH_REPLACE", "getRegexParts", "defMatcher", "parameters", "RX_PARAMETER", "optionals", "RX_OPTIONAL", "alts", "RX_ALT", "matchA", "matchB", "tokenRegex", "RX_INT", "RX_FLOAT", "RX_PARAMETER", "RX_DOUBLE_QUOTED", "RX_SINGLE_QUOTED", "tokenizeStep", "step", "def", "parts", "getRegexParts", "tokens", "match", "idx", "val", "__", "rest", "type", "part", "trimmed", "diff", "import_jsutils", "import_jsutils", "hasWindow", "hasGlobal", "hasModule", "hasRequire", "hasJasmine", "resolveJasmine", "resolveModule", "resolveRequire", "resolveGlobalObj", "import_jsutils", "escapeStr", "str", "hasWindow", "runRegexCheck", "matcher", "testRx", "replaceWith", "regexStr", "args", "match", "start", "end", "replace", "convertToRegex", "paramTypes", "getParamTypes", "transformers", "RX_EXPRESSION", "val", "type", "RX_MATCH_REPLACE", "isParameter", "RX_PARAMETER", "isOptional", "RX_OPTIONAL", "getParamRegex", "toAlternateRegex", "checkAlternative", "altIndexes", "RX_ALT", "getAlternateRegex", "checkAnchors", "final", "extractParameters", "text", "stepMatcher", "wordMatches", "parts", "getRegexParts", "expectedParamLength", "part", "result", "state", "params", "textIndex", "wordMatchIndex", "substring", "isWord", "partMatch", "wordMatch", "findAsRegex", "definition", "escaped", "regexAlts", "regexConverted", "regexAnchors", "matchRegex", "matchExpression", "$world", "found", "converted", "convertTypes", "REGEX_VARIANT", "constants", "Matcher", "matcher", "matchRegex", "getRegexParts", "getParamTypes", "tokenizeStep", "extractParameters", "matchExpression", "findAsRegex", "registerParamType", "definitions", "text", "$world", "found", "definition", "import_jsutils", "REGEX_VARIANT", "EXPRESSION_VARIANT", "STEP_TYPES", "constants", "getContent", "step", "match", "registerFromCall", "internalType", "type", "method", "meta", "definition", "sanitize", "sanitizeForId", "definitions", "newDefinition", "validateDefinition", "tempRegister", "parent", "container", "args", "registerFromParse", "DEF_TYPES", "built", "resolveGlobalObj", "resolveRequire", "resolveModule", "joinAllSteps", "instance", "stepDefs", "Steps", "world", "self", "text", "list", "found", "matcher", "throwNoMatchingStep", "import_jsutils", "HOOK_TYPES", "constants", "Hooks", "world", "instance", "type", "clientHookFn", "foundHooks", "throwInvalidHookType", "toResolve", "hook", "RX_GIVEN", "RX_WHEN", "RX_THEN", "RX_AND", "RX_BUT", "RX_ASTERISK", "RX_DOC_QUOTES", "RX_DOC_TICKS", "RX_DATA_TABLE", "RegStepTags", "RX_GIVEN", "RX_WHEN", "RX_THEN", "RX_AND", "RX_BUT", "RX_ASTERISK", "checkDataTable", "step", "lines", "line", "index", "RX_DATA_TABLE", "tableEnd", "table", "ln", "row", "item", "column", "checkDocString", "docMatch", "RX_DOC_QUOTES", "RX_DOC_TICKS", "whiteSpace", "spacer", "spacerRegex", "cleaned", "stepFactory", "type", "stepText", "sanitizeForId", "nextIndex", "nextLine", "afterLines", "parseStep", "scenario", "added", "regTag", "hasTag", "getRXMatch", "import_jsutils", "import_jsutils", "ALIAS_REF", "WORLD_REF", "ALIAS_WORLD_KEY", "WORLD_AT_RUNTIME", "ALIAS_REF_AT_RUNTIME", "constants", "attemptReplace", "match", "world", "location", "replaceWith", "aliasReplace", "text", "currentMatch", "RX_ALIAS_MATCH", "cleaned", "RX_ALIAS_REPLACE", "err", "throwAliasReplace", "worldReplace", "RX_WORLD_MATCH", "RX_WORLD_REPLACE", "throwWorldReplace", "replaceWorld", "RX_NEWLINE", "RX_TAG", "RX_COMMENT", "RX_FEATURE", "RX_RULE", "RX_AS", "RX_I_WANT", "RX_SO_THAT", "RX_IN_ORDER", "RX_SCENARIO", "RX_EXAMPLE", "RX_BACKGROUND", "featureMetaTags", "featureFactory", "feature", "content", "index", "sanitizeForId", "ruleFactory", "rule", "scenarioFactory", "scenario", "backgroundFactory", "background", "addReason", "reason", "featureMeta", "line", "metaAdded", "added", "regTag", "hasTag", "getRXMatch", "checkTag", "parent", "tagParent", "tags", "featureComment", "comment", "ensureFeature", "featuresGroup", "featureText", "builtFeature", "ensureRule", "ruleText", "ensureScenario", "hasScenario", "scenarioText", "ensureBackground", "backgroundText", "setActiveParent", "activeParent", "parseFeature", "text", "world", "features", "lines", "replaceWorld", "parseStep", "parseDefinition", "text", "import_jsutils", "SPEC_RESULT_LOG", "LOG_JEST_SPEC_ENV", "constants", "logResultToTerminal", "result", "timestamp", "getSuiteData", "suite", "description", "type", "getTestMethod", "testMode", "testMethodFill", "buildReporter", "jasmineEnv", "suites", "jasmineDescribe", "args", "spec", "skipTestsOnFail", "hasJasmine", "resolveJasmine", "import_jsutils", "buildTitle", "text", "type", "resolveFeatures", "data", "$world", "parseFeature", "features", "feature", "throwMissingFeatureText", "runStep", "stepsInstance", "step", "testMode", "getTestMethod", "loopSteps", "parent", "title", "describe", "responses", "runScenario", "scenario", "background", "runRule", "rule", "parseFeatureTags", "tags", "itemMatch", "name", "filterOptions", "filterName", "filterTags", "parsedTags", "nameMatch", "tagMatch", "clientTag", "filterFeatures", "filtered", "matchingScenarios", "Runner", "steps", "hooks", "world", "throwMissingSteps", "options", "skipTestsOnFail", "beforeAll", "afterAll", "beforeEach", "afterEach", "promises", "import_jsutils", "FEATURE_META", "constants", "addContent", "assembled", "content", "index", "addTags", "tags", "spacer", "addMeta", "feature", "key", "item", "addSteps", "scenario", "step", "addScenarios", "formatComment", "line", "next", "prev", "compareLine", "comment", "formatAssembled", "assembleFeature", "toAssemble", "throwFeatureNotAnObj", "assemble", "assembleFeature", "import_jsutils", "Parkin", "world", "steps", "#isInit", "Steps", "Hooks", "Runner", "parseFeature", "parseDefinition", "assemble", "registerParamType", "Matcher", "type", "matcher", "method", "meta", "typedSteps", "content", "PKInstance"]
}
